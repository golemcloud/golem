// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod api {
        /// The Golem host API provides low level access to Golem specific features such as promises and control over
        /// the durability and transactional guarantees the executor provides.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            pub type ComponentId = super::super::super::golem::rpc::types::ComponentId;
            pub type Uuid = super::super::super::golem::rpc::types::Uuid;
            pub type AgentId = super::super::super::golem::rpc::types::AgentId;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An index into the persistent log storing all performed operations of an agent
            pub type OplogIndex = u64;
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem agents can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub agent_id: AgentId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("agent-id", &self.agent_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// Represents a Golem Cloud account
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AccountId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for AccountId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AccountId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem environment
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EnvironmentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for EnvironmentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EnvironmentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the agent becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for agents
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                                .finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update an agent to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the agent using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the agent's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => {
                            f.debug_tuple("UpdateMode::Automatic").finish()
                        }
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }
            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Operators used in filtering enumerated agents
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => {
                            f.debug_tuple("FilterComparator::Less").finish()
                        }
                    }
                }
            }
            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Operators used on strings in filtering enumerated agents
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
                StartsWith,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                        StringFilterComparator::StartsWith => {
                            f.debug_tuple("StringFilterComparator::StartsWith").finish()
                        }
                    }
                }
            }
            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,
                        4 => StringFilterComparator::StartsWith,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// The current status of an agent
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum AgentStatus {
                /// The agent is running an invoked function
                Running,
                /// The agent is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the agent can no longer be used
                Failed,
                /// The agent exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for AgentStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentStatus::Running => {
                            f.debug_tuple("AgentStatus::Running").finish()
                        }
                        AgentStatus::Idle => f.debug_tuple("AgentStatus::Idle").finish(),
                        AgentStatus::Suspended => {
                            f.debug_tuple("AgentStatus::Suspended").finish()
                        }
                        AgentStatus::Interrupted => {
                            f.debug_tuple("AgentStatus::Interrupted").finish()
                        }
                        AgentStatus::Retrying => {
                            f.debug_tuple("AgentStatus::Retrying").finish()
                        }
                        AgentStatus::Failed => {
                            f.debug_tuple("AgentStatus::Failed").finish()
                        }
                        AgentStatus::Exited => {
                            f.debug_tuple("AgentStatus::Exited").finish()
                        }
                    }
                }
            }
            impl AgentStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> AgentStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => AgentStatus::Running,
                        1 => AgentStatus::Idle,
                        2 => AgentStatus::Suspended,
                        3 => AgentStatus::Interrupted,
                        4 => AgentStatus::Retrying,
                        5 => AgentStatus::Failed,
                        6 => AgentStatus::Exited,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Describes a filter condition on agent IDs when enumerating agents
            #[derive(Clone)]
            pub struct AgentNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentNameFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent status when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentStatusFilter {
                pub comparator: FilterComparator,
                pub value: AgentStatus,
            }
            impl ::core::fmt::Debug for AgentStatusFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the component version when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for AgentVersionFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's creation time when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for AgentCreatedAtFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's environment variables when enumerating agents
            #[derive(Clone)]
            pub struct AgentEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentEnvFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's configuration variables when enumerating agents
            #[derive(Clone)]
            pub struct AgentConfigVarsFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentConfigVarsFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentConfigVarsFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes one filter condition for enumerating agents
            #[derive(Clone)]
            pub enum AgentPropertyFilter {
                Name(AgentNameFilter),
                Status(AgentStatusFilter),
                Version(AgentVersionFilter),
                CreatedAt(AgentCreatedAtFilter),
                Env(AgentEnvFilter),
                WasiConfigVars(AgentConfigVarsFilter),
            }
            impl ::core::fmt::Debug for AgentPropertyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentPropertyFilter::Name(e) => {
                            f.debug_tuple("AgentPropertyFilter::Name").field(e).finish()
                        }
                        AgentPropertyFilter::Status(e) => {
                            f.debug_tuple("AgentPropertyFilter::Status")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::Version(e) => {
                            f.debug_tuple("AgentPropertyFilter::Version")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("AgentPropertyFilter::CreatedAt")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::Env(e) => {
                            f.debug_tuple("AgentPropertyFilter::Env").field(e).finish()
                        }
                        AgentPropertyFilter::WasiConfigVars(e) => {
                            f.debug_tuple("AgentPropertyFilter::WasiConfigVars")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Combines multiple filter conditions with an `AND` relationship for enumerating agents
            #[derive(Clone)]
            pub struct AgentAllFilter {
                pub filters: _rt::Vec<AgentPropertyFilter>,
            }
            impl ::core::fmt::Debug for AgentAllFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            /// Combines multiple groups of filter conditions with an `OR` relationship for enumerating agents
            #[derive(Clone)]
            pub struct AgentAnyFilter {
                pub filters: _rt::Vec<AgentAllFilter>,
            }
            impl ::core::fmt::Debug for AgentAnyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            /// Metadata about an agent
            #[derive(Clone)]
            pub struct AgentMetadata {
                /// The agent ID, consists of the component ID, agent type and agent parameters
                pub agent_id: AgentId,
                /// Command line arguments seen by the agent
                pub args: _rt::Vec<_rt::String>,
                /// Environment variables seen by the agent
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                /// Configuration variables seen by the agent
                pub config_vars: _rt::Vec<(_rt::String, _rt::String)>,
                /// The current agent status
                pub status: AgentStatus,
                /// The component version the agent is running with
                pub component_version: u64,
                /// The agent's current retry count
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for AgentMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentMetadata")
                        .field("agent-id", &self.agent_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("config-vars", &self.config_vars)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }
            /// Creates an agent enumeration
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetAgents {
                handle: _rt::Resource<GetAgents>,
            }
            impl GetAgents {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetAgents {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-agents"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Target parameter for the `revert-agent` operation
            #[derive(Clone, Copy)]
            pub enum RevertAgentTarget {
                /// Revert to a specific oplog index. The given index will be the last one to be kept.
                RevertToOplogIndex(OplogIndex),
                /// Revert the last N invocations.
                RevertLastInvocations(u64),
            }
            impl ::core::fmt::Debug for RevertAgentTarget {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RevertAgentTarget::RevertToOplogIndex(e) => {
                            f.debug_tuple("RevertAgentTarget::RevertToOplogIndex")
                                .field(e)
                                .finish()
                        }
                        RevertAgentTarget::RevertLastInvocations(e) => {
                            f.debug_tuple("RevertAgentTarget::RevertLastInvocations")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Indicates which agent the code is running on after `fork`
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ForkResult {
                /// The original agent that called `fork`
                Original,
                /// The new agent
                Forked,
            }
            impl ::core::fmt::Debug for ForkResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ForkResult::Original => {
                            f.debug_tuple("ForkResult::Original").finish()
                        }
                        ForkResult::Forked => {
                            f.debug_tuple("ForkResult::Forked").finish()
                        }
                    }
                }
            }
            impl ForkResult {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ForkResult {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ForkResult::Original,
                        1 => ForkResult::Forked,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetPromiseResult {
                handle: _rt::Resource<GetPromiseResult>,
            }
            impl GetPromiseResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetPromiseResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-promise-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl GetAgents {
                #[allow(unused_unsafe, clippy::all)]
                /// Creates an agent enumeration request. It is going to enumerate all agents of all the agent types
                /// defined in `component-id`, filtered by the conditions given by `filter`. If `precise` is true,
                /// the server will calculate the most recent state of all the returned agents, otherwise the returned
                /// metadata will be not guaranteed to be up-to-date.
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&AgentAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid0,
                        } = component_id;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits1,
                            low_bits: low_bits1,
                        } = uuid0;
                        let (result17_0, result17_1, result17_2) = match filter {
                            Some(e) => {
                                let AgentAnyFilter { filters: filters2 } = e;
                                let vec16 = filters2;
                                let len16 = vec16.len();
                                let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec16.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result16 = if layout16.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout16);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec16.into_iter().enumerate() {
                                    let base = result16
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let AgentAllFilter { filters: filters3 } = e;
                                        let vec15 = filters3;
                                        let len15 = vec15.len();
                                        let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec15.len()
                                                * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let result15 = if layout15.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout15);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec15.into_iter().enumerate() {
                                            let base = result15
                                                .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                match e {
                                                    AgentPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let AgentNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator4.clone() as i32)
                                                            as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len5;
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr5.cast_mut();
                                                    }
                                                    AgentPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let AgentStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator6.clone() as i32)
                                                            as u8;
                                                        *base.add(9).cast::<u8>() = (value6.clone() as i32) as u8;
                                                    }
                                                    AgentPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let AgentVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator7.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value7);
                                                    }
                                                    AgentPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let AgentCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator8.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value8);
                                                    }
                                                    AgentPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let AgentEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator9.clone() as i32) as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len11;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr11.cast_mut();
                                                    }
                                                    AgentPropertyFilter::WasiConfigVars(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        let AgentConfigVarsFilter {
                                                            name: name12,
                                                            comparator: comparator12,
                                                            value: value12,
                                                        } = e;
                                                        let vec13 = name12;
                                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                                        let len13 = vec13.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len13;
                                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator12.clone() as i32) as u8;
                                                        let vec14 = value12;
                                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                                        let len14 = vec14.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len14;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr14.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len15;
                                        *base.add(0).cast::<*mut u8>() = result15;
                                        cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                (1i32, result16, len16)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-agents"]
                            fn wit_import18(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import18(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import18(
                                _rt::as_i64(high_bits1),
                                _rt::as_i64(low_bits1),
                                result17_0,
                                result17_1,
                                result17_2,
                                match &precise {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { GetAgents::from_handle(ret as u32) }
                    }
                }
            }
            impl GetAgents {
                #[allow(unused_unsafe, clippy::all)]
                /// Retrieves the next batch of agent metadata.
                pub fn get_next(&self) -> Option<_rt::Vec<AgentMetadata>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-agents.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result38 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base37 = l3;
                                    let len37 = l4;
                                    let mut result37 = _rt::Vec::with_capacity(len37);
                                    for i in 0..len37 {
                                        let base = base37
                                            .add(i * (40 + 8 * ::core::mem::size_of::<*const u8>()));
                                        let e37 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = *base.add(8).cast::<i64>();
                                            let l7 = *base.add(16).cast::<*mut u8>();
                                            let l8 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            let l10 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base15 = l10;
                                            let len15 = l11;
                                            let mut result15 = _rt::Vec::with_capacity(len15);
                                            for i in 0..len15 {
                                                let base = base15
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                let e15 = {
                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len14 = l13;
                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                        l12.cast(),
                                                        len14,
                                                        len14,
                                                    );
                                                    _rt::string_lift(bytes14)
                                                };
                                                result15.push(e15);
                                            }
                                            _rt::cabi_dealloc(
                                                base15,
                                                len15 * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l16 = *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base24 = l16;
                                            let len24 = l17;
                                            let mut result24 = _rt::Vec::with_capacity(len24);
                                            for i in 0..len24 {
                                                let base = base24
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e24 = {
                                                    let l18 = *base.add(0).cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len20 = l19;
                                                    let bytes20 = _rt::Vec::from_raw_parts(
                                                        l18.cast(),
                                                        len20,
                                                        len20,
                                                    );
                                                    let l21 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len23 = l22;
                                                    let bytes23 = _rt::Vec::from_raw_parts(
                                                        l21.cast(),
                                                        len23,
                                                        len23,
                                                    );
                                                    (_rt::string_lift(bytes20), _rt::string_lift(bytes23))
                                                };
                                                result24.push(e24);
                                            }
                                            _rt::cabi_dealloc(
                                                base24,
                                                len24 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l25 = *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l26 = *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base33 = l25;
                                            let len33 = l26;
                                            let mut result33 = _rt::Vec::with_capacity(len33);
                                            for i in 0..len33 {
                                                let base = base33
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e33 = {
                                                    let l27 = *base.add(0).cast::<*mut u8>();
                                                    let l28 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len29 = l28;
                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                        l27.cast(),
                                                        len29,
                                                        len29,
                                                    );
                                                    let l30 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len32 = l31;
                                                    let bytes32 = _rt::Vec::from_raw_parts(
                                                        l30.cast(),
                                                        len32,
                                                        len32,
                                                    );
                                                    (_rt::string_lift(bytes29), _rt::string_lift(bytes32))
                                                };
                                                result33.push(e33);
                                            }
                                            _rt::cabi_dealloc(
                                                base33,
                                                len33 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l34 = i32::from(
                                                *base
                                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l35 = *base
                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            let l36 = *base
                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            AgentMetadata {
                                                agent_id: super::super::super::golem::rpc::types::AgentId {
                                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                                            high_bits: l5 as u64,
                                                            low_bits: l6 as u64,
                                                        },
                                                    },
                                                    agent_id: _rt::string_lift(bytes9),
                                                },
                                                args: result15,
                                                env: result24,
                                                config_vars: result33,
                                                status: AgentStatus::_lift(l34 as u8),
                                                component_version: l35 as u64,
                                                retry_count: l36 as u64,
                                            }
                                        };
                                        result37.push(e37);
                                    }
                                    _rt::cabi_dealloc(
                                        base37,
                                        len37 * (40 + 8 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result37
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result38
                    }
                }
            }
            impl GetPromiseResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns a pollable that can be used to wait for the promise to become ready.j
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-promise-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl GetPromiseResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Poll the result of the promise, returning none if it is not yet ready.
                pub fn get(&self) -> Option<_rt::Vec<u8>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-promise-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result8 = PromiseId {
                        agent_id: super::super::super::golem::rpc::types::AgentId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            agent_id: _rt::string_lift(bytes6),
                        },
                        oplog_idx: l7 as u64,
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets a handle to the result of the promise. Can only be called in the same agent that orignally created the promise.
            pub fn get_promise(promise_id: &PromiseId) -> GetPromiseResult {
                unsafe {
                    let PromiseId { agent_id: agent_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id1,
                        agent_id: agent_id1,
                    } = agent_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = agent_id1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-promise"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                        )
                    };
                    unsafe { GetPromiseResult::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the agent that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { agent_id: agent_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id1,
                        agent_id: agent_id1,
                    } = agent_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = agent_id1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5.cast_mut(),
                            len5,
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current agent travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(oplog_idx)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i32(&replicas)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(begin)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the agent
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i32>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<i64>();
                    let l5 = *ptr0.add(24).cast::<f64>();
                    let l6 = i32::from(*ptr0.add(32).cast::<u8>());
                    let result8 = RetryPolicy {
                        max_attempts: l2 as u32,
                        min_delay: l3 as u64,
                        max_delay: l4 as u64,
                        multiplier: l5,
                        max_jitter_factor: match l6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l7 = *ptr0.add(40).cast::<f64>();
                                    l7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the agent. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) -> () {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import2(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: i64,
                        _: i64,
                        _: f64,
                        _: i32,
                        _: f64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i32(max_attempts0),
                            _rt::as_i64(min_delay0),
                            _rt::as_i64(max_delay0),
                            _rt::as_f64(multiplier0),
                            result1_0,
                            result1_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the agent's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    let v1 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v1
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the agent's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(
                new_persistence_level: PersistenceLevel,
            ) -> () {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import1(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the agent in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            match &idempotent {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let result4 = super::super::super::golem::rpc::types::Uuid {
                        high_bits: l2 as u64,
                        low_bits: l3 as u64,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given agent. The function returns immediately once the request has been processed,
            /// not waiting for the agent to get updated.
            pub fn update_agent(
                agent_id: &AgentId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "update-agent"]
                        fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(target_version),
                            mode.clone() as i32,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the current agent's metadata
            pub fn get_self_metadata() -> AgentMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 40 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 40
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *ptr0
                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l7;
                    let len12 = l8;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l9 = *base.add(0).cast::<*mut u8>();
                            let l10 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(
                                l9.cast(),
                                len11,
                                len11,
                            );
                            _rt::string_lift(bytes11)
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l13 = *ptr0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l14 = *ptr0
                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base21 = l13;
                    let len21 = l14;
                    let mut result21 = _rt::Vec::with_capacity(len21);
                    for i in 0..len21 {
                        let base = base21
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e21 = {
                            let l15 = *base.add(0).cast::<*mut u8>();
                            let l16 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            let l18 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len20 = l19;
                            let bytes20 = _rt::Vec::from_raw_parts(
                                l18.cast(),
                                len20,
                                len20,
                            );
                            (_rt::string_lift(bytes17), _rt::string_lift(bytes20))
                        };
                        result21.push(e21);
                    }
                    _rt::cabi_dealloc(
                        base21,
                        len21 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l22 = *ptr0
                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l23 = *ptr0
                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base30 = l22;
                    let len30 = l23;
                    let mut result30 = _rt::Vec::with_capacity(len30);
                    for i in 0..len30 {
                        let base = base30
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e30 = {
                            let l24 = *base.add(0).cast::<*mut u8>();
                            let l25 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len26 = l25;
                            let bytes26 = _rt::Vec::from_raw_parts(
                                l24.cast(),
                                len26,
                                len26,
                            );
                            let l27 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l28 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len29 = l28;
                            let bytes29 = _rt::Vec::from_raw_parts(
                                l27.cast(),
                                len29,
                                len29,
                            );
                            (_rt::string_lift(bytes26), _rt::string_lift(bytes29))
                        };
                        result30.push(e30);
                    }
                    _rt::cabi_dealloc(
                        base30,
                        len30 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l31 = i32::from(
                        *ptr0
                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l32 = *ptr0
                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l33 = *ptr0
                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result34 = AgentMetadata {
                        agent_id: super::super::super::golem::rpc::types::AgentId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            agent_id: _rt::string_lift(bytes6),
                        },
                        args: result12,
                        env: result21,
                        config_vars: result30,
                        status: AgentStatus::_lift(l31 as u8),
                        component_version: l32 as u64,
                        retry_count: l33 as u64,
                    };
                    result34
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get agent metadata
            pub fn get_agent_metadata(agent_id: &AgentId) -> Option<AgentMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 48 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 48
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-agent-metadata"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4,
                        )
                    };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let result39 = match l6 {
                        0 => None,
                        1 => {
                            let e = {
                                let l7 = *ptr4.add(8).cast::<i64>();
                                let l8 = *ptr4.add(16).cast::<i64>();
                                let l9 = *ptr4.add(24).cast::<*mut u8>();
                                let l10 = *ptr4
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                let l12 = *ptr4
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr4
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base17 = l12;
                                let len17 = l13;
                                let mut result17 = _rt::Vec::with_capacity(len17);
                                for i in 0..len17 {
                                    let base = base17
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e17 = {
                                        let l14 = *base.add(0).cast::<*mut u8>();
                                        let l15 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        _rt::string_lift(bytes16)
                                    };
                                    result17.push(e17);
                                }
                                _rt::cabi_dealloc(
                                    base17,
                                    len17 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l18 = *ptr4
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *ptr4
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base26 = l18;
                                let len26 = l19;
                                let mut result26 = _rt::Vec::with_capacity(len26);
                                for i in 0..len26 {
                                    let base = base26
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e26 = {
                                        let l20 = *base.add(0).cast::<*mut u8>();
                                        let l21 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        let l23 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l24 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 = _rt::Vec::from_raw_parts(
                                            l23.cast(),
                                            len25,
                                            len25,
                                        );
                                        (_rt::string_lift(bytes22), _rt::string_lift(bytes25))
                                    };
                                    result26.push(e26);
                                }
                                _rt::cabi_dealloc(
                                    base26,
                                    len26 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l27 = *ptr4
                                    .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr4
                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base35 = l27;
                                let len35 = l28;
                                let mut result35 = _rt::Vec::with_capacity(len35);
                                for i in 0..len35 {
                                    let base = base35
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e35 = {
                                        let l29 = *base.add(0).cast::<*mut u8>();
                                        let l30 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 = _rt::Vec::from_raw_parts(
                                            l29.cast(),
                                            len31,
                                            len31,
                                        );
                                        let l32 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l33 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len34 = l33;
                                        let bytes34 = _rt::Vec::from_raw_parts(
                                            l32.cast(),
                                            len34,
                                            len34,
                                        );
                                        (_rt::string_lift(bytes31), _rt::string_lift(bytes34))
                                    };
                                    result35.push(e35);
                                }
                                _rt::cabi_dealloc(
                                    base35,
                                    len35 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l36 = i32::from(
                                    *ptr4
                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = *ptr4
                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                let l38 = *ptr4
                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                AgentMetadata {
                                    agent_id: super::super::super::golem::rpc::types::AgentId {
                                        component_id: super::super::super::golem::rpc::types::ComponentId {
                                            uuid: super::super::super::golem::rpc::types::Uuid {
                                                high_bits: l7 as u64,
                                                low_bits: l8 as u64,
                                            },
                                        },
                                        agent_id: _rt::string_lift(bytes11),
                                    },
                                    args: result17,
                                    env: result26,
                                    config_vars: result35,
                                    status: AgentStatus::_lift(l36 as u8),
                                    component_version: l37 as u64,
                                    retry_count: l38 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result39
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fork an agent to another agent at a given oplog index
            pub fn fork_agent(
                source_agent_id: &AgentId,
                target_agent_id: &AgentId,
                oplog_idx_cut_off: OplogIndex,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = source_agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id4,
                        agent_id: agent_id4,
                    } = target_agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid5,
                    } = component_id4;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits6,
                        low_bits: low_bits6,
                    } = uuid5;
                    let vec7 = agent_id4;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork-agent"]
                        fn wit_import8(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(high_bits6),
                            _rt::as_i64(low_bits6),
                            ptr7.cast_mut(),
                            len7,
                            _rt::as_i64(oplog_idx_cut_off),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Revert an agent to a previous state
            pub fn revert_agent(
                agent_id: &AgentId,
                revert_target: RevertAgentTarget,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result4_0, result4_1) = match revert_target {
                        RevertAgentTarget::RevertToOplogIndex(e) => {
                            (0i32, _rt::as_i64(e))
                        }
                        RevertAgentTarget::RevertLastInvocations(e) => {
                            (1i32, _rt::as_i64(e))
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "revert-agent"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            result4_0,
                            result4_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the component-id for a given component reference.
            /// Returns none when no component with the specified reference exists.
            /// The syntax of the component reference is implementation dependent.
            ///
            /// Golem OSS: "{component_name}"
            /// Golem Cloud:
            ///     1: "{component_name}" -> will resolve in current account and project
            ///     2: "{project_name}/{component_name}" -> will resolve in current account
            ///     3: "{account_id}/{project_name}/{component_name}"
            pub fn resolve_component_id(
                component_reference: &str,
            ) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result6 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l4 as u64,
                                        low_bits: l5 as u64,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the agent-id for a given component and agent name.
            /// Returns none when no component for the specified reference exists.
            pub fn resolve_agent_id(
                component_reference: &str,
                agent_name: &str,
            ) -> Option<AgentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = agent_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-agent-id"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::AgentId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    agent_id: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the agent-id for a given component and agent-name.
            /// Returns none when no component for the specified component-reference or no agent with the specified agent-name exists.
            pub fn resolve_agent_id_strict(
                component_reference: &str,
                agent_name: &str,
            ) -> Option<AgentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = agent_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-agent-id-strict"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::AgentId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    agent_id: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Forks the current agent at the current execution point. The new agent gets the `new-name` agent ID,
            /// and this agent continues running as well. The return value is going to be different in this agent and
            /// the forked agent.
            pub fn fork(new_name: &str) -> ForkResult {
                unsafe {
                    let vec0 = new_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ForkResult::_lift(ret as u8)
                }
            }
        }
        /// Invocation context support
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod context {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            /// Represents a unit of work or operation
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Span {
                handle: _rt::Resource<Span>,
            }
            impl Span {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Span {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]span"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Represents an invocation context wich allows querying the stack of attributes
            /// created by automatic and user-defined spans.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InvocationContext {
                handle: _rt::Resource<InvocationContext>,
            }
            impl InvocationContext {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for InvocationContext {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]invocation-context"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Possible span attribute value types
            #[derive(Clone)]
            pub enum AttributeValue {
                /// A string value
                String(_rt::String),
            }
            impl ::core::fmt::Debug for AttributeValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AttributeValue::String(e) => {
                            f.debug_tuple("AttributeValue::String").field(e).finish()
                        }
                    }
                }
            }
            /// An attribute of a span
            #[derive(Clone)]
            pub struct Attribute {
                pub key: _rt::String,
                pub value: AttributeValue,
            }
            impl ::core::fmt::Debug for Attribute {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Attribute")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// A chain of attribute values, the first element representing the most recent value
            #[derive(Clone)]
            pub struct AttributeChain {
                pub key: _rt::String,
                pub values: _rt::Vec<AttributeValue>,
            }
            impl ::core::fmt::Debug for AttributeChain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AttributeChain")
                        .field("key", &self.key)
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// The trace represented by a 16 bytes hexadecimal string
            pub type TraceId = _rt::String;
            /// The span represented by a 8 bytes hexadecimal string
            pub type SpanId = _rt::String;
            #[allow(unused_unsafe, clippy::all)]
            /// Starts a new `span` with the given name, as a child of the current invocation context
            pub fn start_span(name: &str) -> Span {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "start-span"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    unsafe { Span::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current invocation context
            ///
            /// The function call captures the current context; if new spans are started, the returned `invocation-context` instance will not
            /// reflect that.
            pub fn current_context() -> InvocationContext {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "current-context"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    unsafe { InvocationContext::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Allows or disallows forwarding of trace context headers in outgoing HTTP requests
            ///
            /// Returns the previous value of the setting
            pub fn allow_forwarding_trace_context_headers(allow: bool) -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "allow-forwarding-trace-context-headers"]
                        fn wit_import0(_: i32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import0(
                            match &allow {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the starting time of the span
                pub fn started_at(&self) -> Datetime {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.started-at"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<i64>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let result4 = super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: l2 as u64,
                            nanoseconds: l3 as u32,
                        };
                        result4
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Set an attribute on the span
                pub fn set_attribute(&self, name: &str, value: &AttributeValue) -> () {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let (result2_0, result2_1, result2_2) = match value {
                            AttributeValue::String(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (0i32, ptr1.cast_mut(), len1)
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.set-attribute"]
                            fn wit_import3(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import3(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import3(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result2_0,
                                result2_1,
                                result2_2,
                            )
                        };
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Set multiple attributes on the span
                pub fn set_attributes(&self, attributes: &[Attribute]) -> () {
                    unsafe {
                        let vec3 = attributes;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * (5 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3
                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                            {
                                let Attribute { key: key0, value: value0 } = e;
                                let vec1 = key0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                match value0 {
                                    AttributeValue::String(e) => {
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len2;
                                        *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                }
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.set-attributes"]
                            fn wit_import4(_: i32, _: *mut u8, _: usize);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        unsafe { wit_import4((self).handle() as i32, result3, len3) };
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Early finishes the span; otherwise it will be finished when the resource is dropped
                pub fn finish(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.finish"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current trace id
                pub fn trace_id(&self) -> TraceId {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.trace-id"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current span id
                pub fn span_id(&self) -> SpanId {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.span-id"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the parent context, if any; allows recursive processing of the invocation context.
                ///
                /// Alternatively, the attribute query methods can return inherited values without having to
                /// traverse the stack manually.
                pub fn parent(&self) -> Option<InvocationContext> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.parent"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result4 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    unsafe { InvocationContext::from_handle(l3 as u32) }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result4
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the value of an attribute `key`. If `inherited` is true, the value is searched in the stack of spans,
                /// otherwise only in the current span.
                pub fn get_attribute(
                    &self,
                    key: &str,
                    inherited: bool,
                ) -> Option<AttributeValue> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute"]
                            fn wit_import2(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                match &inherited {
                                    true => 1,
                                    false => 0,
                                },
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result9 = match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = i32::from(
                                        *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l4 {
                                        n => {
                                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                                            let e8 = {
                                                let l5 = *ptr1
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l6 = *ptr1
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            AttributeValue::String(e8)
                                        }
                                    };
                                    v8
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets all attributes of the current invocation context. If `inherited` is true, it returns the merged set of attributes, each
                /// key associated with the latest value found in the stack of spans.
                pub fn get_attributes(&self, inherited: bool) -> _rt::Vec<Attribute> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attributes"]
                            fn wit_import1(_: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                match &inherited {
                                    true => 1,
                                    false => 0,
                                },
                                ptr0,
                            )
                        };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base12 = l2;
                        let len12 = l3;
                        let mut result12 = _rt::Vec::with_capacity(len12);
                        for i in 0..len12 {
                            let base = base12
                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                            let e12 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = i32::from(
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let v11 = match l7 {
                                    n => {
                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                        let e11 = {
                                            let l8 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            _rt::string_lift(bytes10)
                                        };
                                        AttributeValue::String(e11)
                                    }
                                };
                                Attribute {
                                    key: _rt::string_lift(bytes6),
                                    value: v11,
                                }
                            };
                            result12.push(e12);
                        }
                        _rt::cabi_dealloc(
                            base12,
                            len12 * (5 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = result12;
                        result13
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the chain of attribute values associated with the given `key`. If the key does not exist in any of the
                /// spans in the invocation context, the list is empty. The chain's first element contains the most recent (innermost) value.
                pub fn get_attribute_chain(
                    &self,
                    key: &str,
                ) -> _rt::Vec<AttributeValue> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute-chain"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = *ptr1.add(0).cast::<*mut u8>();
                        let l4 = *ptr1
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base10 = l3;
                        let len10 = l4;
                        let mut result10 = _rt::Vec::with_capacity(len10);
                        for i in 0..len10 {
                            let base = base10
                                .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                            let e10 = {
                                let l5 = i32::from(*base.add(0).cast::<u8>());
                                let v9 = match l5 {
                                    n => {
                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                        let e9 = {
                                            let l6 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                l6.cast(),
                                                len8,
                                                len8,
                                            );
                                            _rt::string_lift(bytes8)
                                        };
                                        AttributeValue::String(e9)
                                    }
                                };
                                v9
                            };
                            result10.push(e10);
                        }
                        _rt::cabi_dealloc(
                            base10,
                            len10 * (3 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result11 = result10;
                        result11
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets all values of all attributes of the current invocation context.
                pub fn get_attribute_chains(&self) -> _rt::Vec<AttributeChain> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute-chains"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base15 = l2;
                        let len15 = l3;
                        let mut result15 = _rt::Vec::with_capacity(len15);
                        for i in 0..len15 {
                            let base = base15
                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                            let e15 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *base
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base14 = l7;
                                let len14 = l8;
                                let mut result14 = _rt::Vec::with_capacity(len14);
                                for i in 0..len14 {
                                    let base = base14
                                        .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                    let e14 = {
                                        let l9 = i32::from(*base.add(0).cast::<u8>());
                                        let v13 = match l9 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e13 = {
                                                    let l10 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len12 = l11;
                                                    let bytes12 = _rt::Vec::from_raw_parts(
                                                        l10.cast(),
                                                        len12,
                                                        len12,
                                                    );
                                                    _rt::string_lift(bytes12)
                                                };
                                                AttributeValue::String(e13)
                                            }
                                        };
                                        v13
                                    };
                                    result14.push(e14);
                                }
                                _rt::cabi_dealloc(
                                    base14,
                                    len14 * (3 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                AttributeChain {
                                    key: _rt::string_lift(bytes6),
                                    values: result14,
                                }
                            };
                            result15.push(e15);
                        }
                        _rt::cabi_dealloc(
                            base15,
                            len15 * (4 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result16 = result15;
                        result16
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the W3C Trace Context headers associated with the current invocation context
                pub fn trace_context_headers(
                    &self,
                ) -> _rt::Vec<(_rt::String, _rt::String)> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.trace-context-headers"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base10 = l2;
                        let len10 = l3;
                        let mut result10 = _rt::Vec::with_capacity(len10);
                        for i in 0..len10 {
                            let base = base10
                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                            let e10 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *base
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                (_rt::string_lift(bytes6), _rt::string_lift(bytes9))
                            };
                            result10.push(e10);
                        }
                        _rt::cabi_dealloc(
                            base10,
                            len10 * (4 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result11 = result10;
                        result11
                    }
                }
            }
        }
        /// Host interface for enumerating and searching for agent oplogs
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod oplog {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type WitValue = super::super::super::golem::rpc::types::WitValue;
            pub type AccountId = super::super::super::golem::api::host::AccountId;
            pub type ComponentVersion = super::super::super::golem::api::host::ComponentVersion;
            pub type OplogIndex = super::super::super::golem::api::host::OplogIndex;
            pub type PersistenceLevel = super::super::super::golem::api::host::PersistenceLevel;
            pub type EnvironmentId = super::super::super::golem::api::host::EnvironmentId;
            pub type RetryPolicy = super::super::super::golem::api::host::RetryPolicy;
            pub type AgentId = super::super::super::golem::api::host::AgentId;
            pub type Attribute = super::super::super::golem::api::context::Attribute;
            pub type AttributeValue = super::super::super::golem::api::context::AttributeValue;
            pub type SpanId = super::super::super::golem::api::context::SpanId;
            pub type TraceId = super::super::super::golem::api::context::TraceId;
            #[derive(Clone, Copy)]
            pub enum WrappedFunctionType {
                /// The side-effect reads from the agent's local state (for example local file system,
                /// random generator, etc.)
                ReadLocal,
                /// The side-effect writes to the agent's local state (for example local file system)
                WriteLocal,
                /// The side-effect reads from external state (for example a key-value store)
                ReadRemote,
                /// The side-effect manipulates external state (for example an RPC call)
                WriteRemote,
                /// The side-effect manipulates external state through multiple invoked functions (for example
                /// a HTTP request where reading the response involves multiple host function calls)
                ///
                /// On the first invocation of the batch, the parameter should be `None` - this triggers
                /// writing a `BeginRemoteWrite` entry in the oplog. Followup invocations should contain
                /// this entry's index as the parameter. In batched remote writes it is the caller's responsibility
                /// to manually write an `EndRemoteWrite` entry (using `end_function`) when the operation is completed.
                WriteRemoteBatched(Option<OplogIndex>),
                WriteRemoteTransaction(Option<OplogIndex>),
            }
            impl ::core::fmt::Debug for WrappedFunctionType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WrappedFunctionType::ReadLocal => {
                            f.debug_tuple("WrappedFunctionType::ReadLocal").finish()
                        }
                        WrappedFunctionType::WriteLocal => {
                            f.debug_tuple("WrappedFunctionType::WriteLocal").finish()
                        }
                        WrappedFunctionType::ReadRemote => {
                            f.debug_tuple("WrappedFunctionType::ReadRemote").finish()
                        }
                        WrappedFunctionType::WriteRemote => {
                            f.debug_tuple("WrappedFunctionType::WriteRemote").finish()
                        }
                        WrappedFunctionType::WriteRemoteBatched(e) => {
                            f.debug_tuple("WrappedFunctionType::WriteRemoteBatched")
                                .field(e)
                                .finish()
                        }
                        WrappedFunctionType::WriteRemoteTransaction(e) => {
                            f.debug_tuple("WrappedFunctionType::WriteRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PluginInstallationDescription {
                pub name: _rt::String,
                pub version: _rt::String,
                pub parameters: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for PluginInstallationDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PluginInstallationDescription")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("parameters", &self.parameters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CreateParameters {
                pub timestamp: Datetime,
                pub agent_id: AgentId,
                pub component_version: ComponentVersion,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub created_by: AccountId,
                pub environment_id: EnvironmentId,
                pub parent: Option<AgentId>,
                pub component_size: u64,
                pub initial_total_linear_memory_size: u64,
                pub initial_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for CreateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("agent-id", &self.agent_id)
                        .field("component-version", &self.component_version)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("created-by", &self.created_by)
                        .field("environment-id", &self.environment_id)
                        .field("parent", &self.parent)
                        .field("component-size", &self.component_size)
                        .field(
                            "initial-total-linear-memory-size",
                            &self.initial_total_linear_memory_size,
                        )
                        .field("initial-active-plugins", &self.initial_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ImportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: WitValue,
                pub response: WitValue,
                pub wrapped_function_type: WrappedFunctionType,
            }
            impl ::core::fmt::Debug for ImportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("response", &self.response)
                        .field("wrapped-function-type", &self.wrapped_function_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct LocalSpanData {
                pub span_id: SpanId,
                pub start: Datetime,
                pub parent: Option<SpanId>,
                /// Optionally an index of the exported-function-invoked-parameters's invocation-context field
                pub linked_context: Option<u64>,
                pub attributes: _rt::Vec<Attribute>,
                pub inherited: bool,
            }
            impl ::core::fmt::Debug for LocalSpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LocalSpanData")
                        .field("span-id", &self.span_id)
                        .field("start", &self.start)
                        .field("parent", &self.parent)
                        .field("linked-context", &self.linked_context)
                        .field("attributes", &self.attributes)
                        .field("inherited", &self.inherited)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExternalSpanData {
                pub span_id: SpanId,
            }
            impl ::core::fmt::Debug for ExternalSpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExternalSpanData")
                        .field("span-id", &self.span_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum SpanData {
                LocalSpan(LocalSpanData),
                ExternalSpan(ExternalSpanData),
            }
            impl ::core::fmt::Debug for SpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SpanData::LocalSpan(e) => {
                            f.debug_tuple("SpanData::LocalSpan").field(e).finish()
                        }
                        SpanData::ExternalSpan(e) => {
                            f.debug_tuple("SpanData::ExternalSpan").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: _rt::Vec<WitValue>,
                pub idempotency_key: _rt::String,
                pub trace_id: TraceId,
                pub trace_states: _rt::Vec<_rt::String>,
                /// The first one is the invocation context stack associated with the exported function invocation,
                /// and further stacks can be added that are referenced by the `linked-context` field of `local-span-data`
                pub invocation_context: _rt::Vec<_rt::Vec<SpanData>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("idempotency-key", &self.idempotency_key)
                        .field("trace-id", &self.trace_id)
                        .field("trace-states", &self.trace_states)
                        .field("invocation-context", &self.invocation_context)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionCompletedParameters {
                pub timestamp: Datetime,
                pub response: Option<WitValue>,
                pub consumed_fuel: i64,
            }
            impl ::core::fmt::Debug for ExportedFunctionCompletedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionCompletedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("response", &self.response)
                        .field("consumed-fuel", &self.consumed_fuel)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ErrorParameters {
                pub timestamp: Datetime,
                pub error: _rt::String,
            }
            impl ::core::fmt::Debug for ErrorParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ErrorParameters")
                        .field("timestamp", &self.timestamp)
                        .field("error", &self.error)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct JumpParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for JumpParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JumpParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangeRetryPolicyParameters {
                pub timestamp: Datetime,
                pub retry_policy: RetryPolicy,
            }
            impl ::core::fmt::Debug for ChangeRetryPolicyParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChangeRetryPolicyParameters")
                        .field("timestamp", &self.timestamp)
                        .field("retry-policy", &self.retry_policy)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndAtomicRegionParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndAtomicRegionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndAtomicRegionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndRemoteWriteParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndRemoteWriteParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndRemoteWriteParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvocationParameters {
                pub idempotency_key: _rt::String,
                pub function_name: _rt::String,
                pub input: Option<_rt::Vec<WitValue>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvocationParameters")
                        .field("idempotency-key", &self.idempotency_key)
                        .field("function-name", &self.function_name)
                        .field("input", &self.input)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum AgentInvocation {
                ExportedFunction(ExportedFunctionInvocationParameters),
                ManualUpdate(ComponentVersion),
            }
            impl ::core::fmt::Debug for AgentInvocation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentInvocation::ExportedFunction(e) => {
                            f.debug_tuple("AgentInvocation::ExportedFunction")
                                .field(e)
                                .finish()
                        }
                        AgentInvocation::ManualUpdate(e) => {
                            f.debug_tuple("AgentInvocation::ManualUpdate")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingAgentInvocationParameters {
                pub timestamp: Datetime,
                pub invocation: AgentInvocation,
            }
            impl ::core::fmt::Debug for PendingAgentInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingAgentInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("invocation", &self.invocation)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum UpdateDescription {
                /// Automatic update by replaying the oplog on the new version
                AutoUpdate,
                /// Custom update by loading a given snapshot on the new version
                SnapshotBased(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for UpdateDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateDescription::AutoUpdate => {
                            f.debug_tuple("UpdateDescription::AutoUpdate").finish()
                        }
                        UpdateDescription::SnapshotBased(e) => {
                            f.debug_tuple("UpdateDescription::SnapshotBased")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub update_description: UpdateDescription,
            }
            impl ::core::fmt::Debug for PendingUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("update-description", &self.update_description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SuccessfulUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub new_component_size: u64,
                pub new_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for SuccessfulUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SuccessfulUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("new-component-size", &self.new_component_size)
                        .field("new-active-plugins", &self.new_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FailedUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub details: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for FailedUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FailedUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("details", &self.details)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct GrowMemoryParameters {
                pub timestamp: Datetime,
                pub delta: u64,
            }
            impl ::core::fmt::Debug for GrowMemoryParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GrowMemoryParameters")
                        .field("timestamp", &self.timestamp)
                        .field("delta", &self.delta)
                        .finish()
                }
            }
            pub type AgentResourceId = u64;
            #[derive(Clone)]
            pub struct CreateResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: AgentResourceId,
                pub name: _rt::String,
                pub owner: _rt::String,
            }
            impl ::core::fmt::Debug for CreateResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DropResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: AgentResourceId,
                pub name: _rt::String,
                pub owner: _rt::String,
            }
            impl ::core::fmt::Debug for DropResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DropResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum LogLevel {
                Stdout,
                Stderr,
                Trace,
                Debug,
                Info,
                Warn,
                Error,
                Critical,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Stdout => f.debug_tuple("LogLevel::Stdout").finish(),
                        LogLevel::Stderr => f.debug_tuple("LogLevel::Stderr").finish(),
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => {
                            f.debug_tuple("LogLevel::Critical").finish()
                        }
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Stdout,
                        1 => LogLevel::Stderr,
                        2 => LogLevel::Trace,
                        3 => LogLevel::Debug,
                        4 => LogLevel::Info,
                        5 => LogLevel::Warn,
                        6 => LogLevel::Error,
                        7 => LogLevel::Critical,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct LogParameters {
                pub timestamp: Datetime,
                pub level: LogLevel,
                pub context: _rt::String,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for LogParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LogParameters")
                        .field("timestamp", &self.timestamp)
                        .field("level", &self.level)
                        .field("context", &self.context)
                        .field("message", &self.message)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ActivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for ActivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ActivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DeactivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for DeactivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DeactivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RevertParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for RevertParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RevertParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CancelInvocationParameters {
                pub timestamp: Datetime,
                pub idempotency_key: _rt::String,
            }
            impl ::core::fmt::Debug for CancelInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CancelInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("idempotency-key", &self.idempotency_key)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct StartSpanParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
                pub parent: Option<SpanId>,
                pub linked_context: Option<SpanId>,
                pub attributes: _rt::Vec<Attribute>,
            }
            impl ::core::fmt::Debug for StartSpanParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("StartSpanParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .field("parent", &self.parent)
                        .field("linked-context", &self.linked_context)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FinishSpanParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
            }
            impl ::core::fmt::Debug for FinishSpanParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FinishSpanParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SetSpanAttributeParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
                pub key: _rt::String,
                pub value: AttributeValue,
            }
            impl ::core::fmt::Debug for SetSpanAttributeParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SetSpanAttributeParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangePersistenceLevelParameters {
                pub timestamp: Datetime,
                pub persistence_level: PersistenceLevel,
            }
            impl ::core::fmt::Debug for ChangePersistenceLevelParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChangePersistenceLevelParameters")
                        .field("timestamp", &self.timestamp)
                        .field("persistence-level", &self.persistence_level)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BeginRemoteTransactionParameters {
                pub timestamp: Datetime,
                pub transaction_id: _rt::String,
            }
            impl ::core::fmt::Debug for BeginRemoteTransactionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BeginRemoteTransactionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("transaction-id", &self.transaction_id)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RemoteTransactionParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for RemoteTransactionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RemoteTransactionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum OplogEntry {
                /// The initial agent oplog entry
                Create(CreateParameters),
                /// The agent invoked a host function
                ImportedFunctionInvoked(ImportedFunctionInvokedParameters),
                /// The agent has been invoked
                ExportedFunctionInvoked(ExportedFunctionInvokedParameters),
                /// The agent has completed an invocation
                ExportedFunctionCompleted(ExportedFunctionCompletedParameters),
                /// Agent suspended
                Suspend(Datetime),
                /// Agent failed
                Error(ErrorParameters),
                /// Marker entry added when get-oplog-index is called from the agent, to make the jumping behavior
                /// more predictable.
                NoOp(Datetime),
                /// The agent needs to recover up to the given target oplog index and continue running from
                /// the source oplog index from there
                /// `jump` is an oplog region representing that from the end of that region we want to go back to the start and
                /// ignore all recorded operations in between.
                Jump(JumpParameters),
                /// Indicates that the agent has been interrupted at this point.
                /// Only used to recompute the agent's (cached) status, has no effect on execution.
                Interrupted(Datetime),
                /// Indicates that the agent has been exited using WASI's exit function.
                Exited(Datetime),
                /// Overrides the agent's retry policy
                ChangeRetryPolicy(ChangeRetryPolicyParameters),
                /// Begins an atomic region. All oplog entries after `BeginAtomicRegion` are to be ignored during
                /// recovery except if there is a corresponding `EndAtomicRegion` entry.
                BeginAtomicRegion(Datetime),
                /// Ends an atomic region. All oplog entries between the corresponding `BeginAtomicRegion` and this
                /// entry are to be considered during recovery, and the begin/end markers can be removed during oplog
                /// compaction.
                EndAtomicRegion(EndAtomicRegionParameters),
                /// Begins a remote write operation. Only used when idempotence mode is off. In this case each
                /// remote write must be surrounded by a `BeginRemoteWrite` and `EndRemoteWrite` log pair and
                /// unfinished remote writes cannot be recovered.
                BeginRemoteWrite(Datetime),
                /// Marks the end of a remote write operation. Only used when idempotence mode is off.
                EndRemoteWrite(EndRemoteWriteParameters),
                /// An invocation request arrived while the agent was busy
                PendingAgentInvocation(PendingAgentInvocationParameters),
                /// An update request arrived and will be applied as soon the agent restarts
                PendingUpdate(PendingUpdateParameters),
                /// An update was successfully applied
                SuccessfulUpdate(SuccessfulUpdateParameters),
                /// An update failed to be applied
                FailedUpdate(FailedUpdateParameters),
                /// Increased total linear memory size
                GrowMemory(GrowMemoryParameters),
                /// Created a resource instance
                CreateResource(CreateResourceParameters),
                /// Dropped a resource instance
                DropResource(DropResourceParameters),
                /// The agent emitted a log message
                Log(LogParameters),
                /// The agent's has been restarted, forgetting all its history
                Restart(Datetime),
                /// Activates a plugin
                ActivatePlugin(ActivatePluginParameters),
                /// Deactivates a plugin
                DeactivatePlugin(DeactivatePluginParameters),
                /// Revert an agent to a previous state
                Revert(RevertParameters),
                /// Cancel a pending invocation
                CancelInvocation(CancelInvocationParameters),
                /// Start a new span in the invocation context
                StartSpan(StartSpanParameters),
                /// Finish an open span in the invocation context
                FinishSpan(FinishSpanParameters),
                /// Set an attribute on an open span in the invocation context
                SetSpanAttribute(SetSpanAttributeParameters),
                /// Change the current persistence level
                ChangePersistenceLevel(ChangePersistenceLevelParameters),
                /// Begins a transaction operation
                BeginRemoteTransaction(BeginRemoteTransactionParameters),
                /// Pre-Commit of the transaction, indicating that the transaction will be committed
                PreCommitRemoteTransaction(RemoteTransactionParameters),
                /// Pre-Rollback of the transaction, indicating that the transaction will be rolled back
                PreRollbackRemoteTransaction(RemoteTransactionParameters),
                /// Committed transaction operation, indicating that the transaction was committed
                CommittedRemoteTransaction(RemoteTransactionParameters),
                /// Rolled back transaction operation, indicating that the transaction was rolled back
                RolledBackRemoteTransaction(RemoteTransactionParameters),
            }
            impl ::core::fmt::Debug for OplogEntry {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        OplogEntry::Create(e) => {
                            f.debug_tuple("OplogEntry::Create").field(e).finish()
                        }
                        OplogEntry::ImportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ImportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionCompleted(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionCompleted")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Suspend(e) => {
                            f.debug_tuple("OplogEntry::Suspend").field(e).finish()
                        }
                        OplogEntry::Error(e) => {
                            f.debug_tuple("OplogEntry::Error").field(e).finish()
                        }
                        OplogEntry::NoOp(e) => {
                            f.debug_tuple("OplogEntry::NoOp").field(e).finish()
                        }
                        OplogEntry::Jump(e) => {
                            f.debug_tuple("OplogEntry::Jump").field(e).finish()
                        }
                        OplogEntry::Interrupted(e) => {
                            f.debug_tuple("OplogEntry::Interrupted").field(e).finish()
                        }
                        OplogEntry::Exited(e) => {
                            f.debug_tuple("OplogEntry::Exited").field(e).finish()
                        }
                        OplogEntry::ChangeRetryPolicy(e) => {
                            f.debug_tuple("OplogEntry::ChangeRetryPolicy")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::BeginAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::EndAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::BeginRemoteWrite")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::EndRemoteWrite").field(e).finish()
                        }
                        OplogEntry::PendingAgentInvocation(e) => {
                            f.debug_tuple("OplogEntry::PendingAgentInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PendingUpdate(e) => {
                            f.debug_tuple("OplogEntry::PendingUpdate").field(e).finish()
                        }
                        OplogEntry::SuccessfulUpdate(e) => {
                            f.debug_tuple("OplogEntry::SuccessfulUpdate")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::FailedUpdate(e) => {
                            f.debug_tuple("OplogEntry::FailedUpdate").field(e).finish()
                        }
                        OplogEntry::GrowMemory(e) => {
                            f.debug_tuple("OplogEntry::GrowMemory").field(e).finish()
                        }
                        OplogEntry::CreateResource(e) => {
                            f.debug_tuple("OplogEntry::CreateResource").field(e).finish()
                        }
                        OplogEntry::DropResource(e) => {
                            f.debug_tuple("OplogEntry::DropResource").field(e).finish()
                        }
                        OplogEntry::Log(e) => {
                            f.debug_tuple("OplogEntry::Log").field(e).finish()
                        }
                        OplogEntry::Restart(e) => {
                            f.debug_tuple("OplogEntry::Restart").field(e).finish()
                        }
                        OplogEntry::ActivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::ActivatePlugin").field(e).finish()
                        }
                        OplogEntry::DeactivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::DeactivatePlugin")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Revert(e) => {
                            f.debug_tuple("OplogEntry::Revert").field(e).finish()
                        }
                        OplogEntry::CancelInvocation(e) => {
                            f.debug_tuple("OplogEntry::CancelInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::StartSpan(e) => {
                            f.debug_tuple("OplogEntry::StartSpan").field(e).finish()
                        }
                        OplogEntry::FinishSpan(e) => {
                            f.debug_tuple("OplogEntry::FinishSpan").field(e).finish()
                        }
                        OplogEntry::SetSpanAttribute(e) => {
                            f.debug_tuple("OplogEntry::SetSpanAttribute")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ChangePersistenceLevel(e) => {
                            f.debug_tuple("OplogEntry::ChangePersistenceLevel")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::BeginRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PreCommitRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::PreCommitRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PreRollbackRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::PreRollbackRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::CommittedRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::CommittedRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::RolledBackRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::RolledBackRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetOplog {
                handle: _rt::Resource<GetOplog>,
            }
            impl GetOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-oplog"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SearchOplog {
                handle: _rt::Resource<SearchOplog>,
            }
            impl SearchOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SearchOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]search-oplog"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(agent_id: &AgentId, start: OplogIndex) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::AgentId {
                            component_id: component_id0,
                            agent_id: agent_id0,
                        } = agent_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = agent_id0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-oplog"]
                            fn wit_import4(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                                _rt::as_i64(start),
                            )
                        };
                        unsafe { GetOplog::from_handle(ret as u32) }
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<OplogEntry>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-oplog.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result595 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base594 = l3;
                                    let len594 = l4;
                                    let mut result594 = _rt::Vec::with_capacity(len594);
                                    for i in 0..len594 {
                                        let base = base594
                                            .add(i * (120 + 10 * ::core::mem::size_of::<*const u8>()));
                                        let e594 = {
                                            let l5 = i32::from(*base.add(0).cast::<u8>());
                                            let v593 = match l5 {
                                                0 => {
                                                    let e593 = {
                                                        let l6 = *base.add(8).cast::<i64>();
                                                        let l7 = *base.add(16).cast::<i32>();
                                                        let l8 = *base.add(24).cast::<i64>();
                                                        let l9 = *base.add(32).cast::<i64>();
                                                        let l10 = *base.add(40).cast::<*mut u8>();
                                                        let l11 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len12 = l11;
                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                            l10.cast(),
                                                            len12,
                                                            len12,
                                                        );
                                                        let l13 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l14 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l15 = *base
                                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base19 = l14;
                                                        let len19 = l15;
                                                        let mut result19 = _rt::Vec::with_capacity(len19);
                                                        for i in 0..len19 {
                                                            let base = base19
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e19 = {
                                                                let l16 = *base.add(0).cast::<*mut u8>();
                                                                let l17 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len18 = l17;
                                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                                    l16.cast(),
                                                                    len18,
                                                                    len18,
                                                                );
                                                                _rt::string_lift(bytes18)
                                                            };
                                                            result19.push(e19);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base19,
                                                            len19 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l20 = *base
                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l21 = *base
                                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base28 = l20;
                                                        let len28 = l21;
                                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e28 = {
                                                                let l22 = *base.add(0).cast::<*mut u8>();
                                                                let l23 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len24 = l23;
                                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                                    l22.cast(),
                                                                    len24,
                                                                    len24,
                                                                );
                                                                let l25 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l26 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len27 = l26;
                                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                                    l25.cast(),
                                                                    len27,
                                                                    len27,
                                                                );
                                                                (_rt::string_lift(bytes24), _rt::string_lift(bytes27))
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base28,
                                                            len28 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l29 = *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l30 = *base
                                                            .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l31 = *base
                                                            .add(64 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l32 = *base
                                                            .add(72 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l33 = i32::from(
                                                            *base
                                                                .add(80 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l39 = *base
                                                            .add(104 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l40 = *base
                                                            .add(112 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l41 = *base
                                                            .add(120 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l42 = *base
                                                            .add(120 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base58 = l41;
                                                        let len58 = l42;
                                                        let mut result58 = _rt::Vec::with_capacity(len58);
                                                        for i in 0..len58 {
                                                            let base = base58
                                                                .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                            let e58 = {
                                                                let l43 = *base.add(0).cast::<*mut u8>();
                                                                let l44 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len45 = l44;
                                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                                    l43.cast(),
                                                                    len45,
                                                                    len45,
                                                                );
                                                                let l46 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l47 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                );
                                                                let l49 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base57 = l49;
                                                                let len57 = l50;
                                                                let mut result57 = _rt::Vec::with_capacity(len57);
                                                                for i in 0..len57 {
                                                                    let base = base57
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e57 = {
                                                                        let l51 = *base.add(0).cast::<*mut u8>();
                                                                        let l52 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len53 = l52;
                                                                        let bytes53 = _rt::Vec::from_raw_parts(
                                                                            l51.cast(),
                                                                            len53,
                                                                            len53,
                                                                        );
                                                                        let l54 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l55 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len56 = l55;
                                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                                            l54.cast(),
                                                                            len56,
                                                                            len56,
                                                                        );
                                                                        (_rt::string_lift(bytes53), _rt::string_lift(bytes56))
                                                                    };
                                                                    result57.push(e57);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base57,
                                                                    len57 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    name: _rt::string_lift(bytes45),
                                                                    version: _rt::string_lift(bytes48),
                                                                    parameters: result57,
                                                                }
                                                            };
                                                            result58.push(e58);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base58,
                                                            len58 * (6 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l6 as u64,
                                                                nanoseconds: l7 as u32,
                                                            },
                                                            agent_id: super::super::super::golem::rpc::types::AgentId {
                                                                component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l8 as u64,
                                                                        low_bits: l9 as u64,
                                                                    },
                                                                },
                                                                agent_id: _rt::string_lift(bytes12),
                                                            },
                                                            component_version: l13 as u64,
                                                            args: result19,
                                                            env: result28,
                                                            created_by: super::super::super::golem::api::host::AccountId {
                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l29 as u64,
                                                                    low_bits: l30 as u64,
                                                                },
                                                            },
                                                            environment_id: super::super::super::golem::api::host::EnvironmentId {
                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l31 as u64,
                                                                    low_bits: l32 as u64,
                                                                },
                                                            },
                                                            parent: match l33 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l34 = *base
                                                                            .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l35 = *base
                                                                            .add(96 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l36 = *base
                                                                            .add(104 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l37 = *base
                                                                            .add(104 + 7 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len38 = l37;
                                                                        let bytes38 = _rt::Vec::from_raw_parts(
                                                                            l36.cast(),
                                                                            len38,
                                                                            len38,
                                                                        );
                                                                        super::super::super::golem::rpc::types::AgentId {
                                                                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                                    high_bits: l34 as u64,
                                                                                    low_bits: l35 as u64,
                                                                                },
                                                                            },
                                                                            agent_id: _rt::string_lift(bytes38),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l39 as u64,
                                                            initial_total_linear_memory_size: l40 as u64,
                                                            initial_active_plugins: result58,
                                                        }
                                                    };
                                                    OplogEntry::Create(e593)
                                                }
                                                1 => {
                                                    let e593 = {
                                                        let l59 = *base.add(8).cast::<i64>();
                                                        let l60 = *base.add(16).cast::<i32>();
                                                        let l61 = *base.add(24).cast::<*mut u8>();
                                                        let l62 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );
                                                        let l64 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base111 = l64;
                                                        let len111 = l65;
                                                        let mut result111 = _rt::Vec::with_capacity(len111);
                                                        for i in 0..len111 {
                                                            let base = base111
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e111 = {
                                                                let l66 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V110;
                                                                let v110 = match l66 {
                                                                    0 => {
                                                                        let e110 = {
                                                                            let l67 = *base.add(8).cast::<*mut u8>();
                                                                            let l68 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len69 = l68;
                                                                            _rt::Vec::from_raw_parts(l67.cast(), len69, len69)
                                                                        };
                                                                        V110::RecordValue(e110)
                                                                    }
                                                                    1 => {
                                                                        let e110 = {
                                                                            let l70 = *base.add(8).cast::<i32>();
                                                                            let l71 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l70 as u32,
                                                                                match l71 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l72 = *base.add(16).cast::<i32>();
                                                                                            l72
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V110::VariantValue(e110)
                                                                    }
                                                                    2 => {
                                                                        let e110 = {
                                                                            let l73 = *base.add(8).cast::<i32>();
                                                                            l73 as u32
                                                                        };
                                                                        V110::EnumValue(e110)
                                                                    }
                                                                    3 => {
                                                                        let e110 = {
                                                                            let l74 = *base.add(8).cast::<*mut u8>();
                                                                            let l75 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base77 = l74;
                                                                            let len77 = l75;
                                                                            let mut result77 = _rt::Vec::with_capacity(len77);
                                                                            for i in 0..len77 {
                                                                                let base = base77.add(i * 1);
                                                                                let e77 = {
                                                                                    let l76 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l76 as u8)
                                                                                };
                                                                                result77.push(e77);
                                                                            }
                                                                            _rt::cabi_dealloc(base77, len77 * 1, 1);
                                                                            result77
                                                                        };
                                                                        V110::FlagsValue(e110)
                                                                    }
                                                                    4 => {
                                                                        let e110 = {
                                                                            let l78 = *base.add(8).cast::<*mut u8>();
                                                                            let l79 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len80 = l79;
                                                                            _rt::Vec::from_raw_parts(l78.cast(), len80, len80)
                                                                        };
                                                                        V110::TupleValue(e110)
                                                                    }
                                                                    5 => {
                                                                        let e110 = {
                                                                            let l81 = *base.add(8).cast::<*mut u8>();
                                                                            let l82 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len83 = l82;
                                                                            _rt::Vec::from_raw_parts(l81.cast(), len83, len83)
                                                                        };
                                                                        V110::ListValue(e110)
                                                                    }
                                                                    6 => {
                                                                        let e110 = {
                                                                            let l84 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l84 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l85 = *base.add(12).cast::<i32>();
                                                                                        l85
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V110::OptionValue(e110)
                                                                    }
                                                                    7 => {
                                                                        let e110 = {
                                                                            let l86 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l86 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l87 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l87 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l88 = *base.add(16).cast::<i32>();
                                                                                                    l88
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l89 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l89 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l90 = *base.add(16).cast::<i32>();
                                                                                                    l90
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V110::ResultValue(e110)
                                                                    }
                                                                    8 => {
                                                                        let e110 = {
                                                                            let l91 = i32::from(*base.add(8).cast::<u8>());
                                                                            l91 as u8
                                                                        };
                                                                        V110::PrimU8(e110)
                                                                    }
                                                                    9 => {
                                                                        let e110 = {
                                                                            let l92 = i32::from(*base.add(8).cast::<u16>());
                                                                            l92 as u16
                                                                        };
                                                                        V110::PrimU16(e110)
                                                                    }
                                                                    10 => {
                                                                        let e110 = {
                                                                            let l93 = *base.add(8).cast::<i32>();
                                                                            l93 as u32
                                                                        };
                                                                        V110::PrimU32(e110)
                                                                    }
                                                                    11 => {
                                                                        let e110 = {
                                                                            let l94 = *base.add(8).cast::<i64>();
                                                                            l94 as u64
                                                                        };
                                                                        V110::PrimU64(e110)
                                                                    }
                                                                    12 => {
                                                                        let e110 = {
                                                                            let l95 = i32::from(*base.add(8).cast::<i8>());
                                                                            l95 as i8
                                                                        };
                                                                        V110::PrimS8(e110)
                                                                    }
                                                                    13 => {
                                                                        let e110 = {
                                                                            let l96 = i32::from(*base.add(8).cast::<i16>());
                                                                            l96 as i16
                                                                        };
                                                                        V110::PrimS16(e110)
                                                                    }
                                                                    14 => {
                                                                        let e110 = {
                                                                            let l97 = *base.add(8).cast::<i32>();
                                                                            l97
                                                                        };
                                                                        V110::PrimS32(e110)
                                                                    }
                                                                    15 => {
                                                                        let e110 = {
                                                                            let l98 = *base.add(8).cast::<i64>();
                                                                            l98
                                                                        };
                                                                        V110::PrimS64(e110)
                                                                    }
                                                                    16 => {
                                                                        let e110 = {
                                                                            let l99 = *base.add(8).cast::<f32>();
                                                                            l99
                                                                        };
                                                                        V110::PrimFloat32(e110)
                                                                    }
                                                                    17 => {
                                                                        let e110 = {
                                                                            let l100 = *base.add(8).cast::<f64>();
                                                                            l100
                                                                        };
                                                                        V110::PrimFloat64(e110)
                                                                    }
                                                                    18 => {
                                                                        let e110 = {
                                                                            let l101 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l101 as u32)
                                                                        };
                                                                        V110::PrimChar(e110)
                                                                    }
                                                                    19 => {
                                                                        let e110 = {
                                                                            let l102 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l102 as u8)
                                                                        };
                                                                        V110::PrimBool(e110)
                                                                    }
                                                                    20 => {
                                                                        let e110 = {
                                                                            let l103 = *base.add(8).cast::<*mut u8>();
                                                                            let l104 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len105 = l104;
                                                                            let bytes105 = _rt::Vec::from_raw_parts(
                                                                                l103.cast(),
                                                                                len105,
                                                                                len105,
                                                                            );
                                                                            _rt::string_lift(bytes105)
                                                                        };
                                                                        V110::PrimString(e110)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e110 = {
                                                                            let l106 = *base.add(8).cast::<*mut u8>();
                                                                            let l107 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len108 = l107;
                                                                            let bytes108 = _rt::Vec::from_raw_parts(
                                                                                l106.cast(),
                                                                                len108,
                                                                                len108,
                                                                            );
                                                                            let l109 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes108),
                                                                                },
                                                                                l109 as u64,
                                                                            )
                                                                        };
                                                                        V110::Handle(e110)
                                                                    }
                                                                };
                                                                v110
                                                            };
                                                            result111.push(e111);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base111,
                                                            len111 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l112 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l113 = *base
                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base159 = l112;
                                                        let len159 = l113;
                                                        let mut result159 = _rt::Vec::with_capacity(len159);
                                                        for i in 0..len159 {
                                                            let base = base159
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e159 = {
                                                                let l114 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V158;
                                                                let v158 = match l114 {
                                                                    0 => {
                                                                        let e158 = {
                                                                            let l115 = *base.add(8).cast::<*mut u8>();
                                                                            let l116 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len117 = l116;
                                                                            _rt::Vec::from_raw_parts(l115.cast(), len117, len117)
                                                                        };
                                                                        V158::RecordValue(e158)
                                                                    }
                                                                    1 => {
                                                                        let e158 = {
                                                                            let l118 = *base.add(8).cast::<i32>();
                                                                            let l119 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l118 as u32,
                                                                                match l119 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l120 = *base.add(16).cast::<i32>();
                                                                                            l120
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V158::VariantValue(e158)
                                                                    }
                                                                    2 => {
                                                                        let e158 = {
                                                                            let l121 = *base.add(8).cast::<i32>();
                                                                            l121 as u32
                                                                        };
                                                                        V158::EnumValue(e158)
                                                                    }
                                                                    3 => {
                                                                        let e158 = {
                                                                            let l122 = *base.add(8).cast::<*mut u8>();
                                                                            let l123 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base125 = l122;
                                                                            let len125 = l123;
                                                                            let mut result125 = _rt::Vec::with_capacity(len125);
                                                                            for i in 0..len125 {
                                                                                let base = base125.add(i * 1);
                                                                                let e125 = {
                                                                                    let l124 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l124 as u8)
                                                                                };
                                                                                result125.push(e125);
                                                                            }
                                                                            _rt::cabi_dealloc(base125, len125 * 1, 1);
                                                                            result125
                                                                        };
                                                                        V158::FlagsValue(e158)
                                                                    }
                                                                    4 => {
                                                                        let e158 = {
                                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                                            let l127 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len128 = l127;
                                                                            _rt::Vec::from_raw_parts(l126.cast(), len128, len128)
                                                                        };
                                                                        V158::TupleValue(e158)
                                                                    }
                                                                    5 => {
                                                                        let e158 = {
                                                                            let l129 = *base.add(8).cast::<*mut u8>();
                                                                            let l130 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len131 = l130;
                                                                            _rt::Vec::from_raw_parts(l129.cast(), len131, len131)
                                                                        };
                                                                        V158::ListValue(e158)
                                                                    }
                                                                    6 => {
                                                                        let e158 = {
                                                                            let l132 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l132 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l133 = *base.add(12).cast::<i32>();
                                                                                        l133
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V158::OptionValue(e158)
                                                                    }
                                                                    7 => {
                                                                        let e158 = {
                                                                            let l134 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l134 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l135 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l135 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l136 = *base.add(16).cast::<i32>();
                                                                                                    l136
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l137 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l137 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l138 = *base.add(16).cast::<i32>();
                                                                                                    l138
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V158::ResultValue(e158)
                                                                    }
                                                                    8 => {
                                                                        let e158 = {
                                                                            let l139 = i32::from(*base.add(8).cast::<u8>());
                                                                            l139 as u8
                                                                        };
                                                                        V158::PrimU8(e158)
                                                                    }
                                                                    9 => {
                                                                        let e158 = {
                                                                            let l140 = i32::from(*base.add(8).cast::<u16>());
                                                                            l140 as u16
                                                                        };
                                                                        V158::PrimU16(e158)
                                                                    }
                                                                    10 => {
                                                                        let e158 = {
                                                                            let l141 = *base.add(8).cast::<i32>();
                                                                            l141 as u32
                                                                        };
                                                                        V158::PrimU32(e158)
                                                                    }
                                                                    11 => {
                                                                        let e158 = {
                                                                            let l142 = *base.add(8).cast::<i64>();
                                                                            l142 as u64
                                                                        };
                                                                        V158::PrimU64(e158)
                                                                    }
                                                                    12 => {
                                                                        let e158 = {
                                                                            let l143 = i32::from(*base.add(8).cast::<i8>());
                                                                            l143 as i8
                                                                        };
                                                                        V158::PrimS8(e158)
                                                                    }
                                                                    13 => {
                                                                        let e158 = {
                                                                            let l144 = i32::from(*base.add(8).cast::<i16>());
                                                                            l144 as i16
                                                                        };
                                                                        V158::PrimS16(e158)
                                                                    }
                                                                    14 => {
                                                                        let e158 = {
                                                                            let l145 = *base.add(8).cast::<i32>();
                                                                            l145
                                                                        };
                                                                        V158::PrimS32(e158)
                                                                    }
                                                                    15 => {
                                                                        let e158 = {
                                                                            let l146 = *base.add(8).cast::<i64>();
                                                                            l146
                                                                        };
                                                                        V158::PrimS64(e158)
                                                                    }
                                                                    16 => {
                                                                        let e158 = {
                                                                            let l147 = *base.add(8).cast::<f32>();
                                                                            l147
                                                                        };
                                                                        V158::PrimFloat32(e158)
                                                                    }
                                                                    17 => {
                                                                        let e158 = {
                                                                            let l148 = *base.add(8).cast::<f64>();
                                                                            l148
                                                                        };
                                                                        V158::PrimFloat64(e158)
                                                                    }
                                                                    18 => {
                                                                        let e158 = {
                                                                            let l149 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l149 as u32)
                                                                        };
                                                                        V158::PrimChar(e158)
                                                                    }
                                                                    19 => {
                                                                        let e158 = {
                                                                            let l150 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l150 as u8)
                                                                        };
                                                                        V158::PrimBool(e158)
                                                                    }
                                                                    20 => {
                                                                        let e158 = {
                                                                            let l151 = *base.add(8).cast::<*mut u8>();
                                                                            let l152 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len153 = l152;
                                                                            let bytes153 = _rt::Vec::from_raw_parts(
                                                                                l151.cast(),
                                                                                len153,
                                                                                len153,
                                                                            );
                                                                            _rt::string_lift(bytes153)
                                                                        };
                                                                        V158::PrimString(e158)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e158 = {
                                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                                            let l155 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len156 = l155;
                                                                            let bytes156 = _rt::Vec::from_raw_parts(
                                                                                l154.cast(),
                                                                                len156,
                                                                                len156,
                                                                            );
                                                                            let l157 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes156),
                                                                                },
                                                                                l157 as u64,
                                                                            )
                                                                        };
                                                                        V158::Handle(e158)
                                                                    }
                                                                };
                                                                v158
                                                            };
                                                            result159.push(e159);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base159,
                                                            len159 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l160 = i32::from(
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let v165 = match l160 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            4 => {
                                                                let e165 = {
                                                                    let l161 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l161 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l162 = *base
                                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l162 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e165)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                                let e165 = {
                                                                    let l163 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l163 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l164 = *base
                                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l164 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteTransaction(e165)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l59 as u64,
                                                                nanoseconds: l60 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes63),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result111,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result159,
                                                            },
                                                            wrapped_function_type: v165,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e593)
                                                }
                                                2 => {
                                                    let e593 = {
                                                        let l166 = *base.add(8).cast::<i64>();
                                                        let l167 = *base.add(16).cast::<i32>();
                                                        let l168 = *base.add(24).cast::<*mut u8>();
                                                        let l169 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len170 = l169;
                                                        let bytes170 = _rt::Vec::from_raw_parts(
                                                            l168.cast(),
                                                            len170,
                                                            len170,
                                                        );
                                                        let l171 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l172 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base221 = l171;
                                                        let len221 = l172;
                                                        let mut result221 = _rt::Vec::with_capacity(len221);
                                                        for i in 0..len221 {
                                                            let base = base221
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e221 = {
                                                                let l173 = *base.add(0).cast::<*mut u8>();
                                                                let l174 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base220 = l173;
                                                                let len220 = l174;
                                                                let mut result220 = _rt::Vec::with_capacity(len220);
                                                                for i in 0..len220 {
                                                                    let base = base220
                                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                    let e220 = {
                                                                        let l175 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V219;
                                                                        let v219 = match l175 {
                                                                            0 => {
                                                                                let e219 = {
                                                                                    let l176 = *base.add(8).cast::<*mut u8>();
                                                                                    let l177 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len178 = l177;
                                                                                    _rt::Vec::from_raw_parts(l176.cast(), len178, len178)
                                                                                };
                                                                                V219::RecordValue(e219)
                                                                            }
                                                                            1 => {
                                                                                let e219 = {
                                                                                    let l179 = *base.add(8).cast::<i32>();
                                                                                    let l180 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l179 as u32,
                                                                                        match l180 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l181 = *base.add(16).cast::<i32>();
                                                                                                    l181
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V219::VariantValue(e219)
                                                                            }
                                                                            2 => {
                                                                                let e219 = {
                                                                                    let l182 = *base.add(8).cast::<i32>();
                                                                                    l182 as u32
                                                                                };
                                                                                V219::EnumValue(e219)
                                                                            }
                                                                            3 => {
                                                                                let e219 = {
                                                                                    let l183 = *base.add(8).cast::<*mut u8>();
                                                                                    let l184 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base186 = l183;
                                                                                    let len186 = l184;
                                                                                    let mut result186 = _rt::Vec::with_capacity(len186);
                                                                                    for i in 0..len186 {
                                                                                        let base = base186.add(i * 1);
                                                                                        let e186 = {
                                                                                            let l185 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l185 as u8)
                                                                                        };
                                                                                        result186.push(e186);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base186, len186 * 1, 1);
                                                                                    result186
                                                                                };
                                                                                V219::FlagsValue(e219)
                                                                            }
                                                                            4 => {
                                                                                let e219 = {
                                                                                    let l187 = *base.add(8).cast::<*mut u8>();
                                                                                    let l188 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len189 = l188;
                                                                                    _rt::Vec::from_raw_parts(l187.cast(), len189, len189)
                                                                                };
                                                                                V219::TupleValue(e219)
                                                                            }
                                                                            5 => {
                                                                                let e219 = {
                                                                                    let l190 = *base.add(8).cast::<*mut u8>();
                                                                                    let l191 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len192 = l191;
                                                                                    _rt::Vec::from_raw_parts(l190.cast(), len192, len192)
                                                                                };
                                                                                V219::ListValue(e219)
                                                                            }
                                                                            6 => {
                                                                                let e219 = {
                                                                                    let l193 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l193 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l194 = *base.add(12).cast::<i32>();
                                                                                                l194
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V219::OptionValue(e219)
                                                                            }
                                                                            7 => {
                                                                                let e219 = {
                                                                                    let l195 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l195 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l196 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l196 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l197 = *base.add(16).cast::<i32>();
                                                                                                            l197
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l198 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l198 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l199 = *base.add(16).cast::<i32>();
                                                                                                            l199
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V219::ResultValue(e219)
                                                                            }
                                                                            8 => {
                                                                                let e219 = {
                                                                                    let l200 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l200 as u8
                                                                                };
                                                                                V219::PrimU8(e219)
                                                                            }
                                                                            9 => {
                                                                                let e219 = {
                                                                                    let l201 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l201 as u16
                                                                                };
                                                                                V219::PrimU16(e219)
                                                                            }
                                                                            10 => {
                                                                                let e219 = {
                                                                                    let l202 = *base.add(8).cast::<i32>();
                                                                                    l202 as u32
                                                                                };
                                                                                V219::PrimU32(e219)
                                                                            }
                                                                            11 => {
                                                                                let e219 = {
                                                                                    let l203 = *base.add(8).cast::<i64>();
                                                                                    l203 as u64
                                                                                };
                                                                                V219::PrimU64(e219)
                                                                            }
                                                                            12 => {
                                                                                let e219 = {
                                                                                    let l204 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l204 as i8
                                                                                };
                                                                                V219::PrimS8(e219)
                                                                            }
                                                                            13 => {
                                                                                let e219 = {
                                                                                    let l205 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l205 as i16
                                                                                };
                                                                                V219::PrimS16(e219)
                                                                            }
                                                                            14 => {
                                                                                let e219 = {
                                                                                    let l206 = *base.add(8).cast::<i32>();
                                                                                    l206
                                                                                };
                                                                                V219::PrimS32(e219)
                                                                            }
                                                                            15 => {
                                                                                let e219 = {
                                                                                    let l207 = *base.add(8).cast::<i64>();
                                                                                    l207
                                                                                };
                                                                                V219::PrimS64(e219)
                                                                            }
                                                                            16 => {
                                                                                let e219 = {
                                                                                    let l208 = *base.add(8).cast::<f32>();
                                                                                    l208
                                                                                };
                                                                                V219::PrimFloat32(e219)
                                                                            }
                                                                            17 => {
                                                                                let e219 = {
                                                                                    let l209 = *base.add(8).cast::<f64>();
                                                                                    l209
                                                                                };
                                                                                V219::PrimFloat64(e219)
                                                                            }
                                                                            18 => {
                                                                                let e219 = {
                                                                                    let l210 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l210 as u32)
                                                                                };
                                                                                V219::PrimChar(e219)
                                                                            }
                                                                            19 => {
                                                                                let e219 = {
                                                                                    let l211 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l211 as u8)
                                                                                };
                                                                                V219::PrimBool(e219)
                                                                            }
                                                                            20 => {
                                                                                let e219 = {
                                                                                    let l212 = *base.add(8).cast::<*mut u8>();
                                                                                    let l213 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len214 = l213;
                                                                                    let bytes214 = _rt::Vec::from_raw_parts(
                                                                                        l212.cast(),
                                                                                        len214,
                                                                                        len214,
                                                                                    );
                                                                                    _rt::string_lift(bytes214)
                                                                                };
                                                                                V219::PrimString(e219)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e219 = {
                                                                                    let l215 = *base.add(8).cast::<*mut u8>();
                                                                                    let l216 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len217 = l216;
                                                                                    let bytes217 = _rt::Vec::from_raw_parts(
                                                                                        l215.cast(),
                                                                                        len217,
                                                                                        len217,
                                                                                    );
                                                                                    let l218 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes217),
                                                                                        },
                                                                                        l218 as u64,
                                                                                    )
                                                                                };
                                                                                V219::Handle(e219)
                                                                            }
                                                                        };
                                                                        v219
                                                                    };
                                                                    result220.push(e220);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base220,
                                                                    len220 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result220,
                                                                }
                                                            };
                                                            result221.push(e221);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base221,
                                                            len221 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l222 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l223 = *base
                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len224 = l223;
                                                        let bytes224 = _rt::Vec::from_raw_parts(
                                                            l222.cast(),
                                                            len224,
                                                            len224,
                                                        );
                                                        let l225 = *base
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l226 = *base
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len227 = l226;
                                                        let bytes227 = _rt::Vec::from_raw_parts(
                                                            l225.cast(),
                                                            len227,
                                                            len227,
                                                        );
                                                        let l228 = *base
                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l229 = *base
                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base233 = l228;
                                                        let len233 = l229;
                                                        let mut result233 = _rt::Vec::with_capacity(len233);
                                                        for i in 0..len233 {
                                                            let base = base233
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e233 = {
                                                                let l230 = *base.add(0).cast::<*mut u8>();
                                                                let l231 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len232 = l231;
                                                                let bytes232 = _rt::Vec::from_raw_parts(
                                                                    l230.cast(),
                                                                    len232,
                                                                    len232,
                                                                );
                                                                _rt::string_lift(bytes232)
                                                            };
                                                            result233.push(e233);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base233,
                                                            len233 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l234 = *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l235 = *base
                                                            .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base267 = l234;
                                                        let len267 = l235;
                                                        let mut result267 = _rt::Vec::with_capacity(len267);
                                                        for i in 0..len267 {
                                                            let base = base267
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e267 = {
                                                                let l236 = *base.add(0).cast::<*mut u8>();
                                                                let l237 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base266 = l236;
                                                                let len266 = l237;
                                                                let mut result266 = _rt::Vec::with_capacity(len266);
                                                                for i in 0..len266 {
                                                                    let base = base266
                                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                    let e266 = {
                                                                        let l238 = i32::from(*base.add(0).cast::<u8>());
                                                                        let v265 = match l238 {
                                                                            0 => {
                                                                                let e265 = {
                                                                                    let l239 = *base.add(8).cast::<*mut u8>();
                                                                                    let l240 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len241 = l240;
                                                                                    let bytes241 = _rt::Vec::from_raw_parts(
                                                                                        l239.cast(),
                                                                                        len241,
                                                                                        len241,
                                                                                    );
                                                                                    let l242 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    let l243 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>();
                                                                                    let l244 = i32::from(
                                                                                        *base
                                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l248 = i32::from(
                                                                                        *base
                                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l250 = *base
                                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l251 = *base
                                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base260 = l250;
                                                                                    let len260 = l251;
                                                                                    let mut result260 = _rt::Vec::with_capacity(len260);
                                                                                    for i in 0..len260 {
                                                                                        let base = base260
                                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e260 = {
                                                                                            let l252 = *base.add(0).cast::<*mut u8>();
                                                                                            let l253 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len254 = l253;
                                                                                            let bytes254 = _rt::Vec::from_raw_parts(
                                                                                                l252.cast(),
                                                                                                len254,
                                                                                                len254,
                                                                                            );
                                                                                            let l255 = i32::from(
                                                                                                *base
                                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            use super::super::super::golem::api::context::AttributeValue as V259;
                                                                                            let v259 = match l255 {
                                                                                                n => {
                                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                                    let e259 = {
                                                                                                        let l256 = *base
                                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<*mut u8>();
                                                                                                        let l257 = *base
                                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<usize>();
                                                                                                        let len258 = l257;
                                                                                                        let bytes258 = _rt::Vec::from_raw_parts(
                                                                                                            l256.cast(),
                                                                                                            len258,
                                                                                                            len258,
                                                                                                        );
                                                                                                        _rt::string_lift(bytes258)
                                                                                                    };
                                                                                                    V259::String(e259)
                                                                                                }
                                                                                            };
                                                                                            super::super::super::golem::api::context::Attribute {
                                                                                                key: _rt::string_lift(bytes254),
                                                                                                value: v259,
                                                                                            }
                                                                                        };
                                                                                        result260.push(e260);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base260,
                                                                                        len260 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let l261 = i32::from(
                                                                                        *base
                                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    LocalSpanData {
                                                                                        span_id: _rt::string_lift(bytes241),
                                                                                        start: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                                            seconds: l242 as u64,
                                                                                            nanoseconds: l243 as u32,
                                                                                        },
                                                                                        parent: match l244 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l245 = *base
                                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<*mut u8>();
                                                                                                    let l246 = *base
                                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<usize>();
                                                                                                    let len247 = l246;
                                                                                                    let bytes247 = _rt::Vec::from_raw_parts(
                                                                                                        l245.cast(),
                                                                                                        len247,
                                                                                                        len247,
                                                                                                    );
                                                                                                    _rt::string_lift(bytes247)
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        linked_context: match l248 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l249 = *base
                                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i64>();
                                                                                                    l249 as u64
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        attributes: result260,
                                                                                        inherited: _rt::bool_lift(l261 as u8),
                                                                                    }
                                                                                };
                                                                                SpanData::LocalSpan(e265)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e265 = {
                                                                                    let l262 = *base.add(8).cast::<*mut u8>();
                                                                                    let l263 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len264 = l263;
                                                                                    let bytes264 = _rt::Vec::from_raw_parts(
                                                                                        l262.cast(),
                                                                                        len264,
                                                                                        len264,
                                                                                    );
                                                                                    ExternalSpanData {
                                                                                        span_id: _rt::string_lift(bytes264),
                                                                                    }
                                                                                };
                                                                                SpanData::ExternalSpan(e265)
                                                                            }
                                                                        };
                                                                        v265
                                                                    };
                                                                    result266.push(e266);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base266,
                                                                    len266 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                result266
                                                            };
                                                            result267.push(e267);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base267,
                                                            len267 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l166 as u64,
                                                                nanoseconds: l167 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes170),
                                                            request: result221,
                                                            idempotency_key: _rt::string_lift(bytes224),
                                                            trace_id: _rt::string_lift(bytes227),
                                                            trace_states: result233,
                                                            invocation_context: result267,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e593)
                                                }
                                                3 => {
                                                    let e593 = {
                                                        let l268 = *base.add(8).cast::<i64>();
                                                        let l269 = *base.add(16).cast::<i32>();
                                                        let l270 = i32::from(*base.add(24).cast::<u8>());
                                                        let l319 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l268 as u64,
                                                                nanoseconds: l269 as u32,
                                                            },
                                                            response: match l270 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l271 = *base
                                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l272 = *base
                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base318 = l271;
                                                                        let len318 = l272;
                                                                        let mut result318 = _rt::Vec::with_capacity(len318);
                                                                        for i in 0..len318 {
                                                                            let base = base318
                                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e318 = {
                                                                                let l273 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::golem::rpc::types::WitNode as V317;
                                                                                let v317 = match l273 {
                                                                                    0 => {
                                                                                        let e317 = {
                                                                                            let l274 = *base.add(8).cast::<*mut u8>();
                                                                                            let l275 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len276 = l275;
                                                                                            _rt::Vec::from_raw_parts(l274.cast(), len276, len276)
                                                                                        };
                                                                                        V317::RecordValue(e317)
                                                                                    }
                                                                                    1 => {
                                                                                        let e317 = {
                                                                                            let l277 = *base.add(8).cast::<i32>();
                                                                                            let l278 = i32::from(*base.add(12).cast::<u8>());
                                                                                            (
                                                                                                l277 as u32,
                                                                                                match l278 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l279 = *base.add(16).cast::<i32>();
                                                                                                            l279
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            )
                                                                                        };
                                                                                        V317::VariantValue(e317)
                                                                                    }
                                                                                    2 => {
                                                                                        let e317 = {
                                                                                            let l280 = *base.add(8).cast::<i32>();
                                                                                            l280 as u32
                                                                                        };
                                                                                        V317::EnumValue(e317)
                                                                                    }
                                                                                    3 => {
                                                                                        let e317 = {
                                                                                            let l281 = *base.add(8).cast::<*mut u8>();
                                                                                            let l282 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base284 = l281;
                                                                                            let len284 = l282;
                                                                                            let mut result284 = _rt::Vec::with_capacity(len284);
                                                                                            for i in 0..len284 {
                                                                                                let base = base284.add(i * 1);
                                                                                                let e284 = {
                                                                                                    let l283 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    _rt::bool_lift(l283 as u8)
                                                                                                };
                                                                                                result284.push(e284);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base284, len284 * 1, 1);
                                                                                            result284
                                                                                        };
                                                                                        V317::FlagsValue(e317)
                                                                                    }
                                                                                    4 => {
                                                                                        let e317 = {
                                                                                            let l285 = *base.add(8).cast::<*mut u8>();
                                                                                            let l286 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len287 = l286;
                                                                                            _rt::Vec::from_raw_parts(l285.cast(), len287, len287)
                                                                                        };
                                                                                        V317::TupleValue(e317)
                                                                                    }
                                                                                    5 => {
                                                                                        let e317 = {
                                                                                            let l288 = *base.add(8).cast::<*mut u8>();
                                                                                            let l289 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len290 = l289;
                                                                                            _rt::Vec::from_raw_parts(l288.cast(), len290, len290)
                                                                                        };
                                                                                        V317::ListValue(e317)
                                                                                    }
                                                                                    6 => {
                                                                                        let e317 = {
                                                                                            let l291 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l291 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l292 = *base.add(12).cast::<i32>();
                                                                                                        l292
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V317::OptionValue(e317)
                                                                                    }
                                                                                    7 => {
                                                                                        let e317 = {
                                                                                            let l293 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l293 {
                                                                                                0 => {
                                                                                                    let e = {
                                                                                                        let l294 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l294 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l295 = *base.add(16).cast::<i32>();
                                                                                                                    l295
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Ok(e)
                                                                                                }
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l296 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l296 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l297 = *base.add(16).cast::<i32>();
                                                                                                                    l297
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Err(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V317::ResultValue(e317)
                                                                                    }
                                                                                    8 => {
                                                                                        let e317 = {
                                                                                            let l298 = i32::from(*base.add(8).cast::<u8>());
                                                                                            l298 as u8
                                                                                        };
                                                                                        V317::PrimU8(e317)
                                                                                    }
                                                                                    9 => {
                                                                                        let e317 = {
                                                                                            let l299 = i32::from(*base.add(8).cast::<u16>());
                                                                                            l299 as u16
                                                                                        };
                                                                                        V317::PrimU16(e317)
                                                                                    }
                                                                                    10 => {
                                                                                        let e317 = {
                                                                                            let l300 = *base.add(8).cast::<i32>();
                                                                                            l300 as u32
                                                                                        };
                                                                                        V317::PrimU32(e317)
                                                                                    }
                                                                                    11 => {
                                                                                        let e317 = {
                                                                                            let l301 = *base.add(8).cast::<i64>();
                                                                                            l301 as u64
                                                                                        };
                                                                                        V317::PrimU64(e317)
                                                                                    }
                                                                                    12 => {
                                                                                        let e317 = {
                                                                                            let l302 = i32::from(*base.add(8).cast::<i8>());
                                                                                            l302 as i8
                                                                                        };
                                                                                        V317::PrimS8(e317)
                                                                                    }
                                                                                    13 => {
                                                                                        let e317 = {
                                                                                            let l303 = i32::from(*base.add(8).cast::<i16>());
                                                                                            l303 as i16
                                                                                        };
                                                                                        V317::PrimS16(e317)
                                                                                    }
                                                                                    14 => {
                                                                                        let e317 = {
                                                                                            let l304 = *base.add(8).cast::<i32>();
                                                                                            l304
                                                                                        };
                                                                                        V317::PrimS32(e317)
                                                                                    }
                                                                                    15 => {
                                                                                        let e317 = {
                                                                                            let l305 = *base.add(8).cast::<i64>();
                                                                                            l305
                                                                                        };
                                                                                        V317::PrimS64(e317)
                                                                                    }
                                                                                    16 => {
                                                                                        let e317 = {
                                                                                            let l306 = *base.add(8).cast::<f32>();
                                                                                            l306
                                                                                        };
                                                                                        V317::PrimFloat32(e317)
                                                                                    }
                                                                                    17 => {
                                                                                        let e317 = {
                                                                                            let l307 = *base.add(8).cast::<f64>();
                                                                                            l307
                                                                                        };
                                                                                        V317::PrimFloat64(e317)
                                                                                    }
                                                                                    18 => {
                                                                                        let e317 = {
                                                                                            let l308 = *base.add(8).cast::<i32>();
                                                                                            _rt::char_lift(l308 as u32)
                                                                                        };
                                                                                        V317::PrimChar(e317)
                                                                                    }
                                                                                    19 => {
                                                                                        let e317 = {
                                                                                            let l309 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l309 as u8)
                                                                                        };
                                                                                        V317::PrimBool(e317)
                                                                                    }
                                                                                    20 => {
                                                                                        let e317 = {
                                                                                            let l310 = *base.add(8).cast::<*mut u8>();
                                                                                            let l311 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len312 = l311;
                                                                                            let bytes312 = _rt::Vec::from_raw_parts(
                                                                                                l310.cast(),
                                                                                                len312,
                                                                                                len312,
                                                                                            );
                                                                                            _rt::string_lift(bytes312)
                                                                                        };
                                                                                        V317::PrimString(e317)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                        let e317 = {
                                                                                            let l313 = *base.add(8).cast::<*mut u8>();
                                                                                            let l314 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len315 = l314;
                                                                                            let bytes315 = _rt::Vec::from_raw_parts(
                                                                                                l313.cast(),
                                                                                                len315,
                                                                                                len315,
                                                                                            );
                                                                                            let l316 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            (
                                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                                    value: _rt::string_lift(bytes315),
                                                                                                },
                                                                                                l316 as u64,
                                                                                            )
                                                                                        };
                                                                                        V317::Handle(e317)
                                                                                    }
                                                                                };
                                                                                v317
                                                                            };
                                                                            result318.push(e318);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base318,
                                                                            len318 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        super::super::super::golem::rpc::types::WitValue {
                                                                            nodes: result318,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            consumed_fuel: l319,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e593)
                                                }
                                                4 => {
                                                    let e593 = {
                                                        let l320 = *base.add(8).cast::<i64>();
                                                        let l321 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l320 as u64,
                                                            nanoseconds: l321 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e593)
                                                }
                                                5 => {
                                                    let e593 = {
                                                        let l322 = *base.add(8).cast::<i64>();
                                                        let l323 = *base.add(16).cast::<i32>();
                                                        let l324 = *base.add(24).cast::<*mut u8>();
                                                        let l325 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len326 = l325;
                                                        let bytes326 = _rt::Vec::from_raw_parts(
                                                            l324.cast(),
                                                            len326,
                                                            len326,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l322 as u64,
                                                                nanoseconds: l323 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes326),
                                                        }
                                                    };
                                                    OplogEntry::Error(e593)
                                                }
                                                6 => {
                                                    let e593 = {
                                                        let l327 = *base.add(8).cast::<i64>();
                                                        let l328 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l327 as u64,
                                                            nanoseconds: l328 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e593)
                                                }
                                                7 => {
                                                    let e593 = {
                                                        let l329 = *base.add(8).cast::<i64>();
                                                        let l330 = *base.add(16).cast::<i32>();
                                                        let l331 = *base.add(24).cast::<i64>();
                                                        let l332 = *base.add(32).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l329 as u64,
                                                                nanoseconds: l330 as u32,
                                                            },
                                                            start: l331 as u64,
                                                            end: l332 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e593)
                                                }
                                                8 => {
                                                    let e593 = {
                                                        let l333 = *base.add(8).cast::<i64>();
                                                        let l334 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l333 as u64,
                                                            nanoseconds: l334 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e593)
                                                }
                                                9 => {
                                                    let e593 = {
                                                        let l335 = *base.add(8).cast::<i64>();
                                                        let l336 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l335 as u64,
                                                            nanoseconds: l336 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e593)
                                                }
                                                10 => {
                                                    let e593 = {
                                                        let l337 = *base.add(8).cast::<i64>();
                                                        let l338 = *base.add(16).cast::<i32>();
                                                        let l339 = *base.add(24).cast::<i32>();
                                                        let l340 = *base.add(32).cast::<i64>();
                                                        let l341 = *base.add(40).cast::<i64>();
                                                        let l342 = *base.add(48).cast::<f64>();
                                                        let l343 = i32::from(*base.add(56).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l337 as u64,
                                                                nanoseconds: l338 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l339 as u32,
                                                                min_delay: l340 as u64,
                                                                max_delay: l341 as u64,
                                                                multiplier: l342,
                                                                max_jitter_factor: match l343 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l344 = *base.add(64).cast::<f64>();
                                                                            l344
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e593)
                                                }
                                                11 => {
                                                    let e593 = {
                                                        let l345 = *base.add(8).cast::<i64>();
                                                        let l346 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l345 as u64,
                                                            nanoseconds: l346 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e593)
                                                }
                                                12 => {
                                                    let e593 = {
                                                        let l347 = *base.add(8).cast::<i64>();
                                                        let l348 = *base.add(16).cast::<i32>();
                                                        let l349 = *base.add(24).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l347 as u64,
                                                                nanoseconds: l348 as u32,
                                                            },
                                                            begin_index: l349 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e593)
                                                }
                                                13 => {
                                                    let e593 = {
                                                        let l350 = *base.add(8).cast::<i64>();
                                                        let l351 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l350 as u64,
                                                            nanoseconds: l351 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e593)
                                                }
                                                14 => {
                                                    let e593 = {
                                                        let l352 = *base.add(8).cast::<i64>();
                                                        let l353 = *base.add(16).cast::<i32>();
                                                        let l354 = *base.add(24).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l352 as u64,
                                                                nanoseconds: l353 as u32,
                                                            },
                                                            begin_index: l354 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e593)
                                                }
                                                15 => {
                                                    let e593 = {
                                                        let l355 = *base.add(8).cast::<i64>();
                                                        let l356 = *base.add(16).cast::<i32>();
                                                        let l357 = i32::from(*base.add(24).cast::<u8>());
                                                        let v417 = match l357 {
                                                            0 => {
                                                                let e417 = {
                                                                    let l358 = *base.add(32).cast::<*mut u8>();
                                                                    let l359 = *base
                                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len360 = l359;
                                                                    let bytes360 = _rt::Vec::from_raw_parts(
                                                                        l358.cast(),
                                                                        len360,
                                                                        len360,
                                                                    );
                                                                    let l361 = *base
                                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l362 = *base
                                                                        .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len363 = l362;
                                                                    let bytes363 = _rt::Vec::from_raw_parts(
                                                                        l361.cast(),
                                                                        len363,
                                                                        len363,
                                                                    );
                                                                    let l364 = i32::from(
                                                                        *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes360),
                                                                        function_name: _rt::string_lift(bytes363),
                                                                        input: match l364 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l365 = *base
                                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l366 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base415 = l365;
                                                                                    let len415 = l366;
                                                                                    let mut result415 = _rt::Vec::with_capacity(len415);
                                                                                    for i in 0..len415 {
                                                                                        let base = base415
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e415 = {
                                                                                            let l367 = *base.add(0).cast::<*mut u8>();
                                                                                            let l368 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base414 = l367;
                                                                                            let len414 = l368;
                                                                                            let mut result414 = _rt::Vec::with_capacity(len414);
                                                                                            for i in 0..len414 {
                                                                                                let base = base414
                                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                                let e414 = {
                                                                                                    let l369 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V413;
                                                                                                    let v413 = match l369 {
                                                                                                        0 => {
                                                                                                            let e413 = {
                                                                                                                let l370 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l371 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len372 = l371;
                                                                                                                _rt::Vec::from_raw_parts(l370.cast(), len372, len372)
                                                                                                            };
                                                                                                            V413::RecordValue(e413)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e413 = {
                                                                                                                let l373 = *base.add(8).cast::<i32>();
                                                                                                                let l374 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l373 as u32,
                                                                                                                    match l374 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l375 = *base.add(16).cast::<i32>();
                                                                                                                                l375
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V413::VariantValue(e413)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e413 = {
                                                                                                                let l376 = *base.add(8).cast::<i32>();
                                                                                                                l376 as u32
                                                                                                            };
                                                                                                            V413::EnumValue(e413)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e413 = {
                                                                                                                let l377 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l378 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let base380 = l377;
                                                                                                                let len380 = l378;
                                                                                                                let mut result380 = _rt::Vec::with_capacity(len380);
                                                                                                                for i in 0..len380 {
                                                                                                                    let base = base380.add(i * 1);
                                                                                                                    let e380 = {
                                                                                                                        let l379 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l379 as u8)
                                                                                                                    };
                                                                                                                    result380.push(e380);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base380, len380 * 1, 1);
                                                                                                                result380
                                                                                                            };
                                                                                                            V413::FlagsValue(e413)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e413 = {
                                                                                                                let l381 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l382 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len383 = l382;
                                                                                                                _rt::Vec::from_raw_parts(l381.cast(), len383, len383)
                                                                                                            };
                                                                                                            V413::TupleValue(e413)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e413 = {
                                                                                                                let l384 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l385 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len386 = l385;
                                                                                                                _rt::Vec::from_raw_parts(l384.cast(), len386, len386)
                                                                                                            };
                                                                                                            V413::ListValue(e413)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e413 = {
                                                                                                                let l387 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l387 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l388 = *base.add(12).cast::<i32>();
                                                                                                                            l388
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V413::OptionValue(e413)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e413 = {
                                                                                                                let l389 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l389 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l390 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l390 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l391 = *base.add(16).cast::<i32>();
                                                                                                                                        l391
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l392 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l392 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l393 = *base.add(16).cast::<i32>();
                                                                                                                                        l393
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V413::ResultValue(e413)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e413 = {
                                                                                                                let l394 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l394 as u8
                                                                                                            };
                                                                                                            V413::PrimU8(e413)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e413 = {
                                                                                                                let l395 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l395 as u16
                                                                                                            };
                                                                                                            V413::PrimU16(e413)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e413 = {
                                                                                                                let l396 = *base.add(8).cast::<i32>();
                                                                                                                l396 as u32
                                                                                                            };
                                                                                                            V413::PrimU32(e413)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e413 = {
                                                                                                                let l397 = *base.add(8).cast::<i64>();
                                                                                                                l397 as u64
                                                                                                            };
                                                                                                            V413::PrimU64(e413)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e413 = {
                                                                                                                let l398 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l398 as i8
                                                                                                            };
                                                                                                            V413::PrimS8(e413)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e413 = {
                                                                                                                let l399 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l399 as i16
                                                                                                            };
                                                                                                            V413::PrimS16(e413)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e413 = {
                                                                                                                let l400 = *base.add(8).cast::<i32>();
                                                                                                                l400
                                                                                                            };
                                                                                                            V413::PrimS32(e413)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e413 = {
                                                                                                                let l401 = *base.add(8).cast::<i64>();
                                                                                                                l401
                                                                                                            };
                                                                                                            V413::PrimS64(e413)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e413 = {
                                                                                                                let l402 = *base.add(8).cast::<f32>();
                                                                                                                l402
                                                                                                            };
                                                                                                            V413::PrimFloat32(e413)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e413 = {
                                                                                                                let l403 = *base.add(8).cast::<f64>();
                                                                                                                l403
                                                                                                            };
                                                                                                            V413::PrimFloat64(e413)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e413 = {
                                                                                                                let l404 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l404 as u32)
                                                                                                            };
                                                                                                            V413::PrimChar(e413)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e413 = {
                                                                                                                let l405 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l405 as u8)
                                                                                                            };
                                                                                                            V413::PrimBool(e413)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e413 = {
                                                                                                                let l406 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l407 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len408 = l407;
                                                                                                                let bytes408 = _rt::Vec::from_raw_parts(
                                                                                                                    l406.cast(),
                                                                                                                    len408,
                                                                                                                    len408,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes408)
                                                                                                            };
                                                                                                            V413::PrimString(e413)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e413 = {
                                                                                                                let l409 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l410 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len411 = l410;
                                                                                                                let bytes411 = _rt::Vec::from_raw_parts(
                                                                                                                    l409.cast(),
                                                                                                                    len411,
                                                                                                                    len411,
                                                                                                                );
                                                                                                                let l412 = *base
                                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes411),
                                                                                                                    },
                                                                                                                    l412 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V413::Handle(e413)
                                                                                                        }
                                                                                                    };
                                                                                                    v413
                                                                                                };
                                                                                                result414.push(e414);
                                                                                            }
                                                                                            _rt::cabi_dealloc(
                                                                                                base414,
                                                                                                len414 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                                8,
                                                                                            );
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result414,
                                                                                            }
                                                                                        };
                                                                                        result415.push(e415);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base415,
                                                                                        len415 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    result415
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                AgentInvocation::ExportedFunction(e417)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e417 = {
                                                                    let l416 = *base.add(32).cast::<i64>();
                                                                    l416 as u64
                                                                };
                                                                AgentInvocation::ManualUpdate(e417)
                                                            }
                                                        };
                                                        PendingAgentInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l355 as u64,
                                                                nanoseconds: l356 as u32,
                                                            },
                                                            invocation: v417,
                                                        }
                                                    };
                                                    OplogEntry::PendingAgentInvocation(e593)
                                                }
                                                16 => {
                                                    let e593 = {
                                                        let l418 = *base.add(8).cast::<i64>();
                                                        let l419 = *base.add(16).cast::<i32>();
                                                        let l420 = *base.add(24).cast::<i64>();
                                                        let l421 = i32::from(*base.add(32).cast::<u8>());
                                                        let v425 = match l421 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e425 = {
                                                                    let l422 = *base
                                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l423 = *base
                                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len424 = l423;
                                                                    _rt::Vec::from_raw_parts(l422.cast(), len424, len424)
                                                                };
                                                                UpdateDescription::SnapshotBased(e425)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l418 as u64,
                                                                nanoseconds: l419 as u32,
                                                            },
                                                            target_version: l420 as u64,
                                                            update_description: v425,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e593)
                                                }
                                                17 => {
                                                    let e593 = {
                                                        let l426 = *base.add(8).cast::<i64>();
                                                        let l427 = *base.add(16).cast::<i32>();
                                                        let l428 = *base.add(24).cast::<i64>();
                                                        let l429 = *base.add(32).cast::<i64>();
                                                        let l430 = *base.add(40).cast::<*mut u8>();
                                                        let l431 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base447 = l430;
                                                        let len447 = l431;
                                                        let mut result447 = _rt::Vec::with_capacity(len447);
                                                        for i in 0..len447 {
                                                            let base = base447
                                                                .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                            let e447 = {
                                                                let l432 = *base.add(0).cast::<*mut u8>();
                                                                let l433 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len434 = l433;
                                                                let bytes434 = _rt::Vec::from_raw_parts(
                                                                    l432.cast(),
                                                                    len434,
                                                                    len434,
                                                                );
                                                                let l435 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l436 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len437 = l436;
                                                                let bytes437 = _rt::Vec::from_raw_parts(
                                                                    l435.cast(),
                                                                    len437,
                                                                    len437,
                                                                );
                                                                let l438 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l439 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base446 = l438;
                                                                let len446 = l439;
                                                                let mut result446 = _rt::Vec::with_capacity(len446);
                                                                for i in 0..len446 {
                                                                    let base = base446
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e446 = {
                                                                        let l440 = *base.add(0).cast::<*mut u8>();
                                                                        let l441 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len442 = l441;
                                                                        let bytes442 = _rt::Vec::from_raw_parts(
                                                                            l440.cast(),
                                                                            len442,
                                                                            len442,
                                                                        );
                                                                        let l443 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l444 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len445 = l444;
                                                                        let bytes445 = _rt::Vec::from_raw_parts(
                                                                            l443.cast(),
                                                                            len445,
                                                                            len445,
                                                                        );
                                                                        (_rt::string_lift(bytes442), _rt::string_lift(bytes445))
                                                                    };
                                                                    result446.push(e446);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base446,
                                                                    len446 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    name: _rt::string_lift(bytes434),
                                                                    version: _rt::string_lift(bytes437),
                                                                    parameters: result446,
                                                                }
                                                            };
                                                            result447.push(e447);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base447,
                                                            len447 * (6 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l426 as u64,
                                                                nanoseconds: l427 as u32,
                                                            },
                                                            target_version: l428 as u64,
                                                            new_component_size: l429 as u64,
                                                            new_active_plugins: result447,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e593)
                                                }
                                                18 => {
                                                    let e593 = {
                                                        let l448 = *base.add(8).cast::<i64>();
                                                        let l449 = *base.add(16).cast::<i32>();
                                                        let l450 = *base.add(24).cast::<i64>();
                                                        let l451 = i32::from(*base.add(32).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l448 as u64,
                                                                nanoseconds: l449 as u32,
                                                            },
                                                            target_version: l450 as u64,
                                                            details: match l451 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l452 = *base
                                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l453 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len454 = l453;
                                                                        let bytes454 = _rt::Vec::from_raw_parts(
                                                                            l452.cast(),
                                                                            len454,
                                                                            len454,
                                                                        );
                                                                        _rt::string_lift(bytes454)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e593)
                                                }
                                                19 => {
                                                    let e593 = {
                                                        let l455 = *base.add(8).cast::<i64>();
                                                        let l456 = *base.add(16).cast::<i32>();
                                                        let l457 = *base.add(24).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l455 as u64,
                                                                nanoseconds: l456 as u32,
                                                            },
                                                            delta: l457 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e593)
                                                }
                                                20 => {
                                                    let e593 = {
                                                        let l458 = *base.add(8).cast::<i64>();
                                                        let l459 = *base.add(16).cast::<i32>();
                                                        let l460 = *base.add(24).cast::<i64>();
                                                        let l461 = *base.add(32).cast::<*mut u8>();
                                                        let l462 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len463 = l462;
                                                        let bytes463 = _rt::Vec::from_raw_parts(
                                                            l461.cast(),
                                                            len463,
                                                            len463,
                                                        );
                                                        let l464 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l465 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len466 = l465;
                                                        let bytes466 = _rt::Vec::from_raw_parts(
                                                            l464.cast(),
                                                            len466,
                                                            len466,
                                                        );
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l458 as u64,
                                                                nanoseconds: l459 as u32,
                                                            },
                                                            resource_id: l460 as u64,
                                                            name: _rt::string_lift(bytes463),
                                                            owner: _rt::string_lift(bytes466),
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e593)
                                                }
                                                21 => {
                                                    let e593 = {
                                                        let l467 = *base.add(8).cast::<i64>();
                                                        let l468 = *base.add(16).cast::<i32>();
                                                        let l469 = *base.add(24).cast::<i64>();
                                                        let l470 = *base.add(32).cast::<*mut u8>();
                                                        let l471 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len472 = l471;
                                                        let bytes472 = _rt::Vec::from_raw_parts(
                                                            l470.cast(),
                                                            len472,
                                                            len472,
                                                        );
                                                        let l473 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l474 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len475 = l474;
                                                        let bytes475 = _rt::Vec::from_raw_parts(
                                                            l473.cast(),
                                                            len475,
                                                            len475,
                                                        );
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l467 as u64,
                                                                nanoseconds: l468 as u32,
                                                            },
                                                            resource_id: l469 as u64,
                                                            name: _rt::string_lift(bytes472),
                                                            owner: _rt::string_lift(bytes475),
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e593)
                                                }
                                                22 => {
                                                    let e593 = {
                                                        let l476 = *base.add(8).cast::<i64>();
                                                        let l477 = *base.add(16).cast::<i32>();
                                                        let l478 = i32::from(*base.add(24).cast::<u8>());
                                                        let l479 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l480 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len481 = l480;
                                                        let bytes481 = _rt::Vec::from_raw_parts(
                                                            l479.cast(),
                                                            len481,
                                                            len481,
                                                        );
                                                        let l482 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l483 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len484 = l483;
                                                        let bytes484 = _rt::Vec::from_raw_parts(
                                                            l482.cast(),
                                                            len484,
                                                            len484,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l476 as u64,
                                                                nanoseconds: l477 as u32,
                                                            },
                                                            level: LogLevel::_lift(l478 as u8),
                                                            context: _rt::string_lift(bytes481),
                                                            message: _rt::string_lift(bytes484),
                                                        }
                                                    };
                                                    OplogEntry::Log(e593)
                                                }
                                                23 => {
                                                    let e593 = {
                                                        let l485 = *base.add(8).cast::<i64>();
                                                        let l486 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l485 as u64,
                                                            nanoseconds: l486 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e593)
                                                }
                                                24 => {
                                                    let e593 = {
                                                        let l487 = *base.add(8).cast::<i64>();
                                                        let l488 = *base.add(16).cast::<i32>();
                                                        let l489 = *base.add(24).cast::<*mut u8>();
                                                        let l490 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len491 = l490;
                                                        let bytes491 = _rt::Vec::from_raw_parts(
                                                            l489.cast(),
                                                            len491,
                                                            len491,
                                                        );
                                                        let l492 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l493 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len494 = l493;
                                                        let bytes494 = _rt::Vec::from_raw_parts(
                                                            l492.cast(),
                                                            len494,
                                                            len494,
                                                        );
                                                        let l495 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l496 = *base
                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base503 = l495;
                                                        let len503 = l496;
                                                        let mut result503 = _rt::Vec::with_capacity(len503);
                                                        for i in 0..len503 {
                                                            let base = base503
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e503 = {
                                                                let l497 = *base.add(0).cast::<*mut u8>();
                                                                let l498 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len499 = l498;
                                                                let bytes499 = _rt::Vec::from_raw_parts(
                                                                    l497.cast(),
                                                                    len499,
                                                                    len499,
                                                                );
                                                                let l500 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l501 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len502 = l501;
                                                                let bytes502 = _rt::Vec::from_raw_parts(
                                                                    l500.cast(),
                                                                    len502,
                                                                    len502,
                                                                );
                                                                (_rt::string_lift(bytes499), _rt::string_lift(bytes502))
                                                            };
                                                            result503.push(e503);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base503,
                                                            len503 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l487 as u64,
                                                                nanoseconds: l488 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                name: _rt::string_lift(bytes491),
                                                                version: _rt::string_lift(bytes494),
                                                                parameters: result503,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e593)
                                                }
                                                25 => {
                                                    let e593 = {
                                                        let l504 = *base.add(8).cast::<i64>();
                                                        let l505 = *base.add(16).cast::<i32>();
                                                        let l506 = *base.add(24).cast::<*mut u8>();
                                                        let l507 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len508 = l507;
                                                        let bytes508 = _rt::Vec::from_raw_parts(
                                                            l506.cast(),
                                                            len508,
                                                            len508,
                                                        );
                                                        let l509 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l510 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len511 = l510;
                                                        let bytes511 = _rt::Vec::from_raw_parts(
                                                            l509.cast(),
                                                            len511,
                                                            len511,
                                                        );
                                                        let l512 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l513 = *base
                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base520 = l512;
                                                        let len520 = l513;
                                                        let mut result520 = _rt::Vec::with_capacity(len520);
                                                        for i in 0..len520 {
                                                            let base = base520
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e520 = {
                                                                let l514 = *base.add(0).cast::<*mut u8>();
                                                                let l515 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len516 = l515;
                                                                let bytes516 = _rt::Vec::from_raw_parts(
                                                                    l514.cast(),
                                                                    len516,
                                                                    len516,
                                                                );
                                                                let l517 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l518 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len519 = l518;
                                                                let bytes519 = _rt::Vec::from_raw_parts(
                                                                    l517.cast(),
                                                                    len519,
                                                                    len519,
                                                                );
                                                                (_rt::string_lift(bytes516), _rt::string_lift(bytes519))
                                                            };
                                                            result520.push(e520);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base520,
                                                            len520 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l504 as u64,
                                                                nanoseconds: l505 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                name: _rt::string_lift(bytes508),
                                                                version: _rt::string_lift(bytes511),
                                                                parameters: result520,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e593)
                                                }
                                                26 => {
                                                    let e593 = {
                                                        let l521 = *base.add(8).cast::<i64>();
                                                        let l522 = *base.add(16).cast::<i32>();
                                                        let l523 = *base.add(24).cast::<i64>();
                                                        let l524 = *base.add(32).cast::<i64>();
                                                        RevertParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l521 as u64,
                                                                nanoseconds: l522 as u32,
                                                            },
                                                            start: l523 as u64,
                                                            end: l524 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Revert(e593)
                                                }
                                                27 => {
                                                    let e593 = {
                                                        let l525 = *base.add(8).cast::<i64>();
                                                        let l526 = *base.add(16).cast::<i32>();
                                                        let l527 = *base.add(24).cast::<*mut u8>();
                                                        let l528 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len529 = l528;
                                                        let bytes529 = _rt::Vec::from_raw_parts(
                                                            l527.cast(),
                                                            len529,
                                                            len529,
                                                        );
                                                        CancelInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l525 as u64,
                                                                nanoseconds: l526 as u32,
                                                            },
                                                            idempotency_key: _rt::string_lift(bytes529),
                                                        }
                                                    };
                                                    OplogEntry::CancelInvocation(e593)
                                                }
                                                28 => {
                                                    let e593 = {
                                                        let l530 = *base.add(8).cast::<i64>();
                                                        let l531 = *base.add(16).cast::<i32>();
                                                        let l532 = *base.add(24).cast::<*mut u8>();
                                                        let l533 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len534 = l533;
                                                        let bytes534 = _rt::Vec::from_raw_parts(
                                                            l532.cast(),
                                                            len534,
                                                            len534,
                                                        );
                                                        let l535 = i32::from(
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l539 = i32::from(
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l543 = *base
                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l544 = *base
                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base553 = l543;
                                                        let len553 = l544;
                                                        let mut result553 = _rt::Vec::with_capacity(len553);
                                                        for i in 0..len553 {
                                                            let base = base553
                                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                            let e553 = {
                                                                let l545 = *base.add(0).cast::<*mut u8>();
                                                                let l546 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len547 = l546;
                                                                let bytes547 = _rt::Vec::from_raw_parts(
                                                                    l545.cast(),
                                                                    len547,
                                                                    len547,
                                                                );
                                                                let l548 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::api::context::AttributeValue as V552;
                                                                let v552 = match l548 {
                                                                    n => {
                                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                        let e552 = {
                                                                            let l549 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l550 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len551 = l550;
                                                                            let bytes551 = _rt::Vec::from_raw_parts(
                                                                                l549.cast(),
                                                                                len551,
                                                                                len551,
                                                                            );
                                                                            _rt::string_lift(bytes551)
                                                                        };
                                                                        V552::String(e552)
                                                                    }
                                                                };
                                                                super::super::super::golem::api::context::Attribute {
                                                                    key: _rt::string_lift(bytes547),
                                                                    value: v552,
                                                                }
                                                            };
                                                            result553.push(e553);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base553,
                                                            len553 * (5 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        StartSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l530 as u64,
                                                                nanoseconds: l531 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes534),
                                                            parent: match l535 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l536 = *base
                                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l537 = *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len538 = l537;
                                                                        let bytes538 = _rt::Vec::from_raw_parts(
                                                                            l536.cast(),
                                                                            len538,
                                                                            len538,
                                                                        );
                                                                        _rt::string_lift(bytes538)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            linked_context: match l539 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l540 = *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l541 = *base
                                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len542 = l541;
                                                                        let bytes542 = _rt::Vec::from_raw_parts(
                                                                            l540.cast(),
                                                                            len542,
                                                                            len542,
                                                                        );
                                                                        _rt::string_lift(bytes542)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            attributes: result553,
                                                        }
                                                    };
                                                    OplogEntry::StartSpan(e593)
                                                }
                                                29 => {
                                                    let e593 = {
                                                        let l554 = *base.add(8).cast::<i64>();
                                                        let l555 = *base.add(16).cast::<i32>();
                                                        let l556 = *base.add(24).cast::<*mut u8>();
                                                        let l557 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len558 = l557;
                                                        let bytes558 = _rt::Vec::from_raw_parts(
                                                            l556.cast(),
                                                            len558,
                                                            len558,
                                                        );
                                                        FinishSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l554 as u64,
                                                                nanoseconds: l555 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes558),
                                                        }
                                                    };
                                                    OplogEntry::FinishSpan(e593)
                                                }
                                                30 => {
                                                    let e593 = {
                                                        let l559 = *base.add(8).cast::<i64>();
                                                        let l560 = *base.add(16).cast::<i32>();
                                                        let l561 = *base.add(24).cast::<*mut u8>();
                                                        let l562 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len563 = l562;
                                                        let bytes563 = _rt::Vec::from_raw_parts(
                                                            l561.cast(),
                                                            len563,
                                                            len563,
                                                        );
                                                        let l564 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l565 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len566 = l565;
                                                        let bytes566 = _rt::Vec::from_raw_parts(
                                                            l564.cast(),
                                                            len566,
                                                            len566,
                                                        );
                                                        let l567 = i32::from(
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        use super::super::super::golem::api::context::AttributeValue as V571;
                                                        let v571 = match l567 {
                                                            n => {
                                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                let e571 = {
                                                                    let l568 = *base
                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l569 = *base
                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len570 = l569;
                                                                    let bytes570 = _rt::Vec::from_raw_parts(
                                                                        l568.cast(),
                                                                        len570,
                                                                        len570,
                                                                    );
                                                                    _rt::string_lift(bytes570)
                                                                };
                                                                V571::String(e571)
                                                            }
                                                        };
                                                        SetSpanAttributeParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l559 as u64,
                                                                nanoseconds: l560 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes563),
                                                            key: _rt::string_lift(bytes566),
                                                            value: v571,
                                                        }
                                                    };
                                                    OplogEntry::SetSpanAttribute(e593)
                                                }
                                                31 => {
                                                    let e593 = {
                                                        let l572 = *base.add(8).cast::<i64>();
                                                        let l573 = *base.add(16).cast::<i32>();
                                                        let l574 = i32::from(*base.add(24).cast::<u8>());
                                                        use super::super::super::golem::api::host::PersistenceLevel as V575;
                                                        let v575 = match l574 {
                                                            0 => V575::PersistNothing,
                                                            1 => V575::PersistRemoteSideEffects,
                                                            n => {
                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                V575::Smart
                                                            }
                                                        };
                                                        ChangePersistenceLevelParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l572 as u64,
                                                                nanoseconds: l573 as u32,
                                                            },
                                                            persistence_level: v575,
                                                        }
                                                    };
                                                    OplogEntry::ChangePersistenceLevel(e593)
                                                }
                                                32 => {
                                                    let e593 = {
                                                        let l576 = *base.add(8).cast::<i64>();
                                                        let l577 = *base.add(16).cast::<i32>();
                                                        let l578 = *base.add(24).cast::<*mut u8>();
                                                        let l579 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len580 = l579;
                                                        let bytes580 = _rt::Vec::from_raw_parts(
                                                            l578.cast(),
                                                            len580,
                                                            len580,
                                                        );
                                                        BeginRemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l576 as u64,
                                                                nanoseconds: l577 as u32,
                                                            },
                                                            transaction_id: _rt::string_lift(bytes580),
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteTransaction(e593)
                                                }
                                                33 => {
                                                    let e593 = {
                                                        let l581 = *base.add(8).cast::<i64>();
                                                        let l582 = *base.add(16).cast::<i32>();
                                                        let l583 = *base.add(24).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l581 as u64,
                                                                nanoseconds: l582 as u32,
                                                            },
                                                            begin_index: l583 as u64,
                                                        }
                                                    };
                                                    OplogEntry::PreCommitRemoteTransaction(e593)
                                                }
                                                34 => {
                                                    let e593 = {
                                                        let l584 = *base.add(8).cast::<i64>();
                                                        let l585 = *base.add(16).cast::<i32>();
                                                        let l586 = *base.add(24).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l584 as u64,
                                                                nanoseconds: l585 as u32,
                                                            },
                                                            begin_index: l586 as u64,
                                                        }
                                                    };
                                                    OplogEntry::PreRollbackRemoteTransaction(e593)
                                                }
                                                35 => {
                                                    let e593 = {
                                                        let l587 = *base.add(8).cast::<i64>();
                                                        let l588 = *base.add(16).cast::<i32>();
                                                        let l589 = *base.add(24).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l587 as u64,
                                                                nanoseconds: l588 as u32,
                                                            },
                                                            begin_index: l589 as u64,
                                                        }
                                                    };
                                                    OplogEntry::CommittedRemoteTransaction(e593)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 36, "invalid enum discriminant");
                                                    let e593 = {
                                                        let l590 = *base.add(8).cast::<i64>();
                                                        let l591 = *base.add(16).cast::<i32>();
                                                        let l592 = *base.add(24).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l590 as u64,
                                                                nanoseconds: l591 as u32,
                                                            },
                                                            begin_index: l592 as u64,
                                                        }
                                                    };
                                                    OplogEntry::RolledBackRemoteTransaction(e593)
                                                }
                                            };
                                            v593
                                        };
                                        result594.push(e594);
                                    }
                                    _rt::cabi_dealloc(
                                        base594,
                                        len594 * (120 + 10 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result594
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result595
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(agent_id: &AgentId, text: &str) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::AgentId {
                            component_id: component_id0,
                            agent_id: agent_id0,
                        } = agent_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = agent_id0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let vec4 = text;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]search-oplog"]
                            fn wit_import5(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import5(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                                ptr4.cast_mut(),
                                len4,
                            )
                        };
                        unsafe { SearchOplog::from_handle(ret as u32) }
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<(OplogIndex, OplogEntry)>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]search-oplog.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result596 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base595 = l3;
                                    let len595 = l4;
                                    let mut result595 = _rt::Vec::with_capacity(len595);
                                    for i in 0..len595 {
                                        let base = base595
                                            .add(i * (128 + 10 * ::core::mem::size_of::<*const u8>()));
                                        let e595 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = i32::from(*base.add(8).cast::<u8>());
                                            let v594 = match l6 {
                                                0 => {
                                                    let e594 = {
                                                        let l7 = *base.add(16).cast::<i64>();
                                                        let l8 = *base.add(24).cast::<i32>();
                                                        let l9 = *base.add(32).cast::<i64>();
                                                        let l10 = *base.add(40).cast::<i64>();
                                                        let l11 = *base.add(48).cast::<*mut u8>();
                                                        let l12 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len13 = l12;
                                                        let bytes13 = _rt::Vec::from_raw_parts(
                                                            l11.cast(),
                                                            len13,
                                                            len13,
                                                        );
                                                        let l14 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l15 = *base
                                                            .add(56 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l16 = *base
                                                            .add(56 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base20 = l15;
                                                        let len20 = l16;
                                                        let mut result20 = _rt::Vec::with_capacity(len20);
                                                        for i in 0..len20 {
                                                            let base = base20
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e20 = {
                                                                let l17 = *base.add(0).cast::<*mut u8>();
                                                                let l18 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len19 = l18;
                                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                                    l17.cast(),
                                                                    len19,
                                                                    len19,
                                                                );
                                                                _rt::string_lift(bytes19)
                                                            };
                                                            result20.push(e20);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base20,
                                                            len20 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l21 = *base
                                                            .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l22 = *base
                                                            .add(56 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l21;
                                                        let len29 = l22;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e29 = {
                                                                let l23 = *base.add(0).cast::<*mut u8>();
                                                                let l24 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len25 = l24;
                                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                                    l23.cast(),
                                                                    len25,
                                                                    len25,
                                                                );
                                                                let l26 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l27 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len28 = l27;
                                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                                    l26.cast(),
                                                                    len28,
                                                                    len28,
                                                                );
                                                                (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base29,
                                                            len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l30 = *base
                                                            .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l31 = *base
                                                            .add(64 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l32 = *base
                                                            .add(72 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l33 = *base
                                                            .add(80 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l34 = i32::from(
                                                            *base
                                                                .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l40 = *base
                                                            .add(112 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l41 = *base
                                                            .add(120 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l42 = *base
                                                            .add(128 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l43 = *base
                                                            .add(128 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base59 = l42;
                                                        let len59 = l43;
                                                        let mut result59 = _rt::Vec::with_capacity(len59);
                                                        for i in 0..len59 {
                                                            let base = base59
                                                                .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                            let e59 = {
                                                                let l44 = *base.add(0).cast::<*mut u8>();
                                                                let l45 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len46 = l45;
                                                                let bytes46 = _rt::Vec::from_raw_parts(
                                                                    l44.cast(),
                                                                    len46,
                                                                    len46,
                                                                );
                                                                let l47 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l48 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len49 = l48;
                                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                                    l47.cast(),
                                                                    len49,
                                                                    len49,
                                                                );
                                                                let l50 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l51 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base58 = l50;
                                                                let len58 = l51;
                                                                let mut result58 = _rt::Vec::with_capacity(len58);
                                                                for i in 0..len58 {
                                                                    let base = base58
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e58 = {
                                                                        let l52 = *base.add(0).cast::<*mut u8>();
                                                                        let l53 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len54 = l53;
                                                                        let bytes54 = _rt::Vec::from_raw_parts(
                                                                            l52.cast(),
                                                                            len54,
                                                                            len54,
                                                                        );
                                                                        let l55 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l56 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len57 = l56;
                                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                                            l55.cast(),
                                                                            len57,
                                                                            len57,
                                                                        );
                                                                        (_rt::string_lift(bytes54), _rt::string_lift(bytes57))
                                                                    };
                                                                    result58.push(e58);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base58,
                                                                    len58 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    name: _rt::string_lift(bytes46),
                                                                    version: _rt::string_lift(bytes49),
                                                                    parameters: result58,
                                                                }
                                                            };
                                                            result59.push(e59);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base59,
                                                            len59 * (6 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l7 as u64,
                                                                nanoseconds: l8 as u32,
                                                            },
                                                            agent_id: super::super::super::golem::rpc::types::AgentId {
                                                                component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l9 as u64,
                                                                        low_bits: l10 as u64,
                                                                    },
                                                                },
                                                                agent_id: _rt::string_lift(bytes13),
                                                            },
                                                            component_version: l14 as u64,
                                                            args: result20,
                                                            env: result29,
                                                            created_by: super::super::super::golem::api::host::AccountId {
                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l30 as u64,
                                                                    low_bits: l31 as u64,
                                                                },
                                                            },
                                                            environment_id: super::super::super::golem::api::host::EnvironmentId {
                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l32 as u64,
                                                                    low_bits: l33 as u64,
                                                                },
                                                            },
                                                            parent: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *base
                                                                            .add(96 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l36 = *base
                                                                            .add(104 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l37 = *base
                                                                            .add(112 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l38 = *base
                                                                            .add(112 + 7 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len39 = l38;
                                                                        let bytes39 = _rt::Vec::from_raw_parts(
                                                                            l37.cast(),
                                                                            len39,
                                                                            len39,
                                                                        );
                                                                        super::super::super::golem::rpc::types::AgentId {
                                                                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                                    high_bits: l35 as u64,
                                                                                    low_bits: l36 as u64,
                                                                                },
                                                                            },
                                                                            agent_id: _rt::string_lift(bytes39),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l40 as u64,
                                                            initial_total_linear_memory_size: l41 as u64,
                                                            initial_active_plugins: result59,
                                                        }
                                                    };
                                                    OplogEntry::Create(e594)
                                                }
                                                1 => {
                                                    let e594 = {
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        let l61 = *base.add(24).cast::<i32>();
                                                        let l62 = *base.add(32).cast::<*mut u8>();
                                                        let l63 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        let l65 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base112 = l65;
                                                        let len112 = l66;
                                                        let mut result112 = _rt::Vec::with_capacity(len112);
                                                        for i in 0..len112 {
                                                            let base = base112
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e112 = {
                                                                let l67 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V111;
                                                                let v111 = match l67 {
                                                                    0 => {
                                                                        let e111 = {
                                                                            let l68 = *base.add(8).cast::<*mut u8>();
                                                                            let l69 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len70 = l69;
                                                                            _rt::Vec::from_raw_parts(l68.cast(), len70, len70)
                                                                        };
                                                                        V111::RecordValue(e111)
                                                                    }
                                                                    1 => {
                                                                        let e111 = {
                                                                            let l71 = *base.add(8).cast::<i32>();
                                                                            let l72 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l71 as u32,
                                                                                match l72 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l73 = *base.add(16).cast::<i32>();
                                                                                            l73
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V111::VariantValue(e111)
                                                                    }
                                                                    2 => {
                                                                        let e111 = {
                                                                            let l74 = *base.add(8).cast::<i32>();
                                                                            l74 as u32
                                                                        };
                                                                        V111::EnumValue(e111)
                                                                    }
                                                                    3 => {
                                                                        let e111 = {
                                                                            let l75 = *base.add(8).cast::<*mut u8>();
                                                                            let l76 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base78 = l75;
                                                                            let len78 = l76;
                                                                            let mut result78 = _rt::Vec::with_capacity(len78);
                                                                            for i in 0..len78 {
                                                                                let base = base78.add(i * 1);
                                                                                let e78 = {
                                                                                    let l77 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l77 as u8)
                                                                                };
                                                                                result78.push(e78);
                                                                            }
                                                                            _rt::cabi_dealloc(base78, len78 * 1, 1);
                                                                            result78
                                                                        };
                                                                        V111::FlagsValue(e111)
                                                                    }
                                                                    4 => {
                                                                        let e111 = {
                                                                            let l79 = *base.add(8).cast::<*mut u8>();
                                                                            let l80 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len81 = l80;
                                                                            _rt::Vec::from_raw_parts(l79.cast(), len81, len81)
                                                                        };
                                                                        V111::TupleValue(e111)
                                                                    }
                                                                    5 => {
                                                                        let e111 = {
                                                                            let l82 = *base.add(8).cast::<*mut u8>();
                                                                            let l83 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len84 = l83;
                                                                            _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                        };
                                                                        V111::ListValue(e111)
                                                                    }
                                                                    6 => {
                                                                        let e111 = {
                                                                            let l85 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l85 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l86 = *base.add(12).cast::<i32>();
                                                                                        l86
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V111::OptionValue(e111)
                                                                    }
                                                                    7 => {
                                                                        let e111 = {
                                                                            let l87 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l87 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l88 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l88 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l89 = *base.add(16).cast::<i32>();
                                                                                                    l89
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l90 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l90 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l91 = *base.add(16).cast::<i32>();
                                                                                                    l91
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V111::ResultValue(e111)
                                                                    }
                                                                    8 => {
                                                                        let e111 = {
                                                                            let l92 = i32::from(*base.add(8).cast::<u8>());
                                                                            l92 as u8
                                                                        };
                                                                        V111::PrimU8(e111)
                                                                    }
                                                                    9 => {
                                                                        let e111 = {
                                                                            let l93 = i32::from(*base.add(8).cast::<u16>());
                                                                            l93 as u16
                                                                        };
                                                                        V111::PrimU16(e111)
                                                                    }
                                                                    10 => {
                                                                        let e111 = {
                                                                            let l94 = *base.add(8).cast::<i32>();
                                                                            l94 as u32
                                                                        };
                                                                        V111::PrimU32(e111)
                                                                    }
                                                                    11 => {
                                                                        let e111 = {
                                                                            let l95 = *base.add(8).cast::<i64>();
                                                                            l95 as u64
                                                                        };
                                                                        V111::PrimU64(e111)
                                                                    }
                                                                    12 => {
                                                                        let e111 = {
                                                                            let l96 = i32::from(*base.add(8).cast::<i8>());
                                                                            l96 as i8
                                                                        };
                                                                        V111::PrimS8(e111)
                                                                    }
                                                                    13 => {
                                                                        let e111 = {
                                                                            let l97 = i32::from(*base.add(8).cast::<i16>());
                                                                            l97 as i16
                                                                        };
                                                                        V111::PrimS16(e111)
                                                                    }
                                                                    14 => {
                                                                        let e111 = {
                                                                            let l98 = *base.add(8).cast::<i32>();
                                                                            l98
                                                                        };
                                                                        V111::PrimS32(e111)
                                                                    }
                                                                    15 => {
                                                                        let e111 = {
                                                                            let l99 = *base.add(8).cast::<i64>();
                                                                            l99
                                                                        };
                                                                        V111::PrimS64(e111)
                                                                    }
                                                                    16 => {
                                                                        let e111 = {
                                                                            let l100 = *base.add(8).cast::<f32>();
                                                                            l100
                                                                        };
                                                                        V111::PrimFloat32(e111)
                                                                    }
                                                                    17 => {
                                                                        let e111 = {
                                                                            let l101 = *base.add(8).cast::<f64>();
                                                                            l101
                                                                        };
                                                                        V111::PrimFloat64(e111)
                                                                    }
                                                                    18 => {
                                                                        let e111 = {
                                                                            let l102 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l102 as u32)
                                                                        };
                                                                        V111::PrimChar(e111)
                                                                    }
                                                                    19 => {
                                                                        let e111 = {
                                                                            let l103 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l103 as u8)
                                                                        };
                                                                        V111::PrimBool(e111)
                                                                    }
                                                                    20 => {
                                                                        let e111 = {
                                                                            let l104 = *base.add(8).cast::<*mut u8>();
                                                                            let l105 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len106 = l105;
                                                                            let bytes106 = _rt::Vec::from_raw_parts(
                                                                                l104.cast(),
                                                                                len106,
                                                                                len106,
                                                                            );
                                                                            _rt::string_lift(bytes106)
                                                                        };
                                                                        V111::PrimString(e111)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e111 = {
                                                                            let l107 = *base.add(8).cast::<*mut u8>();
                                                                            let l108 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len109 = l108;
                                                                            let bytes109 = _rt::Vec::from_raw_parts(
                                                                                l107.cast(),
                                                                                len109,
                                                                                len109,
                                                                            );
                                                                            let l110 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes109),
                                                                                },
                                                                                l110 as u64,
                                                                            )
                                                                        };
                                                                        V111::Handle(e111)
                                                                    }
                                                                };
                                                                v111
                                                            };
                                                            result112.push(e112);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base112,
                                                            len112 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l113 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l114 = *base
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base160 = l113;
                                                        let len160 = l114;
                                                        let mut result160 = _rt::Vec::with_capacity(len160);
                                                        for i in 0..len160 {
                                                            let base = base160
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e160 = {
                                                                let l115 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V159;
                                                                let v159 = match l115 {
                                                                    0 => {
                                                                        let e159 = {
                                                                            let l116 = *base.add(8).cast::<*mut u8>();
                                                                            let l117 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len118 = l117;
                                                                            _rt::Vec::from_raw_parts(l116.cast(), len118, len118)
                                                                        };
                                                                        V159::RecordValue(e159)
                                                                    }
                                                                    1 => {
                                                                        let e159 = {
                                                                            let l119 = *base.add(8).cast::<i32>();
                                                                            let l120 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l119 as u32,
                                                                                match l120 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l121 = *base.add(16).cast::<i32>();
                                                                                            l121
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V159::VariantValue(e159)
                                                                    }
                                                                    2 => {
                                                                        let e159 = {
                                                                            let l122 = *base.add(8).cast::<i32>();
                                                                            l122 as u32
                                                                        };
                                                                        V159::EnumValue(e159)
                                                                    }
                                                                    3 => {
                                                                        let e159 = {
                                                                            let l123 = *base.add(8).cast::<*mut u8>();
                                                                            let l124 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base126 = l123;
                                                                            let len126 = l124;
                                                                            let mut result126 = _rt::Vec::with_capacity(len126);
                                                                            for i in 0..len126 {
                                                                                let base = base126.add(i * 1);
                                                                                let e126 = {
                                                                                    let l125 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l125 as u8)
                                                                                };
                                                                                result126.push(e126);
                                                                            }
                                                                            _rt::cabi_dealloc(base126, len126 * 1, 1);
                                                                            result126
                                                                        };
                                                                        V159::FlagsValue(e159)
                                                                    }
                                                                    4 => {
                                                                        let e159 = {
                                                                            let l127 = *base.add(8).cast::<*mut u8>();
                                                                            let l128 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len129 = l128;
                                                                            _rt::Vec::from_raw_parts(l127.cast(), len129, len129)
                                                                        };
                                                                        V159::TupleValue(e159)
                                                                    }
                                                                    5 => {
                                                                        let e159 = {
                                                                            let l130 = *base.add(8).cast::<*mut u8>();
                                                                            let l131 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len132 = l131;
                                                                            _rt::Vec::from_raw_parts(l130.cast(), len132, len132)
                                                                        };
                                                                        V159::ListValue(e159)
                                                                    }
                                                                    6 => {
                                                                        let e159 = {
                                                                            let l133 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l133 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l134 = *base.add(12).cast::<i32>();
                                                                                        l134
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V159::OptionValue(e159)
                                                                    }
                                                                    7 => {
                                                                        let e159 = {
                                                                            let l135 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l135 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l136 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l136 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l137 = *base.add(16).cast::<i32>();
                                                                                                    l137
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l138 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l138 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l139 = *base.add(16).cast::<i32>();
                                                                                                    l139
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V159::ResultValue(e159)
                                                                    }
                                                                    8 => {
                                                                        let e159 = {
                                                                            let l140 = i32::from(*base.add(8).cast::<u8>());
                                                                            l140 as u8
                                                                        };
                                                                        V159::PrimU8(e159)
                                                                    }
                                                                    9 => {
                                                                        let e159 = {
                                                                            let l141 = i32::from(*base.add(8).cast::<u16>());
                                                                            l141 as u16
                                                                        };
                                                                        V159::PrimU16(e159)
                                                                    }
                                                                    10 => {
                                                                        let e159 = {
                                                                            let l142 = *base.add(8).cast::<i32>();
                                                                            l142 as u32
                                                                        };
                                                                        V159::PrimU32(e159)
                                                                    }
                                                                    11 => {
                                                                        let e159 = {
                                                                            let l143 = *base.add(8).cast::<i64>();
                                                                            l143 as u64
                                                                        };
                                                                        V159::PrimU64(e159)
                                                                    }
                                                                    12 => {
                                                                        let e159 = {
                                                                            let l144 = i32::from(*base.add(8).cast::<i8>());
                                                                            l144 as i8
                                                                        };
                                                                        V159::PrimS8(e159)
                                                                    }
                                                                    13 => {
                                                                        let e159 = {
                                                                            let l145 = i32::from(*base.add(8).cast::<i16>());
                                                                            l145 as i16
                                                                        };
                                                                        V159::PrimS16(e159)
                                                                    }
                                                                    14 => {
                                                                        let e159 = {
                                                                            let l146 = *base.add(8).cast::<i32>();
                                                                            l146
                                                                        };
                                                                        V159::PrimS32(e159)
                                                                    }
                                                                    15 => {
                                                                        let e159 = {
                                                                            let l147 = *base.add(8).cast::<i64>();
                                                                            l147
                                                                        };
                                                                        V159::PrimS64(e159)
                                                                    }
                                                                    16 => {
                                                                        let e159 = {
                                                                            let l148 = *base.add(8).cast::<f32>();
                                                                            l148
                                                                        };
                                                                        V159::PrimFloat32(e159)
                                                                    }
                                                                    17 => {
                                                                        let e159 = {
                                                                            let l149 = *base.add(8).cast::<f64>();
                                                                            l149
                                                                        };
                                                                        V159::PrimFloat64(e159)
                                                                    }
                                                                    18 => {
                                                                        let e159 = {
                                                                            let l150 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l150 as u32)
                                                                        };
                                                                        V159::PrimChar(e159)
                                                                    }
                                                                    19 => {
                                                                        let e159 = {
                                                                            let l151 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l151 as u8)
                                                                        };
                                                                        V159::PrimBool(e159)
                                                                    }
                                                                    20 => {
                                                                        let e159 = {
                                                                            let l152 = *base.add(8).cast::<*mut u8>();
                                                                            let l153 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len154 = l153;
                                                                            let bytes154 = _rt::Vec::from_raw_parts(
                                                                                l152.cast(),
                                                                                len154,
                                                                                len154,
                                                                            );
                                                                            _rt::string_lift(bytes154)
                                                                        };
                                                                        V159::PrimString(e159)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e159 = {
                                                                            let l155 = *base.add(8).cast::<*mut u8>();
                                                                            let l156 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len157 = l156;
                                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                                l155.cast(),
                                                                                len157,
                                                                                len157,
                                                                            );
                                                                            let l158 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes157),
                                                                                },
                                                                                l158 as u64,
                                                                            )
                                                                        };
                                                                        V159::Handle(e159)
                                                                    }
                                                                };
                                                                v159
                                                            };
                                                            result160.push(e160);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base160,
                                                            len160 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l161 = i32::from(
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let v166 = match l161 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            4 => {
                                                                let e166 = {
                                                                    let l162 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l162 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l163 = *base
                                                                                    .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l163 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e166)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                                let e166 = {
                                                                    let l164 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l164 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l165 = *base
                                                                                    .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l165 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteTransaction(e166)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l60 as u64,
                                                                nanoseconds: l61 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes64),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result112,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result160,
                                                            },
                                                            wrapped_function_type: v166,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e594)
                                                }
                                                2 => {
                                                    let e594 = {
                                                        let l167 = *base.add(16).cast::<i64>();
                                                        let l168 = *base.add(24).cast::<i32>();
                                                        let l169 = *base.add(32).cast::<*mut u8>();
                                                        let l170 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len171 = l170;
                                                        let bytes171 = _rt::Vec::from_raw_parts(
                                                            l169.cast(),
                                                            len171,
                                                            len171,
                                                        );
                                                        let l172 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l173 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base222 = l172;
                                                        let len222 = l173;
                                                        let mut result222 = _rt::Vec::with_capacity(len222);
                                                        for i in 0..len222 {
                                                            let base = base222
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e222 = {
                                                                let l174 = *base.add(0).cast::<*mut u8>();
                                                                let l175 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base221 = l174;
                                                                let len221 = l175;
                                                                let mut result221 = _rt::Vec::with_capacity(len221);
                                                                for i in 0..len221 {
                                                                    let base = base221
                                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                    let e221 = {
                                                                        let l176 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V220;
                                                                        let v220 = match l176 {
                                                                            0 => {
                                                                                let e220 = {
                                                                                    let l177 = *base.add(8).cast::<*mut u8>();
                                                                                    let l178 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len179 = l178;
                                                                                    _rt::Vec::from_raw_parts(l177.cast(), len179, len179)
                                                                                };
                                                                                V220::RecordValue(e220)
                                                                            }
                                                                            1 => {
                                                                                let e220 = {
                                                                                    let l180 = *base.add(8).cast::<i32>();
                                                                                    let l181 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l180 as u32,
                                                                                        match l181 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l182 = *base.add(16).cast::<i32>();
                                                                                                    l182
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V220::VariantValue(e220)
                                                                            }
                                                                            2 => {
                                                                                let e220 = {
                                                                                    let l183 = *base.add(8).cast::<i32>();
                                                                                    l183 as u32
                                                                                };
                                                                                V220::EnumValue(e220)
                                                                            }
                                                                            3 => {
                                                                                let e220 = {
                                                                                    let l184 = *base.add(8).cast::<*mut u8>();
                                                                                    let l185 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base187 = l184;
                                                                                    let len187 = l185;
                                                                                    let mut result187 = _rt::Vec::with_capacity(len187);
                                                                                    for i in 0..len187 {
                                                                                        let base = base187.add(i * 1);
                                                                                        let e187 = {
                                                                                            let l186 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l186 as u8)
                                                                                        };
                                                                                        result187.push(e187);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base187, len187 * 1, 1);
                                                                                    result187
                                                                                };
                                                                                V220::FlagsValue(e220)
                                                                            }
                                                                            4 => {
                                                                                let e220 = {
                                                                                    let l188 = *base.add(8).cast::<*mut u8>();
                                                                                    let l189 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len190 = l189;
                                                                                    _rt::Vec::from_raw_parts(l188.cast(), len190, len190)
                                                                                };
                                                                                V220::TupleValue(e220)
                                                                            }
                                                                            5 => {
                                                                                let e220 = {
                                                                                    let l191 = *base.add(8).cast::<*mut u8>();
                                                                                    let l192 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len193 = l192;
                                                                                    _rt::Vec::from_raw_parts(l191.cast(), len193, len193)
                                                                                };
                                                                                V220::ListValue(e220)
                                                                            }
                                                                            6 => {
                                                                                let e220 = {
                                                                                    let l194 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l194 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l195 = *base.add(12).cast::<i32>();
                                                                                                l195
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V220::OptionValue(e220)
                                                                            }
                                                                            7 => {
                                                                                let e220 = {
                                                                                    let l196 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l196 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l197 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l197 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l198 = *base.add(16).cast::<i32>();
                                                                                                            l198
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l199 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l199 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l200 = *base.add(16).cast::<i32>();
                                                                                                            l200
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V220::ResultValue(e220)
                                                                            }
                                                                            8 => {
                                                                                let e220 = {
                                                                                    let l201 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l201 as u8
                                                                                };
                                                                                V220::PrimU8(e220)
                                                                            }
                                                                            9 => {
                                                                                let e220 = {
                                                                                    let l202 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l202 as u16
                                                                                };
                                                                                V220::PrimU16(e220)
                                                                            }
                                                                            10 => {
                                                                                let e220 = {
                                                                                    let l203 = *base.add(8).cast::<i32>();
                                                                                    l203 as u32
                                                                                };
                                                                                V220::PrimU32(e220)
                                                                            }
                                                                            11 => {
                                                                                let e220 = {
                                                                                    let l204 = *base.add(8).cast::<i64>();
                                                                                    l204 as u64
                                                                                };
                                                                                V220::PrimU64(e220)
                                                                            }
                                                                            12 => {
                                                                                let e220 = {
                                                                                    let l205 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l205 as i8
                                                                                };
                                                                                V220::PrimS8(e220)
                                                                            }
                                                                            13 => {
                                                                                let e220 = {
                                                                                    let l206 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l206 as i16
                                                                                };
                                                                                V220::PrimS16(e220)
                                                                            }
                                                                            14 => {
                                                                                let e220 = {
                                                                                    let l207 = *base.add(8).cast::<i32>();
                                                                                    l207
                                                                                };
                                                                                V220::PrimS32(e220)
                                                                            }
                                                                            15 => {
                                                                                let e220 = {
                                                                                    let l208 = *base.add(8).cast::<i64>();
                                                                                    l208
                                                                                };
                                                                                V220::PrimS64(e220)
                                                                            }
                                                                            16 => {
                                                                                let e220 = {
                                                                                    let l209 = *base.add(8).cast::<f32>();
                                                                                    l209
                                                                                };
                                                                                V220::PrimFloat32(e220)
                                                                            }
                                                                            17 => {
                                                                                let e220 = {
                                                                                    let l210 = *base.add(8).cast::<f64>();
                                                                                    l210
                                                                                };
                                                                                V220::PrimFloat64(e220)
                                                                            }
                                                                            18 => {
                                                                                let e220 = {
                                                                                    let l211 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l211 as u32)
                                                                                };
                                                                                V220::PrimChar(e220)
                                                                            }
                                                                            19 => {
                                                                                let e220 = {
                                                                                    let l212 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l212 as u8)
                                                                                };
                                                                                V220::PrimBool(e220)
                                                                            }
                                                                            20 => {
                                                                                let e220 = {
                                                                                    let l213 = *base.add(8).cast::<*mut u8>();
                                                                                    let l214 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len215 = l214;
                                                                                    let bytes215 = _rt::Vec::from_raw_parts(
                                                                                        l213.cast(),
                                                                                        len215,
                                                                                        len215,
                                                                                    );
                                                                                    _rt::string_lift(bytes215)
                                                                                };
                                                                                V220::PrimString(e220)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e220 = {
                                                                                    let l216 = *base.add(8).cast::<*mut u8>();
                                                                                    let l217 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len218 = l217;
                                                                                    let bytes218 = _rt::Vec::from_raw_parts(
                                                                                        l216.cast(),
                                                                                        len218,
                                                                                        len218,
                                                                                    );
                                                                                    let l219 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes218),
                                                                                        },
                                                                                        l219 as u64,
                                                                                    )
                                                                                };
                                                                                V220::Handle(e220)
                                                                            }
                                                                        };
                                                                        v220
                                                                    };
                                                                    result221.push(e221);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base221,
                                                                    len221 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result221,
                                                                }
                                                            };
                                                            result222.push(e222);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base222,
                                                            len222 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l223 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l224 = *base
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len225 = l224;
                                                        let bytes225 = _rt::Vec::from_raw_parts(
                                                            l223.cast(),
                                                            len225,
                                                            len225,
                                                        );
                                                        let l226 = *base
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l227 = *base
                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len228 = l227;
                                                        let bytes228 = _rt::Vec::from_raw_parts(
                                                            l226.cast(),
                                                            len228,
                                                            len228,
                                                        );
                                                        let l229 = *base
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l230 = *base
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base234 = l229;
                                                        let len234 = l230;
                                                        let mut result234 = _rt::Vec::with_capacity(len234);
                                                        for i in 0..len234 {
                                                            let base = base234
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e234 = {
                                                                let l231 = *base.add(0).cast::<*mut u8>();
                                                                let l232 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len233 = l232;
                                                                let bytes233 = _rt::Vec::from_raw_parts(
                                                                    l231.cast(),
                                                                    len233,
                                                                    len233,
                                                                );
                                                                _rt::string_lift(bytes233)
                                                            };
                                                            result234.push(e234);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base234,
                                                            len234 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l235 = *base
                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l236 = *base
                                                            .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base268 = l235;
                                                        let len268 = l236;
                                                        let mut result268 = _rt::Vec::with_capacity(len268);
                                                        for i in 0..len268 {
                                                            let base = base268
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e268 = {
                                                                let l237 = *base.add(0).cast::<*mut u8>();
                                                                let l238 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base267 = l237;
                                                                let len267 = l238;
                                                                let mut result267 = _rt::Vec::with_capacity(len267);
                                                                for i in 0..len267 {
                                                                    let base = base267
                                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                    let e267 = {
                                                                        let l239 = i32::from(*base.add(0).cast::<u8>());
                                                                        let v266 = match l239 {
                                                                            0 => {
                                                                                let e266 = {
                                                                                    let l240 = *base.add(8).cast::<*mut u8>();
                                                                                    let l241 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len242 = l241;
                                                                                    let bytes242 = _rt::Vec::from_raw_parts(
                                                                                        l240.cast(),
                                                                                        len242,
                                                                                        len242,
                                                                                    );
                                                                                    let l243 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    let l244 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>();
                                                                                    let l245 = i32::from(
                                                                                        *base
                                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l249 = i32::from(
                                                                                        *base
                                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l251 = *base
                                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l252 = *base
                                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base261 = l251;
                                                                                    let len261 = l252;
                                                                                    let mut result261 = _rt::Vec::with_capacity(len261);
                                                                                    for i in 0..len261 {
                                                                                        let base = base261
                                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e261 = {
                                                                                            let l253 = *base.add(0).cast::<*mut u8>();
                                                                                            let l254 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len255 = l254;
                                                                                            let bytes255 = _rt::Vec::from_raw_parts(
                                                                                                l253.cast(),
                                                                                                len255,
                                                                                                len255,
                                                                                            );
                                                                                            let l256 = i32::from(
                                                                                                *base
                                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            use super::super::super::golem::api::context::AttributeValue as V260;
                                                                                            let v260 = match l256 {
                                                                                                n => {
                                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                                    let e260 = {
                                                                                                        let l257 = *base
                                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<*mut u8>();
                                                                                                        let l258 = *base
                                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<usize>();
                                                                                                        let len259 = l258;
                                                                                                        let bytes259 = _rt::Vec::from_raw_parts(
                                                                                                            l257.cast(),
                                                                                                            len259,
                                                                                                            len259,
                                                                                                        );
                                                                                                        _rt::string_lift(bytes259)
                                                                                                    };
                                                                                                    V260::String(e260)
                                                                                                }
                                                                                            };
                                                                                            super::super::super::golem::api::context::Attribute {
                                                                                                key: _rt::string_lift(bytes255),
                                                                                                value: v260,
                                                                                            }
                                                                                        };
                                                                                        result261.push(e261);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base261,
                                                                                        len261 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let l262 = i32::from(
                                                                                        *base
                                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    LocalSpanData {
                                                                                        span_id: _rt::string_lift(bytes242),
                                                                                        start: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                                            seconds: l243 as u64,
                                                                                            nanoseconds: l244 as u32,
                                                                                        },
                                                                                        parent: match l245 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l246 = *base
                                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<*mut u8>();
                                                                                                    let l247 = *base
                                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<usize>();
                                                                                                    let len248 = l247;
                                                                                                    let bytes248 = _rt::Vec::from_raw_parts(
                                                                                                        l246.cast(),
                                                                                                        len248,
                                                                                                        len248,
                                                                                                    );
                                                                                                    _rt::string_lift(bytes248)
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        linked_context: match l249 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l250 = *base
                                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i64>();
                                                                                                    l250 as u64
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        attributes: result261,
                                                                                        inherited: _rt::bool_lift(l262 as u8),
                                                                                    }
                                                                                };
                                                                                SpanData::LocalSpan(e266)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e266 = {
                                                                                    let l263 = *base.add(8).cast::<*mut u8>();
                                                                                    let l264 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len265 = l264;
                                                                                    let bytes265 = _rt::Vec::from_raw_parts(
                                                                                        l263.cast(),
                                                                                        len265,
                                                                                        len265,
                                                                                    );
                                                                                    ExternalSpanData {
                                                                                        span_id: _rt::string_lift(bytes265),
                                                                                    }
                                                                                };
                                                                                SpanData::ExternalSpan(e266)
                                                                            }
                                                                        };
                                                                        v266
                                                                    };
                                                                    result267.push(e267);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base267,
                                                                    len267 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                result267
                                                            };
                                                            result268.push(e268);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base268,
                                                            len268 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l167 as u64,
                                                                nanoseconds: l168 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes171),
                                                            request: result222,
                                                            idempotency_key: _rt::string_lift(bytes225),
                                                            trace_id: _rt::string_lift(bytes228),
                                                            trace_states: result234,
                                                            invocation_context: result268,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e594)
                                                }
                                                3 => {
                                                    let e594 = {
                                                        let l269 = *base.add(16).cast::<i64>();
                                                        let l270 = *base.add(24).cast::<i32>();
                                                        let l271 = i32::from(*base.add(32).cast::<u8>());
                                                        let l320 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l269 as u64,
                                                                nanoseconds: l270 as u32,
                                                            },
                                                            response: match l271 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l272 = *base
                                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l273 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base319 = l272;
                                                                        let len319 = l273;
                                                                        let mut result319 = _rt::Vec::with_capacity(len319);
                                                                        for i in 0..len319 {
                                                                            let base = base319
                                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e319 = {
                                                                                let l274 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::golem::rpc::types::WitNode as V318;
                                                                                let v318 = match l274 {
                                                                                    0 => {
                                                                                        let e318 = {
                                                                                            let l275 = *base.add(8).cast::<*mut u8>();
                                                                                            let l276 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len277 = l276;
                                                                                            _rt::Vec::from_raw_parts(l275.cast(), len277, len277)
                                                                                        };
                                                                                        V318::RecordValue(e318)
                                                                                    }
                                                                                    1 => {
                                                                                        let e318 = {
                                                                                            let l278 = *base.add(8).cast::<i32>();
                                                                                            let l279 = i32::from(*base.add(12).cast::<u8>());
                                                                                            (
                                                                                                l278 as u32,
                                                                                                match l279 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l280 = *base.add(16).cast::<i32>();
                                                                                                            l280
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            )
                                                                                        };
                                                                                        V318::VariantValue(e318)
                                                                                    }
                                                                                    2 => {
                                                                                        let e318 = {
                                                                                            let l281 = *base.add(8).cast::<i32>();
                                                                                            l281 as u32
                                                                                        };
                                                                                        V318::EnumValue(e318)
                                                                                    }
                                                                                    3 => {
                                                                                        let e318 = {
                                                                                            let l282 = *base.add(8).cast::<*mut u8>();
                                                                                            let l283 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base285 = l282;
                                                                                            let len285 = l283;
                                                                                            let mut result285 = _rt::Vec::with_capacity(len285);
                                                                                            for i in 0..len285 {
                                                                                                let base = base285.add(i * 1);
                                                                                                let e285 = {
                                                                                                    let l284 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    _rt::bool_lift(l284 as u8)
                                                                                                };
                                                                                                result285.push(e285);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base285, len285 * 1, 1);
                                                                                            result285
                                                                                        };
                                                                                        V318::FlagsValue(e318)
                                                                                    }
                                                                                    4 => {
                                                                                        let e318 = {
                                                                                            let l286 = *base.add(8).cast::<*mut u8>();
                                                                                            let l287 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len288 = l287;
                                                                                            _rt::Vec::from_raw_parts(l286.cast(), len288, len288)
                                                                                        };
                                                                                        V318::TupleValue(e318)
                                                                                    }
                                                                                    5 => {
                                                                                        let e318 = {
                                                                                            let l289 = *base.add(8).cast::<*mut u8>();
                                                                                            let l290 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len291 = l290;
                                                                                            _rt::Vec::from_raw_parts(l289.cast(), len291, len291)
                                                                                        };
                                                                                        V318::ListValue(e318)
                                                                                    }
                                                                                    6 => {
                                                                                        let e318 = {
                                                                                            let l292 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l292 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l293 = *base.add(12).cast::<i32>();
                                                                                                        l293
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V318::OptionValue(e318)
                                                                                    }
                                                                                    7 => {
                                                                                        let e318 = {
                                                                                            let l294 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l294 {
                                                                                                0 => {
                                                                                                    let e = {
                                                                                                        let l295 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l295 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l296 = *base.add(16).cast::<i32>();
                                                                                                                    l296
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Ok(e)
                                                                                                }
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l297 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l297 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l298 = *base.add(16).cast::<i32>();
                                                                                                                    l298
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Err(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V318::ResultValue(e318)
                                                                                    }
                                                                                    8 => {
                                                                                        let e318 = {
                                                                                            let l299 = i32::from(*base.add(8).cast::<u8>());
                                                                                            l299 as u8
                                                                                        };
                                                                                        V318::PrimU8(e318)
                                                                                    }
                                                                                    9 => {
                                                                                        let e318 = {
                                                                                            let l300 = i32::from(*base.add(8).cast::<u16>());
                                                                                            l300 as u16
                                                                                        };
                                                                                        V318::PrimU16(e318)
                                                                                    }
                                                                                    10 => {
                                                                                        let e318 = {
                                                                                            let l301 = *base.add(8).cast::<i32>();
                                                                                            l301 as u32
                                                                                        };
                                                                                        V318::PrimU32(e318)
                                                                                    }
                                                                                    11 => {
                                                                                        let e318 = {
                                                                                            let l302 = *base.add(8).cast::<i64>();
                                                                                            l302 as u64
                                                                                        };
                                                                                        V318::PrimU64(e318)
                                                                                    }
                                                                                    12 => {
                                                                                        let e318 = {
                                                                                            let l303 = i32::from(*base.add(8).cast::<i8>());
                                                                                            l303 as i8
                                                                                        };
                                                                                        V318::PrimS8(e318)
                                                                                    }
                                                                                    13 => {
                                                                                        let e318 = {
                                                                                            let l304 = i32::from(*base.add(8).cast::<i16>());
                                                                                            l304 as i16
                                                                                        };
                                                                                        V318::PrimS16(e318)
                                                                                    }
                                                                                    14 => {
                                                                                        let e318 = {
                                                                                            let l305 = *base.add(8).cast::<i32>();
                                                                                            l305
                                                                                        };
                                                                                        V318::PrimS32(e318)
                                                                                    }
                                                                                    15 => {
                                                                                        let e318 = {
                                                                                            let l306 = *base.add(8).cast::<i64>();
                                                                                            l306
                                                                                        };
                                                                                        V318::PrimS64(e318)
                                                                                    }
                                                                                    16 => {
                                                                                        let e318 = {
                                                                                            let l307 = *base.add(8).cast::<f32>();
                                                                                            l307
                                                                                        };
                                                                                        V318::PrimFloat32(e318)
                                                                                    }
                                                                                    17 => {
                                                                                        let e318 = {
                                                                                            let l308 = *base.add(8).cast::<f64>();
                                                                                            l308
                                                                                        };
                                                                                        V318::PrimFloat64(e318)
                                                                                    }
                                                                                    18 => {
                                                                                        let e318 = {
                                                                                            let l309 = *base.add(8).cast::<i32>();
                                                                                            _rt::char_lift(l309 as u32)
                                                                                        };
                                                                                        V318::PrimChar(e318)
                                                                                    }
                                                                                    19 => {
                                                                                        let e318 = {
                                                                                            let l310 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l310 as u8)
                                                                                        };
                                                                                        V318::PrimBool(e318)
                                                                                    }
                                                                                    20 => {
                                                                                        let e318 = {
                                                                                            let l311 = *base.add(8).cast::<*mut u8>();
                                                                                            let l312 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len313 = l312;
                                                                                            let bytes313 = _rt::Vec::from_raw_parts(
                                                                                                l311.cast(),
                                                                                                len313,
                                                                                                len313,
                                                                                            );
                                                                                            _rt::string_lift(bytes313)
                                                                                        };
                                                                                        V318::PrimString(e318)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                        let e318 = {
                                                                                            let l314 = *base.add(8).cast::<*mut u8>();
                                                                                            let l315 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len316 = l315;
                                                                                            let bytes316 = _rt::Vec::from_raw_parts(
                                                                                                l314.cast(),
                                                                                                len316,
                                                                                                len316,
                                                                                            );
                                                                                            let l317 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            (
                                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                                    value: _rt::string_lift(bytes316),
                                                                                                },
                                                                                                l317 as u64,
                                                                                            )
                                                                                        };
                                                                                        V318::Handle(e318)
                                                                                    }
                                                                                };
                                                                                v318
                                                                            };
                                                                            result319.push(e319);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base319,
                                                                            len319 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        super::super::super::golem::rpc::types::WitValue {
                                                                            nodes: result319,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            consumed_fuel: l320,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e594)
                                                }
                                                4 => {
                                                    let e594 = {
                                                        let l321 = *base.add(16).cast::<i64>();
                                                        let l322 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l321 as u64,
                                                            nanoseconds: l322 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e594)
                                                }
                                                5 => {
                                                    let e594 = {
                                                        let l323 = *base.add(16).cast::<i64>();
                                                        let l324 = *base.add(24).cast::<i32>();
                                                        let l325 = *base.add(32).cast::<*mut u8>();
                                                        let l326 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len327 = l326;
                                                        let bytes327 = _rt::Vec::from_raw_parts(
                                                            l325.cast(),
                                                            len327,
                                                            len327,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l323 as u64,
                                                                nanoseconds: l324 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes327),
                                                        }
                                                    };
                                                    OplogEntry::Error(e594)
                                                }
                                                6 => {
                                                    let e594 = {
                                                        let l328 = *base.add(16).cast::<i64>();
                                                        let l329 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l328 as u64,
                                                            nanoseconds: l329 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e594)
                                                }
                                                7 => {
                                                    let e594 = {
                                                        let l330 = *base.add(16).cast::<i64>();
                                                        let l331 = *base.add(24).cast::<i32>();
                                                        let l332 = *base.add(32).cast::<i64>();
                                                        let l333 = *base.add(40).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l330 as u64,
                                                                nanoseconds: l331 as u32,
                                                            },
                                                            start: l332 as u64,
                                                            end: l333 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e594)
                                                }
                                                8 => {
                                                    let e594 = {
                                                        let l334 = *base.add(16).cast::<i64>();
                                                        let l335 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l334 as u64,
                                                            nanoseconds: l335 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e594)
                                                }
                                                9 => {
                                                    let e594 = {
                                                        let l336 = *base.add(16).cast::<i64>();
                                                        let l337 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l336 as u64,
                                                            nanoseconds: l337 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e594)
                                                }
                                                10 => {
                                                    let e594 = {
                                                        let l338 = *base.add(16).cast::<i64>();
                                                        let l339 = *base.add(24).cast::<i32>();
                                                        let l340 = *base.add(32).cast::<i32>();
                                                        let l341 = *base.add(40).cast::<i64>();
                                                        let l342 = *base.add(48).cast::<i64>();
                                                        let l343 = *base.add(56).cast::<f64>();
                                                        let l344 = i32::from(*base.add(64).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l338 as u64,
                                                                nanoseconds: l339 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l340 as u32,
                                                                min_delay: l341 as u64,
                                                                max_delay: l342 as u64,
                                                                multiplier: l343,
                                                                max_jitter_factor: match l344 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l345 = *base.add(72).cast::<f64>();
                                                                            l345
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e594)
                                                }
                                                11 => {
                                                    let e594 = {
                                                        let l346 = *base.add(16).cast::<i64>();
                                                        let l347 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l346 as u64,
                                                            nanoseconds: l347 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e594)
                                                }
                                                12 => {
                                                    let e594 = {
                                                        let l348 = *base.add(16).cast::<i64>();
                                                        let l349 = *base.add(24).cast::<i32>();
                                                        let l350 = *base.add(32).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l348 as u64,
                                                                nanoseconds: l349 as u32,
                                                            },
                                                            begin_index: l350 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e594)
                                                }
                                                13 => {
                                                    let e594 = {
                                                        let l351 = *base.add(16).cast::<i64>();
                                                        let l352 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l351 as u64,
                                                            nanoseconds: l352 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e594)
                                                }
                                                14 => {
                                                    let e594 = {
                                                        let l353 = *base.add(16).cast::<i64>();
                                                        let l354 = *base.add(24).cast::<i32>();
                                                        let l355 = *base.add(32).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l353 as u64,
                                                                nanoseconds: l354 as u32,
                                                            },
                                                            begin_index: l355 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e594)
                                                }
                                                15 => {
                                                    let e594 = {
                                                        let l356 = *base.add(16).cast::<i64>();
                                                        let l357 = *base.add(24).cast::<i32>();
                                                        let l358 = i32::from(*base.add(32).cast::<u8>());
                                                        let v418 = match l358 {
                                                            0 => {
                                                                let e418 = {
                                                                    let l359 = *base.add(40).cast::<*mut u8>();
                                                                    let l360 = *base
                                                                        .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len361 = l360;
                                                                    let bytes361 = _rt::Vec::from_raw_parts(
                                                                        l359.cast(),
                                                                        len361,
                                                                        len361,
                                                                    );
                                                                    let l362 = *base
                                                                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l363 = *base
                                                                        .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len364 = l363;
                                                                    let bytes364 = _rt::Vec::from_raw_parts(
                                                                        l362.cast(),
                                                                        len364,
                                                                        len364,
                                                                    );
                                                                    let l365 = i32::from(
                                                                        *base
                                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes361),
                                                                        function_name: _rt::string_lift(bytes364),
                                                                        input: match l365 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l366 = *base
                                                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l367 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base416 = l366;
                                                                                    let len416 = l367;
                                                                                    let mut result416 = _rt::Vec::with_capacity(len416);
                                                                                    for i in 0..len416 {
                                                                                        let base = base416
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e416 = {
                                                                                            let l368 = *base.add(0).cast::<*mut u8>();
                                                                                            let l369 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base415 = l368;
                                                                                            let len415 = l369;
                                                                                            let mut result415 = _rt::Vec::with_capacity(len415);
                                                                                            for i in 0..len415 {
                                                                                                let base = base415
                                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                                let e415 = {
                                                                                                    let l370 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V414;
                                                                                                    let v414 = match l370 {
                                                                                                        0 => {
                                                                                                            let e414 = {
                                                                                                                let l371 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l372 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len373 = l372;
                                                                                                                _rt::Vec::from_raw_parts(l371.cast(), len373, len373)
                                                                                                            };
                                                                                                            V414::RecordValue(e414)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e414 = {
                                                                                                                let l374 = *base.add(8).cast::<i32>();
                                                                                                                let l375 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l374 as u32,
                                                                                                                    match l375 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l376 = *base.add(16).cast::<i32>();
                                                                                                                                l376
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V414::VariantValue(e414)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e414 = {
                                                                                                                let l377 = *base.add(8).cast::<i32>();
                                                                                                                l377 as u32
                                                                                                            };
                                                                                                            V414::EnumValue(e414)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e414 = {
                                                                                                                let l378 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l379 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let base381 = l378;
                                                                                                                let len381 = l379;
                                                                                                                let mut result381 = _rt::Vec::with_capacity(len381);
                                                                                                                for i in 0..len381 {
                                                                                                                    let base = base381.add(i * 1);
                                                                                                                    let e381 = {
                                                                                                                        let l380 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l380 as u8)
                                                                                                                    };
                                                                                                                    result381.push(e381);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base381, len381 * 1, 1);
                                                                                                                result381
                                                                                                            };
                                                                                                            V414::FlagsValue(e414)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e414 = {
                                                                                                                let l382 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l383 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len384 = l383;
                                                                                                                _rt::Vec::from_raw_parts(l382.cast(), len384, len384)
                                                                                                            };
                                                                                                            V414::TupleValue(e414)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e414 = {
                                                                                                                let l385 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l386 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len387 = l386;
                                                                                                                _rt::Vec::from_raw_parts(l385.cast(), len387, len387)
                                                                                                            };
                                                                                                            V414::ListValue(e414)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e414 = {
                                                                                                                let l388 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l388 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l389 = *base.add(12).cast::<i32>();
                                                                                                                            l389
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V414::OptionValue(e414)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e414 = {
                                                                                                                let l390 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l390 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l391 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l391 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l392 = *base.add(16).cast::<i32>();
                                                                                                                                        l392
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l393 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l393 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l394 = *base.add(16).cast::<i32>();
                                                                                                                                        l394
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V414::ResultValue(e414)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e414 = {
                                                                                                                let l395 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l395 as u8
                                                                                                            };
                                                                                                            V414::PrimU8(e414)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e414 = {
                                                                                                                let l396 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l396 as u16
                                                                                                            };
                                                                                                            V414::PrimU16(e414)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e414 = {
                                                                                                                let l397 = *base.add(8).cast::<i32>();
                                                                                                                l397 as u32
                                                                                                            };
                                                                                                            V414::PrimU32(e414)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e414 = {
                                                                                                                let l398 = *base.add(8).cast::<i64>();
                                                                                                                l398 as u64
                                                                                                            };
                                                                                                            V414::PrimU64(e414)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e414 = {
                                                                                                                let l399 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l399 as i8
                                                                                                            };
                                                                                                            V414::PrimS8(e414)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e414 = {
                                                                                                                let l400 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l400 as i16
                                                                                                            };
                                                                                                            V414::PrimS16(e414)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e414 = {
                                                                                                                let l401 = *base.add(8).cast::<i32>();
                                                                                                                l401
                                                                                                            };
                                                                                                            V414::PrimS32(e414)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e414 = {
                                                                                                                let l402 = *base.add(8).cast::<i64>();
                                                                                                                l402
                                                                                                            };
                                                                                                            V414::PrimS64(e414)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e414 = {
                                                                                                                let l403 = *base.add(8).cast::<f32>();
                                                                                                                l403
                                                                                                            };
                                                                                                            V414::PrimFloat32(e414)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e414 = {
                                                                                                                let l404 = *base.add(8).cast::<f64>();
                                                                                                                l404
                                                                                                            };
                                                                                                            V414::PrimFloat64(e414)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e414 = {
                                                                                                                let l405 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l405 as u32)
                                                                                                            };
                                                                                                            V414::PrimChar(e414)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e414 = {
                                                                                                                let l406 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l406 as u8)
                                                                                                            };
                                                                                                            V414::PrimBool(e414)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e414 = {
                                                                                                                let l407 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l408 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len409 = l408;
                                                                                                                let bytes409 = _rt::Vec::from_raw_parts(
                                                                                                                    l407.cast(),
                                                                                                                    len409,
                                                                                                                    len409,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes409)
                                                                                                            };
                                                                                                            V414::PrimString(e414)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e414 = {
                                                                                                                let l410 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l411 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len412 = l411;
                                                                                                                let bytes412 = _rt::Vec::from_raw_parts(
                                                                                                                    l410.cast(),
                                                                                                                    len412,
                                                                                                                    len412,
                                                                                                                );
                                                                                                                let l413 = *base
                                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes412),
                                                                                                                    },
                                                                                                                    l413 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V414::Handle(e414)
                                                                                                        }
                                                                                                    };
                                                                                                    v414
                                                                                                };
                                                                                                result415.push(e415);
                                                                                            }
                                                                                            _rt::cabi_dealloc(
                                                                                                base415,
                                                                                                len415 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                                8,
                                                                                            );
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result415,
                                                                                            }
                                                                                        };
                                                                                        result416.push(e416);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base416,
                                                                                        len416 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    result416
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                AgentInvocation::ExportedFunction(e418)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e418 = {
                                                                    let l417 = *base.add(40).cast::<i64>();
                                                                    l417 as u64
                                                                };
                                                                AgentInvocation::ManualUpdate(e418)
                                                            }
                                                        };
                                                        PendingAgentInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l356 as u64,
                                                                nanoseconds: l357 as u32,
                                                            },
                                                            invocation: v418,
                                                        }
                                                    };
                                                    OplogEntry::PendingAgentInvocation(e594)
                                                }
                                                16 => {
                                                    let e594 = {
                                                        let l419 = *base.add(16).cast::<i64>();
                                                        let l420 = *base.add(24).cast::<i32>();
                                                        let l421 = *base.add(32).cast::<i64>();
                                                        let l422 = i32::from(*base.add(40).cast::<u8>());
                                                        let v426 = match l422 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e426 = {
                                                                    let l423 = *base
                                                                        .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l424 = *base
                                                                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len425 = l424;
                                                                    _rt::Vec::from_raw_parts(l423.cast(), len425, len425)
                                                                };
                                                                UpdateDescription::SnapshotBased(e426)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l419 as u64,
                                                                nanoseconds: l420 as u32,
                                                            },
                                                            target_version: l421 as u64,
                                                            update_description: v426,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e594)
                                                }
                                                17 => {
                                                    let e594 = {
                                                        let l427 = *base.add(16).cast::<i64>();
                                                        let l428 = *base.add(24).cast::<i32>();
                                                        let l429 = *base.add(32).cast::<i64>();
                                                        let l430 = *base.add(40).cast::<i64>();
                                                        let l431 = *base.add(48).cast::<*mut u8>();
                                                        let l432 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base448 = l431;
                                                        let len448 = l432;
                                                        let mut result448 = _rt::Vec::with_capacity(len448);
                                                        for i in 0..len448 {
                                                            let base = base448
                                                                .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                            let e448 = {
                                                                let l433 = *base.add(0).cast::<*mut u8>();
                                                                let l434 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len435 = l434;
                                                                let bytes435 = _rt::Vec::from_raw_parts(
                                                                    l433.cast(),
                                                                    len435,
                                                                    len435,
                                                                );
                                                                let l436 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l437 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len438 = l437;
                                                                let bytes438 = _rt::Vec::from_raw_parts(
                                                                    l436.cast(),
                                                                    len438,
                                                                    len438,
                                                                );
                                                                let l439 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l440 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base447 = l439;
                                                                let len447 = l440;
                                                                let mut result447 = _rt::Vec::with_capacity(len447);
                                                                for i in 0..len447 {
                                                                    let base = base447
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e447 = {
                                                                        let l441 = *base.add(0).cast::<*mut u8>();
                                                                        let l442 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len443 = l442;
                                                                        let bytes443 = _rt::Vec::from_raw_parts(
                                                                            l441.cast(),
                                                                            len443,
                                                                            len443,
                                                                        );
                                                                        let l444 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l445 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len446 = l445;
                                                                        let bytes446 = _rt::Vec::from_raw_parts(
                                                                            l444.cast(),
                                                                            len446,
                                                                            len446,
                                                                        );
                                                                        (_rt::string_lift(bytes443), _rt::string_lift(bytes446))
                                                                    };
                                                                    result447.push(e447);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base447,
                                                                    len447 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    name: _rt::string_lift(bytes435),
                                                                    version: _rt::string_lift(bytes438),
                                                                    parameters: result447,
                                                                }
                                                            };
                                                            result448.push(e448);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base448,
                                                            len448 * (6 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l427 as u64,
                                                                nanoseconds: l428 as u32,
                                                            },
                                                            target_version: l429 as u64,
                                                            new_component_size: l430 as u64,
                                                            new_active_plugins: result448,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e594)
                                                }
                                                18 => {
                                                    let e594 = {
                                                        let l449 = *base.add(16).cast::<i64>();
                                                        let l450 = *base.add(24).cast::<i32>();
                                                        let l451 = *base.add(32).cast::<i64>();
                                                        let l452 = i32::from(*base.add(40).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l449 as u64,
                                                                nanoseconds: l450 as u32,
                                                            },
                                                            target_version: l451 as u64,
                                                            details: match l452 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l453 = *base
                                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l454 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len455 = l454;
                                                                        let bytes455 = _rt::Vec::from_raw_parts(
                                                                            l453.cast(),
                                                                            len455,
                                                                            len455,
                                                                        );
                                                                        _rt::string_lift(bytes455)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e594)
                                                }
                                                19 => {
                                                    let e594 = {
                                                        let l456 = *base.add(16).cast::<i64>();
                                                        let l457 = *base.add(24).cast::<i32>();
                                                        let l458 = *base.add(32).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l456 as u64,
                                                                nanoseconds: l457 as u32,
                                                            },
                                                            delta: l458 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e594)
                                                }
                                                20 => {
                                                    let e594 = {
                                                        let l459 = *base.add(16).cast::<i64>();
                                                        let l460 = *base.add(24).cast::<i32>();
                                                        let l461 = *base.add(32).cast::<i64>();
                                                        let l462 = *base.add(40).cast::<*mut u8>();
                                                        let l463 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len464 = l463;
                                                        let bytes464 = _rt::Vec::from_raw_parts(
                                                            l462.cast(),
                                                            len464,
                                                            len464,
                                                        );
                                                        let l465 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l466 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len467 = l466;
                                                        let bytes467 = _rt::Vec::from_raw_parts(
                                                            l465.cast(),
                                                            len467,
                                                            len467,
                                                        );
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l459 as u64,
                                                                nanoseconds: l460 as u32,
                                                            },
                                                            resource_id: l461 as u64,
                                                            name: _rt::string_lift(bytes464),
                                                            owner: _rt::string_lift(bytes467),
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e594)
                                                }
                                                21 => {
                                                    let e594 = {
                                                        let l468 = *base.add(16).cast::<i64>();
                                                        let l469 = *base.add(24).cast::<i32>();
                                                        let l470 = *base.add(32).cast::<i64>();
                                                        let l471 = *base.add(40).cast::<*mut u8>();
                                                        let l472 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len473 = l472;
                                                        let bytes473 = _rt::Vec::from_raw_parts(
                                                            l471.cast(),
                                                            len473,
                                                            len473,
                                                        );
                                                        let l474 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l475 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len476 = l475;
                                                        let bytes476 = _rt::Vec::from_raw_parts(
                                                            l474.cast(),
                                                            len476,
                                                            len476,
                                                        );
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l468 as u64,
                                                                nanoseconds: l469 as u32,
                                                            },
                                                            resource_id: l470 as u64,
                                                            name: _rt::string_lift(bytes473),
                                                            owner: _rt::string_lift(bytes476),
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e594)
                                                }
                                                22 => {
                                                    let e594 = {
                                                        let l477 = *base.add(16).cast::<i64>();
                                                        let l478 = *base.add(24).cast::<i32>();
                                                        let l479 = i32::from(*base.add(32).cast::<u8>());
                                                        let l480 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l481 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len482 = l481;
                                                        let bytes482 = _rt::Vec::from_raw_parts(
                                                            l480.cast(),
                                                            len482,
                                                            len482,
                                                        );
                                                        let l483 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l484 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len485 = l484;
                                                        let bytes485 = _rt::Vec::from_raw_parts(
                                                            l483.cast(),
                                                            len485,
                                                            len485,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l477 as u64,
                                                                nanoseconds: l478 as u32,
                                                            },
                                                            level: LogLevel::_lift(l479 as u8),
                                                            context: _rt::string_lift(bytes482),
                                                            message: _rt::string_lift(bytes485),
                                                        }
                                                    };
                                                    OplogEntry::Log(e594)
                                                }
                                                23 => {
                                                    let e594 = {
                                                        let l486 = *base.add(16).cast::<i64>();
                                                        let l487 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l486 as u64,
                                                            nanoseconds: l487 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e594)
                                                }
                                                24 => {
                                                    let e594 = {
                                                        let l488 = *base.add(16).cast::<i64>();
                                                        let l489 = *base.add(24).cast::<i32>();
                                                        let l490 = *base.add(32).cast::<*mut u8>();
                                                        let l491 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len492 = l491;
                                                        let bytes492 = _rt::Vec::from_raw_parts(
                                                            l490.cast(),
                                                            len492,
                                                            len492,
                                                        );
                                                        let l493 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l494 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len495 = l494;
                                                        let bytes495 = _rt::Vec::from_raw_parts(
                                                            l493.cast(),
                                                            len495,
                                                            len495,
                                                        );
                                                        let l496 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l497 = *base
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base504 = l496;
                                                        let len504 = l497;
                                                        let mut result504 = _rt::Vec::with_capacity(len504);
                                                        for i in 0..len504 {
                                                            let base = base504
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e504 = {
                                                                let l498 = *base.add(0).cast::<*mut u8>();
                                                                let l499 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len500 = l499;
                                                                let bytes500 = _rt::Vec::from_raw_parts(
                                                                    l498.cast(),
                                                                    len500,
                                                                    len500,
                                                                );
                                                                let l501 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l502 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len503 = l502;
                                                                let bytes503 = _rt::Vec::from_raw_parts(
                                                                    l501.cast(),
                                                                    len503,
                                                                    len503,
                                                                );
                                                                (_rt::string_lift(bytes500), _rt::string_lift(bytes503))
                                                            };
                                                            result504.push(e504);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base504,
                                                            len504 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l488 as u64,
                                                                nanoseconds: l489 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                name: _rt::string_lift(bytes492),
                                                                version: _rt::string_lift(bytes495),
                                                                parameters: result504,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e594)
                                                }
                                                25 => {
                                                    let e594 = {
                                                        let l505 = *base.add(16).cast::<i64>();
                                                        let l506 = *base.add(24).cast::<i32>();
                                                        let l507 = *base.add(32).cast::<*mut u8>();
                                                        let l508 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len509 = l508;
                                                        let bytes509 = _rt::Vec::from_raw_parts(
                                                            l507.cast(),
                                                            len509,
                                                            len509,
                                                        );
                                                        let l510 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l511 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len512 = l511;
                                                        let bytes512 = _rt::Vec::from_raw_parts(
                                                            l510.cast(),
                                                            len512,
                                                            len512,
                                                        );
                                                        let l513 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l514 = *base
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base521 = l513;
                                                        let len521 = l514;
                                                        let mut result521 = _rt::Vec::with_capacity(len521);
                                                        for i in 0..len521 {
                                                            let base = base521
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e521 = {
                                                                let l515 = *base.add(0).cast::<*mut u8>();
                                                                let l516 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len517 = l516;
                                                                let bytes517 = _rt::Vec::from_raw_parts(
                                                                    l515.cast(),
                                                                    len517,
                                                                    len517,
                                                                );
                                                                let l518 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l519 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len520 = l519;
                                                                let bytes520 = _rt::Vec::from_raw_parts(
                                                                    l518.cast(),
                                                                    len520,
                                                                    len520,
                                                                );
                                                                (_rt::string_lift(bytes517), _rt::string_lift(bytes520))
                                                            };
                                                            result521.push(e521);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base521,
                                                            len521 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l505 as u64,
                                                                nanoseconds: l506 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                name: _rt::string_lift(bytes509),
                                                                version: _rt::string_lift(bytes512),
                                                                parameters: result521,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e594)
                                                }
                                                26 => {
                                                    let e594 = {
                                                        let l522 = *base.add(16).cast::<i64>();
                                                        let l523 = *base.add(24).cast::<i32>();
                                                        let l524 = *base.add(32).cast::<i64>();
                                                        let l525 = *base.add(40).cast::<i64>();
                                                        RevertParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l522 as u64,
                                                                nanoseconds: l523 as u32,
                                                            },
                                                            start: l524 as u64,
                                                            end: l525 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Revert(e594)
                                                }
                                                27 => {
                                                    let e594 = {
                                                        let l526 = *base.add(16).cast::<i64>();
                                                        let l527 = *base.add(24).cast::<i32>();
                                                        let l528 = *base.add(32).cast::<*mut u8>();
                                                        let l529 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len530 = l529;
                                                        let bytes530 = _rt::Vec::from_raw_parts(
                                                            l528.cast(),
                                                            len530,
                                                            len530,
                                                        );
                                                        CancelInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l526 as u64,
                                                                nanoseconds: l527 as u32,
                                                            },
                                                            idempotency_key: _rt::string_lift(bytes530),
                                                        }
                                                    };
                                                    OplogEntry::CancelInvocation(e594)
                                                }
                                                28 => {
                                                    let e594 = {
                                                        let l531 = *base.add(16).cast::<i64>();
                                                        let l532 = *base.add(24).cast::<i32>();
                                                        let l533 = *base.add(32).cast::<*mut u8>();
                                                        let l534 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len535 = l534;
                                                        let bytes535 = _rt::Vec::from_raw_parts(
                                                            l533.cast(),
                                                            len535,
                                                            len535,
                                                        );
                                                        let l536 = i32::from(
                                                            *base
                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l540 = i32::from(
                                                            *base
                                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l544 = *base
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l545 = *base
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base554 = l544;
                                                        let len554 = l545;
                                                        let mut result554 = _rt::Vec::with_capacity(len554);
                                                        for i in 0..len554 {
                                                            let base = base554
                                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                            let e554 = {
                                                                let l546 = *base.add(0).cast::<*mut u8>();
                                                                let l547 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len548 = l547;
                                                                let bytes548 = _rt::Vec::from_raw_parts(
                                                                    l546.cast(),
                                                                    len548,
                                                                    len548,
                                                                );
                                                                let l549 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::api::context::AttributeValue as V553;
                                                                let v553 = match l549 {
                                                                    n => {
                                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                        let e553 = {
                                                                            let l550 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l551 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len552 = l551;
                                                                            let bytes552 = _rt::Vec::from_raw_parts(
                                                                                l550.cast(),
                                                                                len552,
                                                                                len552,
                                                                            );
                                                                            _rt::string_lift(bytes552)
                                                                        };
                                                                        V553::String(e553)
                                                                    }
                                                                };
                                                                super::super::super::golem::api::context::Attribute {
                                                                    key: _rt::string_lift(bytes548),
                                                                    value: v553,
                                                                }
                                                            };
                                                            result554.push(e554);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base554,
                                                            len554 * (5 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        StartSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l531 as u64,
                                                                nanoseconds: l532 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes535),
                                                            parent: match l536 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l537 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l538 = *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len539 = l538;
                                                                        let bytes539 = _rt::Vec::from_raw_parts(
                                                                            l537.cast(),
                                                                            len539,
                                                                            len539,
                                                                        );
                                                                        _rt::string_lift(bytes539)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            linked_context: match l540 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l541 = *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l542 = *base
                                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len543 = l542;
                                                                        let bytes543 = _rt::Vec::from_raw_parts(
                                                                            l541.cast(),
                                                                            len543,
                                                                            len543,
                                                                        );
                                                                        _rt::string_lift(bytes543)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            attributes: result554,
                                                        }
                                                    };
                                                    OplogEntry::StartSpan(e594)
                                                }
                                                29 => {
                                                    let e594 = {
                                                        let l555 = *base.add(16).cast::<i64>();
                                                        let l556 = *base.add(24).cast::<i32>();
                                                        let l557 = *base.add(32).cast::<*mut u8>();
                                                        let l558 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len559 = l558;
                                                        let bytes559 = _rt::Vec::from_raw_parts(
                                                            l557.cast(),
                                                            len559,
                                                            len559,
                                                        );
                                                        FinishSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l555 as u64,
                                                                nanoseconds: l556 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes559),
                                                        }
                                                    };
                                                    OplogEntry::FinishSpan(e594)
                                                }
                                                30 => {
                                                    let e594 = {
                                                        let l560 = *base.add(16).cast::<i64>();
                                                        let l561 = *base.add(24).cast::<i32>();
                                                        let l562 = *base.add(32).cast::<*mut u8>();
                                                        let l563 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len564 = l563;
                                                        let bytes564 = _rt::Vec::from_raw_parts(
                                                            l562.cast(),
                                                            len564,
                                                            len564,
                                                        );
                                                        let l565 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l566 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len567 = l566;
                                                        let bytes567 = _rt::Vec::from_raw_parts(
                                                            l565.cast(),
                                                            len567,
                                                            len567,
                                                        );
                                                        let l568 = i32::from(
                                                            *base
                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        use super::super::super::golem::api::context::AttributeValue as V572;
                                                        let v572 = match l568 {
                                                            n => {
                                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                let e572 = {
                                                                    let l569 = *base
                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l570 = *base
                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len571 = l570;
                                                                    let bytes571 = _rt::Vec::from_raw_parts(
                                                                        l569.cast(),
                                                                        len571,
                                                                        len571,
                                                                    );
                                                                    _rt::string_lift(bytes571)
                                                                };
                                                                V572::String(e572)
                                                            }
                                                        };
                                                        SetSpanAttributeParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l560 as u64,
                                                                nanoseconds: l561 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes564),
                                                            key: _rt::string_lift(bytes567),
                                                            value: v572,
                                                        }
                                                    };
                                                    OplogEntry::SetSpanAttribute(e594)
                                                }
                                                31 => {
                                                    let e594 = {
                                                        let l573 = *base.add(16).cast::<i64>();
                                                        let l574 = *base.add(24).cast::<i32>();
                                                        let l575 = i32::from(*base.add(32).cast::<u8>());
                                                        use super::super::super::golem::api::host::PersistenceLevel as V576;
                                                        let v576 = match l575 {
                                                            0 => V576::PersistNothing,
                                                            1 => V576::PersistRemoteSideEffects,
                                                            n => {
                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                V576::Smart
                                                            }
                                                        };
                                                        ChangePersistenceLevelParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l573 as u64,
                                                                nanoseconds: l574 as u32,
                                                            },
                                                            persistence_level: v576,
                                                        }
                                                    };
                                                    OplogEntry::ChangePersistenceLevel(e594)
                                                }
                                                32 => {
                                                    let e594 = {
                                                        let l577 = *base.add(16).cast::<i64>();
                                                        let l578 = *base.add(24).cast::<i32>();
                                                        let l579 = *base.add(32).cast::<*mut u8>();
                                                        let l580 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len581 = l580;
                                                        let bytes581 = _rt::Vec::from_raw_parts(
                                                            l579.cast(),
                                                            len581,
                                                            len581,
                                                        );
                                                        BeginRemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l577 as u64,
                                                                nanoseconds: l578 as u32,
                                                            },
                                                            transaction_id: _rt::string_lift(bytes581),
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteTransaction(e594)
                                                }
                                                33 => {
                                                    let e594 = {
                                                        let l582 = *base.add(16).cast::<i64>();
                                                        let l583 = *base.add(24).cast::<i32>();
                                                        let l584 = *base.add(32).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l582 as u64,
                                                                nanoseconds: l583 as u32,
                                                            },
                                                            begin_index: l584 as u64,
                                                        }
                                                    };
                                                    OplogEntry::PreCommitRemoteTransaction(e594)
                                                }
                                                34 => {
                                                    let e594 = {
                                                        let l585 = *base.add(16).cast::<i64>();
                                                        let l586 = *base.add(24).cast::<i32>();
                                                        let l587 = *base.add(32).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l585 as u64,
                                                                nanoseconds: l586 as u32,
                                                            },
                                                            begin_index: l587 as u64,
                                                        }
                                                    };
                                                    OplogEntry::PreRollbackRemoteTransaction(e594)
                                                }
                                                35 => {
                                                    let e594 = {
                                                        let l588 = *base.add(16).cast::<i64>();
                                                        let l589 = *base.add(24).cast::<i32>();
                                                        let l590 = *base.add(32).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l588 as u64,
                                                                nanoseconds: l589 as u32,
                                                            },
                                                            begin_index: l590 as u64,
                                                        }
                                                    };
                                                    OplogEntry::CommittedRemoteTransaction(e594)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 36, "invalid enum discriminant");
                                                    let e594 = {
                                                        let l591 = *base.add(16).cast::<i64>();
                                                        let l592 = *base.add(24).cast::<i32>();
                                                        let l593 = *base.add(32).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l591 as u64,
                                                                nanoseconds: l592 as u32,
                                                            },
                                                            begin_index: l593 as u64,
                                                        }
                                                    };
                                                    OplogEntry::RolledBackRemoteTransaction(e594)
                                                }
                                            };
                                            (l5 as u64, v594)
                                        };
                                        result595.push(e595);
                                    }
                                    _rt::cabi_dealloc(
                                        base595,
                                        len595 * (128 + 10 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result595
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result596
                    }
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem agent
            #[derive(Clone)]
            pub struct AgentId {
                /// Identifies the component the agent belongs to
                pub component_id: ComponentId,
                /// String representation of the agent ID (agent type and constructor parameters)
                pub agent_id: _rt::String,
            }
            impl ::core::fmt::Debug for AgentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentId")
                        .field("component-id", &self.component_id)
                        .field("agent-id", &self.agent_id)
                        .finish()
                }
            }
            /// The index type used in `wit-value` and `wit-type` to identify nodes
            pub type NodeIndex = i32;
            /// Resource handle modes
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResourceMode {
                /// The resource is owned by this handle
                Owned,
                /// The resource is owned by someone else, and this handle is just a borrow
                Borrowed,
            }
            impl ::core::fmt::Debug for ResourceMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceMode::Owned => {
                            f.debug_tuple("ResourceMode::Owned").finish()
                        }
                        ResourceMode::Borrowed => {
                            f.debug_tuple("ResourceMode::Borrowed").finish()
                        }
                    }
                }
            }
            impl ResourceMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResourceMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResourceMode::Owned,
                        1 => ResourceMode::Borrowed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// URI value
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            /// One node of a `wit-value`
            #[derive(Clone)]
            pub enum WitNode {
                /// A record value defined by a list of its field values
                RecordValue(_rt::Vec<NodeIndex>),
                /// A variant value defined by a pair of the case index and its inner value
                VariantValue((u32, Option<NodeIndex>)),
                /// An enum value defined by a case index
                EnumValue(u32),
                /// A flags value defined by a list of its flag states
                FlagsValue(_rt::Vec<bool>),
                /// A tuple value defined by a list of its item values
                TupleValue(_rt::Vec<NodeIndex>),
                /// A list value defined by a list of its item values
                ListValue(_rt::Vec<NodeIndex>),
                /// An option value defined by an optional inner value
                OptionValue(Option<NodeIndex>),
                /// A result value defined by either an ok value or an error value. Both values are optional,
                /// where the `none` case represents the absence of a value.
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                /// Primitive unsigned 8-bit integer
                PrimU8(u8),
                /// Primitive unsigned 16-bit integer
                PrimU16(u16),
                /// Primitive unsigned 32-bit integer
                PrimU32(u32),
                /// Primitive unsigned 64-bit integer
                PrimU64(u64),
                /// Primitive signed 8-bit integer
                PrimS8(i8),
                /// Primitive signed 16-bit integer
                PrimS16(i16),
                /// Primitive signed 32-bit integer
                PrimS32(i32),
                /// Primitive signed 64-bit integer
                PrimS64(i64),
                /// Primitive 32-bit floating point number
                PrimFloat32(f32),
                /// Primitive 64-bit floating point number
                PrimFloat64(f64),
                /// Primitive character
                PrimChar(char),
                /// Primitive boolean
                PrimBool(bool),
                /// Primitive string
                PrimString(_rt::String),
                /// Resource handle pointing to a URI and a resource ID
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            /// Describes an arbitrary value
            #[derive(Clone)]
            pub struct WitValue {
                /// The list of `wit-node` values that make up the value. The list is always non-empty,
                /// and the first element is the root node describing the value. Because WIT does not support
                /// recursive types, further nodes are pushed into this list, and referenced by index from their parent node.
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            /// Possible failures of an RPC call
            #[derive(Clone)]
            pub enum RpcError {
                /// Protocol level error
                ProtocolError(_rt::String),
                /// Access denied
                Denied(_rt::String),
                /// Target agent or function not found
                NotFound(_rt::String),
                /// Internal error on the remote side
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            /// An RPC client
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Represents a pollable invocation result
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Cancellation token for scheduled invocations
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CancellationToken {
                handle: _rt::Resource<CancellationToken>,
            }
            impl CancellationToken {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CancellationToken {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]cancellation-token"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Parses a UUID from a string
            pub fn parse_uuid(uuid: &str) -> Result<Uuid, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = uuid;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "parse-uuid"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result9 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                Uuid {
                                    high_bits: l4 as u64,
                                    low_bits: l5 as u64,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(8).cast::<*mut u8>();
                                let l7 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Converts a UUID to a string
            pub fn uuid_to_string(uuid: Uuid) -> _rt::String {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Uuid { high_bits: high_bits0, low_bits: low_bits0 } = uuid;
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "uuid-to-string"]
                        fn wit_import2(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i64(high_bits0),
                            _rt::as_i64(low_bits0),
                            ptr1,
                        )
                    };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let result6 = _rt::string_lift(bytes5);
                    result6
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Constructs the RPC client connecting to the given target agent
                pub fn new(agent_id: &AgentId) -> Self {
                    unsafe {
                        let AgentId {
                            component_id: component_id0,
                            agent_id: agent_id0,
                        } = agent_id;
                        let ComponentId { uuid: uuid1 } = component_id0;
                        let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                        let vec3 = agent_id0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import4(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                            )
                        };
                        unsafe { WasmRpc::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Invokes a remote function with the given parameters, and awaits the result
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result78 = match l15 {
                            0 => {
                                let e = {
                                    let l16 = *ptr13
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *ptr13
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base63 = l16;
                                    let len63 = l17;
                                    let mut result63 = _rt::Vec::with_capacity(len63);
                                    for i in 0..len63 {
                                        let base = base63
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e63 = {
                                            let l18 = i32::from(*base.add(0).cast::<u8>());
                                            let v62 = match l18 {
                                                0 => {
                                                    let e62 = {
                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                        let l20 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len21 = l20;
                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                    };
                                                    WitNode::RecordValue(e62)
                                                }
                                                1 => {
                                                    let e62 = {
                                                        let l22 = *base.add(8).cast::<i32>();
                                                        let l23 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l22 as u32,
                                                            match l23 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l24 = *base.add(16).cast::<i32>();
                                                                        l24
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e62)
                                                }
                                                2 => {
                                                    let e62 = {
                                                        let l25 = *base.add(8).cast::<i32>();
                                                        l25 as u32
                                                    };
                                                    WitNode::EnumValue(e62)
                                                }
                                                3 => {
                                                    let e62 = {
                                                        let l26 = *base.add(8).cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l26;
                                                        let len29 = l27;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29.add(i * 1);
                                                            let e29 = {
                                                                let l28 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l28 as u8)
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(base29, len29 * 1, 1);
                                                        result29
                                                    };
                                                    WitNode::FlagsValue(e62)
                                                }
                                                4 => {
                                                    let e62 = {
                                                        let l30 = *base.add(8).cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        _rt::Vec::from_raw_parts(l30.cast(), len32, len32)
                                                    };
                                                    WitNode::TupleValue(e62)
                                                }
                                                5 => {
                                                    let e62 = {
                                                        let l33 = *base.add(8).cast::<*mut u8>();
                                                        let l34 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len35 = l34;
                                                        _rt::Vec::from_raw_parts(l33.cast(), len35, len35)
                                                    };
                                                    WitNode::ListValue(e62)
                                                }
                                                6 => {
                                                    let e62 = {
                                                        let l36 = i32::from(*base.add(8).cast::<u8>());
                                                        match l36 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l37 = *base.add(12).cast::<i32>();
                                                                    l37
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e62)
                                                }
                                                7 => {
                                                    let e62 = {
                                                        let l38 = i32::from(*base.add(8).cast::<u8>());
                                                        match l38 {
                                                            0 => {
                                                                let e = {
                                                                    let l39 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l39 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l40 = *base.add(16).cast::<i32>();
                                                                                l40
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l41 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l42 = *base.add(16).cast::<i32>();
                                                                                l42
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e62)
                                                }
                                                8 => {
                                                    let e62 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u8>());
                                                        l43 as u8
                                                    };
                                                    WitNode::PrimU8(e62)
                                                }
                                                9 => {
                                                    let e62 = {
                                                        let l44 = i32::from(*base.add(8).cast::<u16>());
                                                        l44 as u16
                                                    };
                                                    WitNode::PrimU16(e62)
                                                }
                                                10 => {
                                                    let e62 = {
                                                        let l45 = *base.add(8).cast::<i32>();
                                                        l45 as u32
                                                    };
                                                    WitNode::PrimU32(e62)
                                                }
                                                11 => {
                                                    let e62 = {
                                                        let l46 = *base.add(8).cast::<i64>();
                                                        l46 as u64
                                                    };
                                                    WitNode::PrimU64(e62)
                                                }
                                                12 => {
                                                    let e62 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i8>());
                                                        l47 as i8
                                                    };
                                                    WitNode::PrimS8(e62)
                                                }
                                                13 => {
                                                    let e62 = {
                                                        let l48 = i32::from(*base.add(8).cast::<i16>());
                                                        l48 as i16
                                                    };
                                                    WitNode::PrimS16(e62)
                                                }
                                                14 => {
                                                    let e62 = {
                                                        let l49 = *base.add(8).cast::<i32>();
                                                        l49
                                                    };
                                                    WitNode::PrimS32(e62)
                                                }
                                                15 => {
                                                    let e62 = {
                                                        let l50 = *base.add(8).cast::<i64>();
                                                        l50
                                                    };
                                                    WitNode::PrimS64(e62)
                                                }
                                                16 => {
                                                    let e62 = {
                                                        let l51 = *base.add(8).cast::<f32>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat32(e62)
                                                }
                                                17 => {
                                                    let e62 = {
                                                        let l52 = *base.add(8).cast::<f64>();
                                                        l52
                                                    };
                                                    WitNode::PrimFloat64(e62)
                                                }
                                                18 => {
                                                    let e62 = {
                                                        let l53 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l53 as u32)
                                                    };
                                                    WitNode::PrimChar(e62)
                                                }
                                                19 => {
                                                    let e62 = {
                                                        let l54 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l54 as u8)
                                                    };
                                                    WitNode::PrimBool(e62)
                                                }
                                                20 => {
                                                    let e62 = {
                                                        let l55 = *base.add(8).cast::<*mut u8>();
                                                        let l56 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );
                                                        _rt::string_lift(bytes57)
                                                    };
                                                    WitNode::PrimString(e62)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e62 = {
                                                        let l58 = *base.add(8).cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len60 = l59;
                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                            l58.cast(),
                                                            len60,
                                                            len60,
                                                        );
                                                        let l61 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes60),
                                                            },
                                                            l61 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e62)
                                                }
                                            };
                                            v62
                                        };
                                        result63.push(e63);
                                    }
                                    _rt::cabi_dealloc(
                                        base63,
                                        len63 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    WitValue { nodes: result63 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l64 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v77 = match l64 {
                                        0 => {
                                            let e77 = {
                                                let l65 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l66 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            RpcError::ProtocolError(e77)
                                        }
                                        1 => {
                                            let e77 = {
                                                let l68 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l69 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            RpcError::Denied(e77)
                                        }
                                        2 => {
                                            let e77 = {
                                                let l71 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l72 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            RpcError::NotFound(e77)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e77 = {
                                                let l74 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            RpcError::RemoteInternalError(e77)
                                        }
                                    };
                                    v77
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result78
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Triggers the invocation of a remote function with the given parameters, and returns immediately.
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result30 = match l15 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v29 = match l16 {
                                        0 => {
                                            let e29 = {
                                                let l17 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            RpcError::ProtocolError(e29)
                                        }
                                        1 => {
                                            let e29 = {
                                                let l20 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            RpcError::Denied(e29)
                                        }
                                        2 => {
                                            let e29 = {
                                                let l23 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l24 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            RpcError::NotFound(e29)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e29 = {
                                                let l26 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l27 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            RpcError::RemoteInternalError(e29)
                                        }
                                    };
                                    v29
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result30
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Invokes a remote function with the given parameters, and returns a `future-invoke-result` value which can
                /// be polled for the result.
                ///
                /// With this function it is possible to call multiple (different) agents simultaneously.
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import13(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import13(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import13(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                            )
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { FutureInvokeResult::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later
                pub fn schedule_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> () {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later. Call cancel on the returned resource to cancel the invocation before the scheduled time.
                pub fn schedule_cancelable_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> CancellationToken {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-cancelable-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { CancellationToken::from_handle(ret as u32) }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Subscribes to the result of the invocation
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Poll for the invocation. If the invocation has not completed yet, returns `none`.
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 5 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 5
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result66 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    match l3 {
                                        0 => {
                                            let e = {
                                                let l4 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base51 = l4;
                                                let len51 = l5;
                                                let mut result51 = _rt::Vec::with_capacity(len51);
                                                for i in 0..len51 {
                                                    let base = base51
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e51 = {
                                                        let l6 = i32::from(*base.add(0).cast::<u8>());
                                                        let v50 = match l6 {
                                                            0 => {
                                                                let e50 = {
                                                                    let l7 = *base.add(8).cast::<*mut u8>();
                                                                    let l8 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len9 = l8;
                                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                                                };
                                                                WitNode::RecordValue(e50)
                                                            }
                                                            1 => {
                                                                let e50 = {
                                                                    let l10 = *base.add(8).cast::<i32>();
                                                                    let l11 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l10 as u32,
                                                                        match l11 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l12 = *base.add(16).cast::<i32>();
                                                                                    l12
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e50)
                                                            }
                                                            2 => {
                                                                let e50 = {
                                                                    let l13 = *base.add(8).cast::<i32>();
                                                                    l13 as u32
                                                                };
                                                                WitNode::EnumValue(e50)
                                                            }
                                                            3 => {
                                                                let e50 = {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base17 = l14;
                                                                    let len17 = l15;
                                                                    let mut result17 = _rt::Vec::with_capacity(len17);
                                                                    for i in 0..len17 {
                                                                        let base = base17.add(i * 1);
                                                                        let e17 = {
                                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l16 as u8)
                                                                        };
                                                                        result17.push(e17);
                                                                    }
                                                                    _rt::cabi_dealloc(base17, len17 * 1, 1);
                                                                    result17
                                                                };
                                                                WitNode::FlagsValue(e50)
                                                            }
                                                            4 => {
                                                                let e50 = {
                                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                                    let l19 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len20 = l19;
                                                                    _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                                };
                                                                WitNode::TupleValue(e50)
                                                            }
                                                            5 => {
                                                                let e50 = {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len23 = l22;
                                                                    _rt::Vec::from_raw_parts(l21.cast(), len23, len23)
                                                                };
                                                                WitNode::ListValue(e50)
                                                            }
                                                            6 => {
                                                                let e50 = {
                                                                    let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l24 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l25 = *base.add(12).cast::<i32>();
                                                                                l25
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e50)
                                                            }
                                                            7 => {
                                                                let e50 = {
                                                                    let l26 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l26 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l27 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l28 = *base.add(16).cast::<i32>();
                                                                                            l28
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l29 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l29 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l30 = *base.add(16).cast::<i32>();
                                                                                            l30
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e50)
                                                            }
                                                            8 => {
                                                                let e50 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u8>());
                                                                    l31 as u8
                                                                };
                                                                WitNode::PrimU8(e50)
                                                            }
                                                            9 => {
                                                                let e50 = {
                                                                    let l32 = i32::from(*base.add(8).cast::<u16>());
                                                                    l32 as u16
                                                                };
                                                                WitNode::PrimU16(e50)
                                                            }
                                                            10 => {
                                                                let e50 = {
                                                                    let l33 = *base.add(8).cast::<i32>();
                                                                    l33 as u32
                                                                };
                                                                WitNode::PrimU32(e50)
                                                            }
                                                            11 => {
                                                                let e50 = {
                                                                    let l34 = *base.add(8).cast::<i64>();
                                                                    l34 as u64
                                                                };
                                                                WitNode::PrimU64(e50)
                                                            }
                                                            12 => {
                                                                let e50 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i8>());
                                                                    l35 as i8
                                                                };
                                                                WitNode::PrimS8(e50)
                                                            }
                                                            13 => {
                                                                let e50 = {
                                                                    let l36 = i32::from(*base.add(8).cast::<i16>());
                                                                    l36 as i16
                                                                };
                                                                WitNode::PrimS16(e50)
                                                            }
                                                            14 => {
                                                                let e50 = {
                                                                    let l37 = *base.add(8).cast::<i32>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS32(e50)
                                                            }
                                                            15 => {
                                                                let e50 = {
                                                                    let l38 = *base.add(8).cast::<i64>();
                                                                    l38
                                                                };
                                                                WitNode::PrimS64(e50)
                                                            }
                                                            16 => {
                                                                let e50 = {
                                                                    let l39 = *base.add(8).cast::<f32>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat32(e50)
                                                            }
                                                            17 => {
                                                                let e50 = {
                                                                    let l40 = *base.add(8).cast::<f64>();
                                                                    l40
                                                                };
                                                                WitNode::PrimFloat64(e50)
                                                            }
                                                            18 => {
                                                                let e50 = {
                                                                    let l41 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l41 as u32)
                                                                };
                                                                WitNode::PrimChar(e50)
                                                            }
                                                            19 => {
                                                                let e50 = {
                                                                    let l42 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l42 as u8)
                                                                };
                                                                WitNode::PrimBool(e50)
                                                            }
                                                            20 => {
                                                                let e50 = {
                                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                                    let l44 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len45 = l44;
                                                                    let bytes45 = _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );
                                                                    _rt::string_lift(bytes45)
                                                                };
                                                                WitNode::PrimString(e50)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e50 = {
                                                                    let l46 = *base.add(8).cast::<*mut u8>();
                                                                    let l47 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len48 = l47;
                                                                    let bytes48 = _rt::Vec::from_raw_parts(
                                                                        l46.cast(),
                                                                        len48,
                                                                        len48,
                                                                    );
                                                                    let l49 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes48),
                                                                        },
                                                                        l49 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e50)
                                                            }
                                                        };
                                                        v50
                                                    };
                                                    result51.push(e51);
                                                }
                                                _rt::cabi_dealloc(
                                                    base51,
                                                    len51 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                WitValue { nodes: result51 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l52 = i32::from(
                                                    *ptr0
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let v65 = match l52 {
                                                    0 => {
                                                        let e65 = {
                                                            let l53 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l54 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len55 = l54;
                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                l53.cast(),
                                                                len55,
                                                                len55,
                                                            );
                                                            _rt::string_lift(bytes55)
                                                        };
                                                        RpcError::ProtocolError(e65)
                                                    }
                                                    1 => {
                                                        let e65 = {
                                                            let l56 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len58 = l57;
                                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                                l56.cast(),
                                                                len58,
                                                                len58,
                                                            );
                                                            _rt::string_lift(bytes58)
                                                        };
                                                        RpcError::Denied(e65)
                                                    }
                                                    2 => {
                                                        let e65 = {
                                                            let l59 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l60 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        RpcError::NotFound(e65)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e65 = {
                                                            let l62 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l63 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len64 = l63;
                                                            let bytes64 = _rt::Vec::from_raw_parts(
                                                                l62.cast(),
                                                                len64,
                                                                len64,
                                                            );
                                                            _rt::string_lift(bytes64)
                                                        };
                                                        RpcError::RemoteInternalError(e65)
                                                    }
                                                };
                                                v65
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result66
                    }
                }
            }
            impl CancellationToken {
                #[allow(unused_unsafe, clippy::all)]
                /// Cancel the scheduled invocation
                pub fn cancel(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]cancellation-token.cancel"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
        }
        /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
        /// time.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A monotonic clock is a clock which has an unspecified initial value, and
        /// successive reads of the clock will produce non-decreasing values.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// has occurred.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` that will resolve after the specified duration has
            /// elapsed from the time this function is invoked.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` represents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// This function traps if either:
            /// - the list is empty, or:
            /// - the list contains more elements than can be indexed with a `u32` value.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being ready for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod api {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod oplog_processor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AccountId = super::super::super::super::golem::api::host::AccountId;
                pub type OplogIndex = super::super::super::super::golem::api::host::OplogIndex;
                pub type AgentMetadata = super::super::super::super::golem::api::host::AgentMetadata;
                pub type OplogEntry = super::super::super::super::golem::api::oplog::OplogEntry;
                pub type ComponentId = super::super::super::super::golem::rpc::types::ComponentId;
                pub type AgentId = super::super::super::super::golem::rpc::types::AgentId;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct AccountInfo {
                    pub account_id: AccountId,
                }
                impl ::core::fmt::Debug for AccountInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AccountInfo")
                            .field("account-id", &self.account_id)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_process_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i64>();
                    let l1 = *arg0.add(8).cast::<i64>();
                    let l2 = *arg0.add(16).cast::<*mut u8>();
                    let l3 = *arg0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base10 = l2;
                    let len10 = l3;
                    let mut result10 = _rt::Vec::with_capacity(len10);
                    for i in 0..len10 {
                        let base = base10
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e10 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            let l7 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len9 = l8;
                            let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                            (_rt::string_lift(bytes6), _rt::string_lift(bytes9))
                        };
                        result10.push(e10);
                    }
                    _rt::cabi_dealloc(
                        base10,
                        len10 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l11 = *arg0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l12 = *arg0
                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l13 = *arg0
                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l14 = *arg0
                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l15 = *arg0
                        .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l16 = *arg0
                        .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len17 = l16;
                    let bytes17 = _rt::Vec::from_raw_parts(l15.cast(), len17, len17);
                    let l18 = *arg0
                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l19 = *arg0
                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l20 = *arg0
                        .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l21 = *arg0
                        .add(64 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len22 = l21;
                    let bytes22 = _rt::Vec::from_raw_parts(l20.cast(), len22, len22);
                    let l23 = *arg0
                        .add(64 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l24 = *arg0
                        .add(64 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base28 = l23;
                    let len28 = l24;
                    let mut result28 = _rt::Vec::with_capacity(len28);
                    for i in 0..len28 {
                        let base = base28
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e28 = {
                            let l25 = *base.add(0).cast::<*mut u8>();
                            let l26 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len27 = l26;
                            let bytes27 = _rt::Vec::from_raw_parts(
                                l25.cast(),
                                len27,
                                len27,
                            );
                            _rt::string_lift(bytes27)
                        };
                        result28.push(e28);
                    }
                    _rt::cabi_dealloc(
                        base28,
                        len28 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l29 = *arg0
                        .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l30 = *arg0
                        .add(64 + 9 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base37 = l29;
                    let len37 = l30;
                    let mut result37 = _rt::Vec::with_capacity(len37);
                    for i in 0..len37 {
                        let base = base37
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e37 = {
                            let l31 = *base.add(0).cast::<*mut u8>();
                            let l32 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len33 = l32;
                            let bytes33 = _rt::Vec::from_raw_parts(
                                l31.cast(),
                                len33,
                                len33,
                            );
                            let l34 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l35 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len36 = l35;
                            let bytes36 = _rt::Vec::from_raw_parts(
                                l34.cast(),
                                len36,
                                len36,
                            );
                            (_rt::string_lift(bytes33), _rt::string_lift(bytes36))
                        };
                        result37.push(e37);
                    }
                    _rt::cabi_dealloc(
                        base37,
                        len37 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l38 = *arg0
                        .add(64 + 10 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l39 = *arg0
                        .add(64 + 11 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base46 = l38;
                    let len46 = l39;
                    let mut result46 = _rt::Vec::with_capacity(len46);
                    for i in 0..len46 {
                        let base = base46
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e46 = {
                            let l40 = *base.add(0).cast::<*mut u8>();
                            let l41 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len42 = l41;
                            let bytes42 = _rt::Vec::from_raw_parts(
                                l40.cast(),
                                len42,
                                len42,
                            );
                            let l43 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l44 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len45 = l44;
                            let bytes45 = _rt::Vec::from_raw_parts(
                                l43.cast(),
                                len45,
                                len45,
                            );
                            (_rt::string_lift(bytes42), _rt::string_lift(bytes45))
                        };
                        result46.push(e46);
                    }
                    _rt::cabi_dealloc(
                        base46,
                        len46 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l47 = i32::from(
                        *arg0
                            .add(64 + 12 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l48 = *arg0
                        .add(72 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l49 = *arg0
                        .add(80 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l50 = *arg0
                        .add(88 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l51 = *arg0
                        .add(96 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l52 = *arg0
                        .add(96 + 13 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base642 = l51;
                    let len642 = l52;
                    let mut result642 = _rt::Vec::with_capacity(len642);
                    for i in 0..len642 {
                        let base = base642
                            .add(i * (120 + 10 * ::core::mem::size_of::<*const u8>()));
                        let e642 = {
                            let l53 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::golem::api::oplog::OplogEntry as V641;
                            let v641 = match l53 {
                                0 => {
                                    let e641 = {
                                        let l54 = *base.add(8).cast::<i64>();
                                        let l55 = *base.add(16).cast::<i32>();
                                        let l56 = *base.add(24).cast::<i64>();
                                        let l57 = *base.add(32).cast::<i64>();
                                        let l58 = *base.add(40).cast::<*mut u8>();
                                        let l59 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len60 = l59;
                                        let bytes60 = _rt::Vec::from_raw_parts(
                                            l58.cast(),
                                            len60,
                                            len60,
                                        );
                                        let l61 = *base
                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l62 = *base
                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l63 = *base
                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base67 = l62;
                                        let len67 = l63;
                                        let mut result67 = _rt::Vec::with_capacity(len67);
                                        for i in 0..len67 {
                                            let base = base67
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e67 = {
                                                let l64 = *base.add(0).cast::<*mut u8>();
                                                let l65 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );
                                                _rt::string_lift(bytes66)
                                            };
                                            result67.push(e67);
                                        }
                                        _rt::cabi_dealloc(
                                            base67,
                                            len67 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l68 = *base
                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l69 = *base
                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base76 = l68;
                                        let len76 = l69;
                                        let mut result76 = _rt::Vec::with_capacity(len76);
                                        for i in 0..len76 {
                                            let base = base76
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e76 = {
                                                let l70 = *base.add(0).cast::<*mut u8>();
                                                let l71 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );
                                                let l73 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l74 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );
                                                (_rt::string_lift(bytes72), _rt::string_lift(bytes75))
                                            };
                                            result76.push(e76);
                                        }
                                        _rt::cabi_dealloc(
                                            base76,
                                            len76 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l77 = *base
                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l78 = *base
                                            .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l79 = *base
                                            .add(64 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l80 = *base
                                            .add(72 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l81 = i32::from(
                                            *base
                                                .add(80 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l87 = *base
                                            .add(104 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l88 = *base
                                            .add(112 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l89 = *base
                                            .add(120 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l90 = *base
                                            .add(120 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base106 = l89;
                                        let len106 = l90;
                                        let mut result106 = _rt::Vec::with_capacity(len106);
                                        for i in 0..len106 {
                                            let base = base106
                                                .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                            let e106 = {
                                                let l91 = *base.add(0).cast::<*mut u8>();
                                                let l92 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len93 = l92;
                                                let bytes93 = _rt::Vec::from_raw_parts(
                                                    l91.cast(),
                                                    len93,
                                                    len93,
                                                );
                                                let l94 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l95 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len96 = l95;
                                                let bytes96 = _rt::Vec::from_raw_parts(
                                                    l94.cast(),
                                                    len96,
                                                    len96,
                                                );
                                                let l97 = *base
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l98 = *base
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base105 = l97;
                                                let len105 = l98;
                                                let mut result105 = _rt::Vec::with_capacity(len105);
                                                for i in 0..len105 {
                                                    let base = base105
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e105 = {
                                                        let l99 = *base.add(0).cast::<*mut u8>();
                                                        let l100 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len101 = l100;
                                                        let bytes101 = _rt::Vec::from_raw_parts(
                                                            l99.cast(),
                                                            len101,
                                                            len101,
                                                        );
                                                        let l102 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l103 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len104 = l103;
                                                        let bytes104 = _rt::Vec::from_raw_parts(
                                                            l102.cast(),
                                                            len104,
                                                            len104,
                                                        );
                                                        (_rt::string_lift(bytes101), _rt::string_lift(bytes104))
                                                    };
                                                    result105.push(e105);
                                                }
                                                _rt::cabi_dealloc(
                                                    base105,
                                                    len105 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    name: _rt::string_lift(bytes93),
                                                    version: _rt::string_lift(bytes96),
                                                    parameters: result105,
                                                }
                                            };
                                            result106.push(e106);
                                        }
                                        _rt::cabi_dealloc(
                                            base106,
                                            len106 * (6 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::CreateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l54 as u64,
                                                nanoseconds: l55 as u32,
                                            },
                                            agent_id: super::super::super::super::golem::rpc::types::AgentId {
                                                component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                                    uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                        high_bits: l56 as u64,
                                                        low_bits: l57 as u64,
                                                    },
                                                },
                                                agent_id: _rt::string_lift(bytes60),
                                            },
                                            component_version: l61 as u64,
                                            args: result67,
                                            env: result76,
                                            created_by: super::super::super::super::golem::api::host::AccountId {
                                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                    high_bits: l77 as u64,
                                                    low_bits: l78 as u64,
                                                },
                                            },
                                            environment_id: super::super::super::super::golem::api::host::EnvironmentId {
                                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                    high_bits: l79 as u64,
                                                    low_bits: l80 as u64,
                                                },
                                            },
                                            parent: match l81 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l82 = *base
                                                            .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l83 = *base
                                                            .add(96 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l84 = *base
                                                            .add(104 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l85 = *base
                                                            .add(104 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len86 = l85;
                                                        let bytes86 = _rt::Vec::from_raw_parts(
                                                            l84.cast(),
                                                            len86,
                                                            len86,
                                                        );
                                                        super::super::super::super::golem::rpc::types::AgentId {
                                                            component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l82 as u64,
                                                                    low_bits: l83 as u64,
                                                                },
                                                            },
                                                            agent_id: _rt::string_lift(bytes86),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            component_size: l87 as u64,
                                            initial_total_linear_memory_size: l88 as u64,
                                            initial_active_plugins: result106,
                                        }
                                    };
                                    V641::Create(e641)
                                }
                                1 => {
                                    let e641 = {
                                        let l107 = *base.add(8).cast::<i64>();
                                        let l108 = *base.add(16).cast::<i32>();
                                        let l109 = *base.add(24).cast::<*mut u8>();
                                        let l110 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len111 = l110;
                                        let bytes111 = _rt::Vec::from_raw_parts(
                                            l109.cast(),
                                            len111,
                                            len111,
                                        );
                                        let l112 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l113 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base159 = l112;
                                        let len159 = l113;
                                        let mut result159 = _rt::Vec::with_capacity(len159);
                                        for i in 0..len159 {
                                            let base = base159
                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e159 = {
                                                let l114 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V158;
                                                let v158 = match l114 {
                                                    0 => {
                                                        let e158 = {
                                                            let l115 = *base.add(8).cast::<*mut u8>();
                                                            let l116 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len117 = l116;
                                                            _rt::Vec::from_raw_parts(l115.cast(), len117, len117)
                                                        };
                                                        V158::RecordValue(e158)
                                                    }
                                                    1 => {
                                                        let e158 = {
                                                            let l118 = *base.add(8).cast::<i32>();
                                                            let l119 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l118 as u32,
                                                                match l119 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l120 = *base.add(16).cast::<i32>();
                                                                            l120
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V158::VariantValue(e158)
                                                    }
                                                    2 => {
                                                        let e158 = {
                                                            let l121 = *base.add(8).cast::<i32>();
                                                            l121 as u32
                                                        };
                                                        V158::EnumValue(e158)
                                                    }
                                                    3 => {
                                                        let e158 = {
                                                            let l122 = *base.add(8).cast::<*mut u8>();
                                                            let l123 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base125 = l122;
                                                            let len125 = l123;
                                                            let mut result125 = _rt::Vec::with_capacity(len125);
                                                            for i in 0..len125 {
                                                                let base = base125.add(i * 1);
                                                                let e125 = {
                                                                    let l124 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l124 as u8)
                                                                };
                                                                result125.push(e125);
                                                            }
                                                            _rt::cabi_dealloc(base125, len125 * 1, 1);
                                                            result125
                                                        };
                                                        V158::FlagsValue(e158)
                                                    }
                                                    4 => {
                                                        let e158 = {
                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                            let l127 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len128 = l127;
                                                            _rt::Vec::from_raw_parts(l126.cast(), len128, len128)
                                                        };
                                                        V158::TupleValue(e158)
                                                    }
                                                    5 => {
                                                        let e158 = {
                                                            let l129 = *base.add(8).cast::<*mut u8>();
                                                            let l130 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len131 = l130;
                                                            _rt::Vec::from_raw_parts(l129.cast(), len131, len131)
                                                        };
                                                        V158::ListValue(e158)
                                                    }
                                                    6 => {
                                                        let e158 = {
                                                            let l132 = i32::from(*base.add(8).cast::<u8>());
                                                            match l132 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l133 = *base.add(12).cast::<i32>();
                                                                        l133
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V158::OptionValue(e158)
                                                    }
                                                    7 => {
                                                        let e158 = {
                                                            let l134 = i32::from(*base.add(8).cast::<u8>());
                                                            match l134 {
                                                                0 => {
                                                                    let e = {
                                                                        let l135 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l135 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l136 = *base.add(16).cast::<i32>();
                                                                                    l136
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l137 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l137 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l138 = *base.add(16).cast::<i32>();
                                                                                    l138
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V158::ResultValue(e158)
                                                    }
                                                    8 => {
                                                        let e158 = {
                                                            let l139 = i32::from(*base.add(8).cast::<u8>());
                                                            l139 as u8
                                                        };
                                                        V158::PrimU8(e158)
                                                    }
                                                    9 => {
                                                        let e158 = {
                                                            let l140 = i32::from(*base.add(8).cast::<u16>());
                                                            l140 as u16
                                                        };
                                                        V158::PrimU16(e158)
                                                    }
                                                    10 => {
                                                        let e158 = {
                                                            let l141 = *base.add(8).cast::<i32>();
                                                            l141 as u32
                                                        };
                                                        V158::PrimU32(e158)
                                                    }
                                                    11 => {
                                                        let e158 = {
                                                            let l142 = *base.add(8).cast::<i64>();
                                                            l142 as u64
                                                        };
                                                        V158::PrimU64(e158)
                                                    }
                                                    12 => {
                                                        let e158 = {
                                                            let l143 = i32::from(*base.add(8).cast::<i8>());
                                                            l143 as i8
                                                        };
                                                        V158::PrimS8(e158)
                                                    }
                                                    13 => {
                                                        let e158 = {
                                                            let l144 = i32::from(*base.add(8).cast::<i16>());
                                                            l144 as i16
                                                        };
                                                        V158::PrimS16(e158)
                                                    }
                                                    14 => {
                                                        let e158 = {
                                                            let l145 = *base.add(8).cast::<i32>();
                                                            l145
                                                        };
                                                        V158::PrimS32(e158)
                                                    }
                                                    15 => {
                                                        let e158 = {
                                                            let l146 = *base.add(8).cast::<i64>();
                                                            l146
                                                        };
                                                        V158::PrimS64(e158)
                                                    }
                                                    16 => {
                                                        let e158 = {
                                                            let l147 = *base.add(8).cast::<f32>();
                                                            l147
                                                        };
                                                        V158::PrimFloat32(e158)
                                                    }
                                                    17 => {
                                                        let e158 = {
                                                            let l148 = *base.add(8).cast::<f64>();
                                                            l148
                                                        };
                                                        V158::PrimFloat64(e158)
                                                    }
                                                    18 => {
                                                        let e158 = {
                                                            let l149 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l149 as u32)
                                                        };
                                                        V158::PrimChar(e158)
                                                    }
                                                    19 => {
                                                        let e158 = {
                                                            let l150 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l150 as u8)
                                                        };
                                                        V158::PrimBool(e158)
                                                    }
                                                    20 => {
                                                        let e158 = {
                                                            let l151 = *base.add(8).cast::<*mut u8>();
                                                            let l152 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len153 = l152;
                                                            let bytes153 = _rt::Vec::from_raw_parts(
                                                                l151.cast(),
                                                                len153,
                                                                len153,
                                                            );
                                                            _rt::string_lift(bytes153)
                                                        };
                                                        V158::PrimString(e158)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e158 = {
                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                            let l155 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len156 = l155;
                                                            let bytes156 = _rt::Vec::from_raw_parts(
                                                                l154.cast(),
                                                                len156,
                                                                len156,
                                                            );
                                                            let l157 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes156),
                                                                },
                                                                l157 as u64,
                                                            )
                                                        };
                                                        V158::Handle(e158)
                                                    }
                                                };
                                                v158
                                            };
                                            result159.push(e159);
                                        }
                                        _rt::cabi_dealloc(
                                            base159,
                                            len159 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let l160 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l161 = *base
                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base207 = l160;
                                        let len207 = l161;
                                        let mut result207 = _rt::Vec::with_capacity(len207);
                                        for i in 0..len207 {
                                            let base = base207
                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e207 = {
                                                let l162 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V206;
                                                let v206 = match l162 {
                                                    0 => {
                                                        let e206 = {
                                                            let l163 = *base.add(8).cast::<*mut u8>();
                                                            let l164 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len165 = l164;
                                                            _rt::Vec::from_raw_parts(l163.cast(), len165, len165)
                                                        };
                                                        V206::RecordValue(e206)
                                                    }
                                                    1 => {
                                                        let e206 = {
                                                            let l166 = *base.add(8).cast::<i32>();
                                                            let l167 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l166 as u32,
                                                                match l167 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l168 = *base.add(16).cast::<i32>();
                                                                            l168
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V206::VariantValue(e206)
                                                    }
                                                    2 => {
                                                        let e206 = {
                                                            let l169 = *base.add(8).cast::<i32>();
                                                            l169 as u32
                                                        };
                                                        V206::EnumValue(e206)
                                                    }
                                                    3 => {
                                                        let e206 = {
                                                            let l170 = *base.add(8).cast::<*mut u8>();
                                                            let l171 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base173 = l170;
                                                            let len173 = l171;
                                                            let mut result173 = _rt::Vec::with_capacity(len173);
                                                            for i in 0..len173 {
                                                                let base = base173.add(i * 1);
                                                                let e173 = {
                                                                    let l172 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l172 as u8)
                                                                };
                                                                result173.push(e173);
                                                            }
                                                            _rt::cabi_dealloc(base173, len173 * 1, 1);
                                                            result173
                                                        };
                                                        V206::FlagsValue(e206)
                                                    }
                                                    4 => {
                                                        let e206 = {
                                                            let l174 = *base.add(8).cast::<*mut u8>();
                                                            let l175 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len176 = l175;
                                                            _rt::Vec::from_raw_parts(l174.cast(), len176, len176)
                                                        };
                                                        V206::TupleValue(e206)
                                                    }
                                                    5 => {
                                                        let e206 = {
                                                            let l177 = *base.add(8).cast::<*mut u8>();
                                                            let l178 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len179 = l178;
                                                            _rt::Vec::from_raw_parts(l177.cast(), len179, len179)
                                                        };
                                                        V206::ListValue(e206)
                                                    }
                                                    6 => {
                                                        let e206 = {
                                                            let l180 = i32::from(*base.add(8).cast::<u8>());
                                                            match l180 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l181 = *base.add(12).cast::<i32>();
                                                                        l181
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V206::OptionValue(e206)
                                                    }
                                                    7 => {
                                                        let e206 = {
                                                            let l182 = i32::from(*base.add(8).cast::<u8>());
                                                            match l182 {
                                                                0 => {
                                                                    let e = {
                                                                        let l183 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l183 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l184 = *base.add(16).cast::<i32>();
                                                                                    l184
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l185 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l185 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l186 = *base.add(16).cast::<i32>();
                                                                                    l186
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V206::ResultValue(e206)
                                                    }
                                                    8 => {
                                                        let e206 = {
                                                            let l187 = i32::from(*base.add(8).cast::<u8>());
                                                            l187 as u8
                                                        };
                                                        V206::PrimU8(e206)
                                                    }
                                                    9 => {
                                                        let e206 = {
                                                            let l188 = i32::from(*base.add(8).cast::<u16>());
                                                            l188 as u16
                                                        };
                                                        V206::PrimU16(e206)
                                                    }
                                                    10 => {
                                                        let e206 = {
                                                            let l189 = *base.add(8).cast::<i32>();
                                                            l189 as u32
                                                        };
                                                        V206::PrimU32(e206)
                                                    }
                                                    11 => {
                                                        let e206 = {
                                                            let l190 = *base.add(8).cast::<i64>();
                                                            l190 as u64
                                                        };
                                                        V206::PrimU64(e206)
                                                    }
                                                    12 => {
                                                        let e206 = {
                                                            let l191 = i32::from(*base.add(8).cast::<i8>());
                                                            l191 as i8
                                                        };
                                                        V206::PrimS8(e206)
                                                    }
                                                    13 => {
                                                        let e206 = {
                                                            let l192 = i32::from(*base.add(8).cast::<i16>());
                                                            l192 as i16
                                                        };
                                                        V206::PrimS16(e206)
                                                    }
                                                    14 => {
                                                        let e206 = {
                                                            let l193 = *base.add(8).cast::<i32>();
                                                            l193
                                                        };
                                                        V206::PrimS32(e206)
                                                    }
                                                    15 => {
                                                        let e206 = {
                                                            let l194 = *base.add(8).cast::<i64>();
                                                            l194
                                                        };
                                                        V206::PrimS64(e206)
                                                    }
                                                    16 => {
                                                        let e206 = {
                                                            let l195 = *base.add(8).cast::<f32>();
                                                            l195
                                                        };
                                                        V206::PrimFloat32(e206)
                                                    }
                                                    17 => {
                                                        let e206 = {
                                                            let l196 = *base.add(8).cast::<f64>();
                                                            l196
                                                        };
                                                        V206::PrimFloat64(e206)
                                                    }
                                                    18 => {
                                                        let e206 = {
                                                            let l197 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l197 as u32)
                                                        };
                                                        V206::PrimChar(e206)
                                                    }
                                                    19 => {
                                                        let e206 = {
                                                            let l198 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l198 as u8)
                                                        };
                                                        V206::PrimBool(e206)
                                                    }
                                                    20 => {
                                                        let e206 = {
                                                            let l199 = *base.add(8).cast::<*mut u8>();
                                                            let l200 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len201 = l200;
                                                            let bytes201 = _rt::Vec::from_raw_parts(
                                                                l199.cast(),
                                                                len201,
                                                                len201,
                                                            );
                                                            _rt::string_lift(bytes201)
                                                        };
                                                        V206::PrimString(e206)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e206 = {
                                                            let l202 = *base.add(8).cast::<*mut u8>();
                                                            let l203 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len204 = l203;
                                                            let bytes204 = _rt::Vec::from_raw_parts(
                                                                l202.cast(),
                                                                len204,
                                                                len204,
                                                            );
                                                            let l205 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes204),
                                                                },
                                                                l205 as u64,
                                                            )
                                                        };
                                                        V206::Handle(e206)
                                                    }
                                                };
                                                v206
                                            };
                                            result207.push(e207);
                                        }
                                        _rt::cabi_dealloc(
                                            base207,
                                            len207 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let l208 = i32::from(
                                            *base
                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::api::oplog::WrappedFunctionType as V213;
                                        let v213 = match l208 {
                                            0 => V213::ReadLocal,
                                            1 => V213::WriteLocal,
                                            2 => V213::ReadRemote,
                                            3 => V213::WriteRemote,
                                            4 => {
                                                let e213 = {
                                                    let l209 = i32::from(
                                                        *base
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l209 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l210 = *base
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i64>();
                                                                l210 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                V213::WriteRemoteBatched(e213)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e213 = {
                                                    let l211 = i32::from(
                                                        *base
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l211 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l212 = *base
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i64>();
                                                                l212 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                V213::WriteRemoteTransaction(e213)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::ImportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l107 as u64,
                                                nanoseconds: l108 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes111),
                                            request: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result159,
                                            },
                                            response: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result207,
                                            },
                                            wrapped_function_type: v213,
                                        }
                                    };
                                    V641::ImportedFunctionInvoked(e641)
                                }
                                2 => {
                                    let e641 = {
                                        let l214 = *base.add(8).cast::<i64>();
                                        let l215 = *base.add(16).cast::<i32>();
                                        let l216 = *base.add(24).cast::<*mut u8>();
                                        let l217 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len218 = l217;
                                        let bytes218 = _rt::Vec::from_raw_parts(
                                            l216.cast(),
                                            len218,
                                            len218,
                                        );
                                        let l219 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l220 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base269 = l219;
                                        let len269 = l220;
                                        let mut result269 = _rt::Vec::with_capacity(len269);
                                        for i in 0..len269 {
                                            let base = base269
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e269 = {
                                                let l221 = *base.add(0).cast::<*mut u8>();
                                                let l222 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base268 = l221;
                                                let len268 = l222;
                                                let mut result268 = _rt::Vec::with_capacity(len268);
                                                for i in 0..len268 {
                                                    let base = base268
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e268 = {
                                                        let l223 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::rpc::types::WitNode as V267;
                                                        let v267 = match l223 {
                                                            0 => {
                                                                let e267 = {
                                                                    let l224 = *base.add(8).cast::<*mut u8>();
                                                                    let l225 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len226 = l225;
                                                                    _rt::Vec::from_raw_parts(l224.cast(), len226, len226)
                                                                };
                                                                V267::RecordValue(e267)
                                                            }
                                                            1 => {
                                                                let e267 = {
                                                                    let l227 = *base.add(8).cast::<i32>();
                                                                    let l228 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l227 as u32,
                                                                        match l228 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l229 = *base.add(16).cast::<i32>();
                                                                                    l229
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                V267::VariantValue(e267)
                                                            }
                                                            2 => {
                                                                let e267 = {
                                                                    let l230 = *base.add(8).cast::<i32>();
                                                                    l230 as u32
                                                                };
                                                                V267::EnumValue(e267)
                                                            }
                                                            3 => {
                                                                let e267 = {
                                                                    let l231 = *base.add(8).cast::<*mut u8>();
                                                                    let l232 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base234 = l231;
                                                                    let len234 = l232;
                                                                    let mut result234 = _rt::Vec::with_capacity(len234);
                                                                    for i in 0..len234 {
                                                                        let base = base234.add(i * 1);
                                                                        let e234 = {
                                                                            let l233 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l233 as u8)
                                                                        };
                                                                        result234.push(e234);
                                                                    }
                                                                    _rt::cabi_dealloc(base234, len234 * 1, 1);
                                                                    result234
                                                                };
                                                                V267::FlagsValue(e267)
                                                            }
                                                            4 => {
                                                                let e267 = {
                                                                    let l235 = *base.add(8).cast::<*mut u8>();
                                                                    let l236 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len237 = l236;
                                                                    _rt::Vec::from_raw_parts(l235.cast(), len237, len237)
                                                                };
                                                                V267::TupleValue(e267)
                                                            }
                                                            5 => {
                                                                let e267 = {
                                                                    let l238 = *base.add(8).cast::<*mut u8>();
                                                                    let l239 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len240 = l239;
                                                                    _rt::Vec::from_raw_parts(l238.cast(), len240, len240)
                                                                };
                                                                V267::ListValue(e267)
                                                            }
                                                            6 => {
                                                                let e267 = {
                                                                    let l241 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l241 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l242 = *base.add(12).cast::<i32>();
                                                                                l242
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V267::OptionValue(e267)
                                                            }
                                                            7 => {
                                                                let e267 = {
                                                                    let l243 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l243 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l244 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l244 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l245 = *base.add(16).cast::<i32>();
                                                                                            l245
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l246 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l246 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l247 = *base.add(16).cast::<i32>();
                                                                                            l247
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V267::ResultValue(e267)
                                                            }
                                                            8 => {
                                                                let e267 = {
                                                                    let l248 = i32::from(*base.add(8).cast::<u8>());
                                                                    l248 as u8
                                                                };
                                                                V267::PrimU8(e267)
                                                            }
                                                            9 => {
                                                                let e267 = {
                                                                    let l249 = i32::from(*base.add(8).cast::<u16>());
                                                                    l249 as u16
                                                                };
                                                                V267::PrimU16(e267)
                                                            }
                                                            10 => {
                                                                let e267 = {
                                                                    let l250 = *base.add(8).cast::<i32>();
                                                                    l250 as u32
                                                                };
                                                                V267::PrimU32(e267)
                                                            }
                                                            11 => {
                                                                let e267 = {
                                                                    let l251 = *base.add(8).cast::<i64>();
                                                                    l251 as u64
                                                                };
                                                                V267::PrimU64(e267)
                                                            }
                                                            12 => {
                                                                let e267 = {
                                                                    let l252 = i32::from(*base.add(8).cast::<i8>());
                                                                    l252 as i8
                                                                };
                                                                V267::PrimS8(e267)
                                                            }
                                                            13 => {
                                                                let e267 = {
                                                                    let l253 = i32::from(*base.add(8).cast::<i16>());
                                                                    l253 as i16
                                                                };
                                                                V267::PrimS16(e267)
                                                            }
                                                            14 => {
                                                                let e267 = {
                                                                    let l254 = *base.add(8).cast::<i32>();
                                                                    l254
                                                                };
                                                                V267::PrimS32(e267)
                                                            }
                                                            15 => {
                                                                let e267 = {
                                                                    let l255 = *base.add(8).cast::<i64>();
                                                                    l255
                                                                };
                                                                V267::PrimS64(e267)
                                                            }
                                                            16 => {
                                                                let e267 = {
                                                                    let l256 = *base.add(8).cast::<f32>();
                                                                    l256
                                                                };
                                                                V267::PrimFloat32(e267)
                                                            }
                                                            17 => {
                                                                let e267 = {
                                                                    let l257 = *base.add(8).cast::<f64>();
                                                                    l257
                                                                };
                                                                V267::PrimFloat64(e267)
                                                            }
                                                            18 => {
                                                                let e267 = {
                                                                    let l258 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l258 as u32)
                                                                };
                                                                V267::PrimChar(e267)
                                                            }
                                                            19 => {
                                                                let e267 = {
                                                                    let l259 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l259 as u8)
                                                                };
                                                                V267::PrimBool(e267)
                                                            }
                                                            20 => {
                                                                let e267 = {
                                                                    let l260 = *base.add(8).cast::<*mut u8>();
                                                                    let l261 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len262 = l261;
                                                                    let bytes262 = _rt::Vec::from_raw_parts(
                                                                        l260.cast(),
                                                                        len262,
                                                                        len262,
                                                                    );
                                                                    _rt::string_lift(bytes262)
                                                                };
                                                                V267::PrimString(e267)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e267 = {
                                                                    let l263 = *base.add(8).cast::<*mut u8>();
                                                                    let l264 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len265 = l264;
                                                                    let bytes265 = _rt::Vec::from_raw_parts(
                                                                        l263.cast(),
                                                                        len265,
                                                                        len265,
                                                                    );
                                                                    let l266 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        super::super::super::super::golem::rpc::types::Uri {
                                                                            value: _rt::string_lift(bytes265),
                                                                        },
                                                                        l266 as u64,
                                                                    )
                                                                };
                                                                V267::Handle(e267)
                                                            }
                                                        };
                                                        v267
                                                    };
                                                    result268.push(e268);
                                                }
                                                _rt::cabi_dealloc(
                                                    base268,
                                                    len268 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                super::super::super::super::golem::rpc::types::WitValue {
                                                    nodes: result268,
                                                }
                                            };
                                            result269.push(e269);
                                        }
                                        _rt::cabi_dealloc(
                                            base269,
                                            len269 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l270 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l271 = *base
                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len272 = l271;
                                        let bytes272 = _rt::Vec::from_raw_parts(
                                            l270.cast(),
                                            len272,
                                            len272,
                                        );
                                        let l273 = *base
                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l274 = *base
                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len275 = l274;
                                        let bytes275 = _rt::Vec::from_raw_parts(
                                            l273.cast(),
                                            len275,
                                            len275,
                                        );
                                        let l276 = *base
                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l277 = *base
                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base281 = l276;
                                        let len281 = l277;
                                        let mut result281 = _rt::Vec::with_capacity(len281);
                                        for i in 0..len281 {
                                            let base = base281
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e281 = {
                                                let l278 = *base.add(0).cast::<*mut u8>();
                                                let l279 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len280 = l279;
                                                let bytes280 = _rt::Vec::from_raw_parts(
                                                    l278.cast(),
                                                    len280,
                                                    len280,
                                                );
                                                _rt::string_lift(bytes280)
                                            };
                                            result281.push(e281);
                                        }
                                        _rt::cabi_dealloc(
                                            base281,
                                            len281 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l282 = *base
                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l283 = *base
                                            .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base315 = l282;
                                        let len315 = l283;
                                        let mut result315 = _rt::Vec::with_capacity(len315);
                                        for i in 0..len315 {
                                            let base = base315
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e315 = {
                                                let l284 = *base.add(0).cast::<*mut u8>();
                                                let l285 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base314 = l284;
                                                let len314 = l285;
                                                let mut result314 = _rt::Vec::with_capacity(len314);
                                                for i in 0..len314 {
                                                    let base = base314
                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                    let e314 = {
                                                        let l286 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::api::oplog::SpanData as V313;
                                                        let v313 = match l286 {
                                                            0 => {
                                                                let e313 = {
                                                                    let l287 = *base.add(8).cast::<*mut u8>();
                                                                    let l288 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len289 = l288;
                                                                    let bytes289 = _rt::Vec::from_raw_parts(
                                                                        l287.cast(),
                                                                        len289,
                                                                        len289,
                                                                    );
                                                                    let l290 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    let l291 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    let l292 = i32::from(
                                                                        *base
                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l296 = i32::from(
                                                                        *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l298 = *base
                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l299 = *base
                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base308 = l298;
                                                                    let len308 = l299;
                                                                    let mut result308 = _rt::Vec::with_capacity(len308);
                                                                    for i in 0..len308 {
                                                                        let base = base308
                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                        let e308 = {
                                                                            let l300 = *base.add(0).cast::<*mut u8>();
                                                                            let l301 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len302 = l301;
                                                                            let bytes302 = _rt::Vec::from_raw_parts(
                                                                                l300.cast(),
                                                                                len302,
                                                                                len302,
                                                                            );
                                                                            let l303 = i32::from(
                                                                                *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            use super::super::super::super::golem::api::context::AttributeValue as V307;
                                                                            let v307 = match l303 {
                                                                                n => {
                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                    let e307 = {
                                                                                        let l304 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l305 = *base
                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len306 = l305;
                                                                                        let bytes306 = _rt::Vec::from_raw_parts(
                                                                                            l304.cast(),
                                                                                            len306,
                                                                                            len306,
                                                                                        );
                                                                                        _rt::string_lift(bytes306)
                                                                                    };
                                                                                    V307::String(e307)
                                                                                }
                                                                            };
                                                                            super::super::super::super::golem::api::context::Attribute {
                                                                                key: _rt::string_lift(bytes302),
                                                                                value: v307,
                                                                            }
                                                                        };
                                                                        result308.push(e308);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base308,
                                                                        len308 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let l309 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::super::golem::api::oplog::LocalSpanData {
                                                                        span_id: _rt::string_lift(bytes289),
                                                                        start: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                            seconds: l290 as u64,
                                                                            nanoseconds: l291 as u32,
                                                                        },
                                                                        parent: match l292 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l293 = *base
                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l294 = *base
                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len295 = l294;
                                                                                    let bytes295 = _rt::Vec::from_raw_parts(
                                                                                        l293.cast(),
                                                                                        len295,
                                                                                        len295,
                                                                                    );
                                                                                    _rt::string_lift(bytes295)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        linked_context: match l296 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l297 = *base
                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    l297 as u64
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        attributes: result308,
                                                                        inherited: _rt::bool_lift(l309 as u8),
                                                                    }
                                                                };
                                                                V313::LocalSpan(e313)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e313 = {
                                                                    let l310 = *base.add(8).cast::<*mut u8>();
                                                                    let l311 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len312 = l311;
                                                                    let bytes312 = _rt::Vec::from_raw_parts(
                                                                        l310.cast(),
                                                                        len312,
                                                                        len312,
                                                                    );
                                                                    super::super::super::super::golem::api::oplog::ExternalSpanData {
                                                                        span_id: _rt::string_lift(bytes312),
                                                                    }
                                                                };
                                                                V313::ExternalSpan(e313)
                                                            }
                                                        };
                                                        v313
                                                    };
                                                    result314.push(e314);
                                                }
                                                _rt::cabi_dealloc(
                                                    base314,
                                                    len314 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                result314
                                            };
                                            result315.push(e315);
                                        }
                                        _rt::cabi_dealloc(
                                            base315,
                                            len315 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::ExportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l214 as u64,
                                                nanoseconds: l215 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes218),
                                            request: result269,
                                            idempotency_key: _rt::string_lift(bytes272),
                                            trace_id: _rt::string_lift(bytes275),
                                            trace_states: result281,
                                            invocation_context: result315,
                                        }
                                    };
                                    V641::ExportedFunctionInvoked(e641)
                                }
                                3 => {
                                    let e641 = {
                                        let l316 = *base.add(8).cast::<i64>();
                                        let l317 = *base.add(16).cast::<i32>();
                                        let l318 = i32::from(*base.add(24).cast::<u8>());
                                        let l367 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        super::super::super::super::golem::api::oplog::ExportedFunctionCompletedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l316 as u64,
                                                nanoseconds: l317 as u32,
                                            },
                                            response: match l318 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l319 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l320 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base366 = l319;
                                                        let len366 = l320;
                                                        let mut result366 = _rt::Vec::with_capacity(len366);
                                                        for i in 0..len366 {
                                                            let base = base366
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e366 = {
                                                                let l321 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::rpc::types::WitNode as V365;
                                                                let v365 = match l321 {
                                                                    0 => {
                                                                        let e365 = {
                                                                            let l322 = *base.add(8).cast::<*mut u8>();
                                                                            let l323 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len324 = l323;
                                                                            _rt::Vec::from_raw_parts(l322.cast(), len324, len324)
                                                                        };
                                                                        V365::RecordValue(e365)
                                                                    }
                                                                    1 => {
                                                                        let e365 = {
                                                                            let l325 = *base.add(8).cast::<i32>();
                                                                            let l326 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l325 as u32,
                                                                                match l326 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l327 = *base.add(16).cast::<i32>();
                                                                                            l327
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V365::VariantValue(e365)
                                                                    }
                                                                    2 => {
                                                                        let e365 = {
                                                                            let l328 = *base.add(8).cast::<i32>();
                                                                            l328 as u32
                                                                        };
                                                                        V365::EnumValue(e365)
                                                                    }
                                                                    3 => {
                                                                        let e365 = {
                                                                            let l329 = *base.add(8).cast::<*mut u8>();
                                                                            let l330 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base332 = l329;
                                                                            let len332 = l330;
                                                                            let mut result332 = _rt::Vec::with_capacity(len332);
                                                                            for i in 0..len332 {
                                                                                let base = base332.add(i * 1);
                                                                                let e332 = {
                                                                                    let l331 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l331 as u8)
                                                                                };
                                                                                result332.push(e332);
                                                                            }
                                                                            _rt::cabi_dealloc(base332, len332 * 1, 1);
                                                                            result332
                                                                        };
                                                                        V365::FlagsValue(e365)
                                                                    }
                                                                    4 => {
                                                                        let e365 = {
                                                                            let l333 = *base.add(8).cast::<*mut u8>();
                                                                            let l334 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len335 = l334;
                                                                            _rt::Vec::from_raw_parts(l333.cast(), len335, len335)
                                                                        };
                                                                        V365::TupleValue(e365)
                                                                    }
                                                                    5 => {
                                                                        let e365 = {
                                                                            let l336 = *base.add(8).cast::<*mut u8>();
                                                                            let l337 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len338 = l337;
                                                                            _rt::Vec::from_raw_parts(l336.cast(), len338, len338)
                                                                        };
                                                                        V365::ListValue(e365)
                                                                    }
                                                                    6 => {
                                                                        let e365 = {
                                                                            let l339 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l339 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l340 = *base.add(12).cast::<i32>();
                                                                                        l340
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V365::OptionValue(e365)
                                                                    }
                                                                    7 => {
                                                                        let e365 = {
                                                                            let l341 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l341 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l342 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l342 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l343 = *base.add(16).cast::<i32>();
                                                                                                    l343
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l344 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l344 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l345 = *base.add(16).cast::<i32>();
                                                                                                    l345
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V365::ResultValue(e365)
                                                                    }
                                                                    8 => {
                                                                        let e365 = {
                                                                            let l346 = i32::from(*base.add(8).cast::<u8>());
                                                                            l346 as u8
                                                                        };
                                                                        V365::PrimU8(e365)
                                                                    }
                                                                    9 => {
                                                                        let e365 = {
                                                                            let l347 = i32::from(*base.add(8).cast::<u16>());
                                                                            l347 as u16
                                                                        };
                                                                        V365::PrimU16(e365)
                                                                    }
                                                                    10 => {
                                                                        let e365 = {
                                                                            let l348 = *base.add(8).cast::<i32>();
                                                                            l348 as u32
                                                                        };
                                                                        V365::PrimU32(e365)
                                                                    }
                                                                    11 => {
                                                                        let e365 = {
                                                                            let l349 = *base.add(8).cast::<i64>();
                                                                            l349 as u64
                                                                        };
                                                                        V365::PrimU64(e365)
                                                                    }
                                                                    12 => {
                                                                        let e365 = {
                                                                            let l350 = i32::from(*base.add(8).cast::<i8>());
                                                                            l350 as i8
                                                                        };
                                                                        V365::PrimS8(e365)
                                                                    }
                                                                    13 => {
                                                                        let e365 = {
                                                                            let l351 = i32::from(*base.add(8).cast::<i16>());
                                                                            l351 as i16
                                                                        };
                                                                        V365::PrimS16(e365)
                                                                    }
                                                                    14 => {
                                                                        let e365 = {
                                                                            let l352 = *base.add(8).cast::<i32>();
                                                                            l352
                                                                        };
                                                                        V365::PrimS32(e365)
                                                                    }
                                                                    15 => {
                                                                        let e365 = {
                                                                            let l353 = *base.add(8).cast::<i64>();
                                                                            l353
                                                                        };
                                                                        V365::PrimS64(e365)
                                                                    }
                                                                    16 => {
                                                                        let e365 = {
                                                                            let l354 = *base.add(8).cast::<f32>();
                                                                            l354
                                                                        };
                                                                        V365::PrimFloat32(e365)
                                                                    }
                                                                    17 => {
                                                                        let e365 = {
                                                                            let l355 = *base.add(8).cast::<f64>();
                                                                            l355
                                                                        };
                                                                        V365::PrimFloat64(e365)
                                                                    }
                                                                    18 => {
                                                                        let e365 = {
                                                                            let l356 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l356 as u32)
                                                                        };
                                                                        V365::PrimChar(e365)
                                                                    }
                                                                    19 => {
                                                                        let e365 = {
                                                                            let l357 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l357 as u8)
                                                                        };
                                                                        V365::PrimBool(e365)
                                                                    }
                                                                    20 => {
                                                                        let e365 = {
                                                                            let l358 = *base.add(8).cast::<*mut u8>();
                                                                            let l359 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len360 = l359;
                                                                            let bytes360 = _rt::Vec::from_raw_parts(
                                                                                l358.cast(),
                                                                                len360,
                                                                                len360,
                                                                            );
                                                                            _rt::string_lift(bytes360)
                                                                        };
                                                                        V365::PrimString(e365)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e365 = {
                                                                            let l361 = *base.add(8).cast::<*mut u8>();
                                                                            let l362 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len363 = l362;
                                                                            let bytes363 = _rt::Vec::from_raw_parts(
                                                                                l361.cast(),
                                                                                len363,
                                                                                len363,
                                                                            );
                                                                            let l364 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes363),
                                                                                },
                                                                                l364 as u64,
                                                                            )
                                                                        };
                                                                        V365::Handle(e365)
                                                                    }
                                                                };
                                                                v365
                                                            };
                                                            result366.push(e366);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base366,
                                                            len366 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        super::super::super::super::golem::rpc::types::WitValue {
                                                            nodes: result366,
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            consumed_fuel: l367,
                                        }
                                    };
                                    V641::ExportedFunctionCompleted(e641)
                                }
                                4 => {
                                    let e641 = {
                                        let l368 = *base.add(8).cast::<i64>();
                                        let l369 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l368 as u64,
                                            nanoseconds: l369 as u32,
                                        }
                                    };
                                    V641::Suspend(e641)
                                }
                                5 => {
                                    let e641 = {
                                        let l370 = *base.add(8).cast::<i64>();
                                        let l371 = *base.add(16).cast::<i32>();
                                        let l372 = *base.add(24).cast::<*mut u8>();
                                        let l373 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len374 = l373;
                                        let bytes374 = _rt::Vec::from_raw_parts(
                                            l372.cast(),
                                            len374,
                                            len374,
                                        );
                                        super::super::super::super::golem::api::oplog::ErrorParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l370 as u64,
                                                nanoseconds: l371 as u32,
                                            },
                                            error: _rt::string_lift(bytes374),
                                        }
                                    };
                                    V641::Error(e641)
                                }
                                6 => {
                                    let e641 = {
                                        let l375 = *base.add(8).cast::<i64>();
                                        let l376 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l375 as u64,
                                            nanoseconds: l376 as u32,
                                        }
                                    };
                                    V641::NoOp(e641)
                                }
                                7 => {
                                    let e641 = {
                                        let l377 = *base.add(8).cast::<i64>();
                                        let l378 = *base.add(16).cast::<i32>();
                                        let l379 = *base.add(24).cast::<i64>();
                                        let l380 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::JumpParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l377 as u64,
                                                nanoseconds: l378 as u32,
                                            },
                                            start: l379 as u64,
                                            end: l380 as u64,
                                        }
                                    };
                                    V641::Jump(e641)
                                }
                                8 => {
                                    let e641 = {
                                        let l381 = *base.add(8).cast::<i64>();
                                        let l382 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l381 as u64,
                                            nanoseconds: l382 as u32,
                                        }
                                    };
                                    V641::Interrupted(e641)
                                }
                                9 => {
                                    let e641 = {
                                        let l383 = *base.add(8).cast::<i64>();
                                        let l384 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l383 as u64,
                                            nanoseconds: l384 as u32,
                                        }
                                    };
                                    V641::Exited(e641)
                                }
                                10 => {
                                    let e641 = {
                                        let l385 = *base.add(8).cast::<i64>();
                                        let l386 = *base.add(16).cast::<i32>();
                                        let l387 = *base.add(24).cast::<i32>();
                                        let l388 = *base.add(32).cast::<i64>();
                                        let l389 = *base.add(40).cast::<i64>();
                                        let l390 = *base.add(48).cast::<f64>();
                                        let l391 = i32::from(*base.add(56).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::ChangeRetryPolicyParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l385 as u64,
                                                nanoseconds: l386 as u32,
                                            },
                                            retry_policy: super::super::super::super::golem::api::host::RetryPolicy {
                                                max_attempts: l387 as u32,
                                                min_delay: l388 as u64,
                                                max_delay: l389 as u64,
                                                multiplier: l390,
                                                max_jitter_factor: match l391 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l392 = *base.add(64).cast::<f64>();
                                                            l392
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                        }
                                    };
                                    V641::ChangeRetryPolicy(e641)
                                }
                                11 => {
                                    let e641 = {
                                        let l393 = *base.add(8).cast::<i64>();
                                        let l394 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l393 as u64,
                                            nanoseconds: l394 as u32,
                                        }
                                    };
                                    V641::BeginAtomicRegion(e641)
                                }
                                12 => {
                                    let e641 = {
                                        let l395 = *base.add(8).cast::<i64>();
                                        let l396 = *base.add(16).cast::<i32>();
                                        let l397 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndAtomicRegionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l395 as u64,
                                                nanoseconds: l396 as u32,
                                            },
                                            begin_index: l397 as u64,
                                        }
                                    };
                                    V641::EndAtomicRegion(e641)
                                }
                                13 => {
                                    let e641 = {
                                        let l398 = *base.add(8).cast::<i64>();
                                        let l399 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l398 as u64,
                                            nanoseconds: l399 as u32,
                                        }
                                    };
                                    V641::BeginRemoteWrite(e641)
                                }
                                14 => {
                                    let e641 = {
                                        let l400 = *base.add(8).cast::<i64>();
                                        let l401 = *base.add(16).cast::<i32>();
                                        let l402 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndRemoteWriteParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l400 as u64,
                                                nanoseconds: l401 as u32,
                                            },
                                            begin_index: l402 as u64,
                                        }
                                    };
                                    V641::EndRemoteWrite(e641)
                                }
                                15 => {
                                    let e641 = {
                                        let l403 = *base.add(8).cast::<i64>();
                                        let l404 = *base.add(16).cast::<i32>();
                                        let l405 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::AgentInvocation as V465;
                                        let v465 = match l405 {
                                            0 => {
                                                let e465 = {
                                                    let l406 = *base.add(32).cast::<*mut u8>();
                                                    let l407 = *base
                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len408 = l407;
                                                    let bytes408 = _rt::Vec::from_raw_parts(
                                                        l406.cast(),
                                                        len408,
                                                        len408,
                                                    );
                                                    let l409 = *base
                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l410 = *base
                                                        .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len411 = l410;
                                                    let bytes411 = _rt::Vec::from_raw_parts(
                                                        l409.cast(),
                                                        len411,
                                                        len411,
                                                    );
                                                    let l412 = i32::from(
                                                        *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::super::golem::api::oplog::ExportedFunctionInvocationParameters {
                                                        idempotency_key: _rt::string_lift(bytes408),
                                                        function_name: _rt::string_lift(bytes411),
                                                        input: match l412 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l413 = *base
                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l414 = *base
                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base463 = l413;
                                                                    let len463 = l414;
                                                                    let mut result463 = _rt::Vec::with_capacity(len463);
                                                                    for i in 0..len463 {
                                                                        let base = base463
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        let e463 = {
                                                                            let l415 = *base.add(0).cast::<*mut u8>();
                                                                            let l416 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base462 = l415;
                                                                            let len462 = l416;
                                                                            let mut result462 = _rt::Vec::with_capacity(len462);
                                                                            for i in 0..len462 {
                                                                                let base = base462
                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                let e462 = {
                                                                                    let l417 = i32::from(*base.add(0).cast::<u8>());
                                                                                    use super::super::super::super::golem::rpc::types::WitNode as V461;
                                                                                    let v461 = match l417 {
                                                                                        0 => {
                                                                                            let e461 = {
                                                                                                let l418 = *base.add(8).cast::<*mut u8>();
                                                                                                let l419 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len420 = l419;
                                                                                                _rt::Vec::from_raw_parts(l418.cast(), len420, len420)
                                                                                            };
                                                                                            V461::RecordValue(e461)
                                                                                        }
                                                                                        1 => {
                                                                                            let e461 = {
                                                                                                let l421 = *base.add(8).cast::<i32>();
                                                                                                let l422 = i32::from(*base.add(12).cast::<u8>());
                                                                                                (
                                                                                                    l421 as u32,
                                                                                                    match l422 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l423 = *base.add(16).cast::<i32>();
                                                                                                                l423
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                )
                                                                                            };
                                                                                            V461::VariantValue(e461)
                                                                                        }
                                                                                        2 => {
                                                                                            let e461 = {
                                                                                                let l424 = *base.add(8).cast::<i32>();
                                                                                                l424 as u32
                                                                                            };
                                                                                            V461::EnumValue(e461)
                                                                                        }
                                                                                        3 => {
                                                                                            let e461 = {
                                                                                                let l425 = *base.add(8).cast::<*mut u8>();
                                                                                                let l426 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let base428 = l425;
                                                                                                let len428 = l426;
                                                                                                let mut result428 = _rt::Vec::with_capacity(len428);
                                                                                                for i in 0..len428 {
                                                                                                    let base = base428.add(i * 1);
                                                                                                    let e428 = {
                                                                                                        let l427 = i32::from(*base.add(0).cast::<u8>());
                                                                                                        _rt::bool_lift(l427 as u8)
                                                                                                    };
                                                                                                    result428.push(e428);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base428, len428 * 1, 1);
                                                                                                result428
                                                                                            };
                                                                                            V461::FlagsValue(e461)
                                                                                        }
                                                                                        4 => {
                                                                                            let e461 = {
                                                                                                let l429 = *base.add(8).cast::<*mut u8>();
                                                                                                let l430 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len431 = l430;
                                                                                                _rt::Vec::from_raw_parts(l429.cast(), len431, len431)
                                                                                            };
                                                                                            V461::TupleValue(e461)
                                                                                        }
                                                                                        5 => {
                                                                                            let e461 = {
                                                                                                let l432 = *base.add(8).cast::<*mut u8>();
                                                                                                let l433 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len434 = l433;
                                                                                                _rt::Vec::from_raw_parts(l432.cast(), len434, len434)
                                                                                            };
                                                                                            V461::ListValue(e461)
                                                                                        }
                                                                                        6 => {
                                                                                            let e461 = {
                                                                                                let l435 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l435 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l436 = *base.add(12).cast::<i32>();
                                                                                                            l436
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V461::OptionValue(e461)
                                                                                        }
                                                                                        7 => {
                                                                                            let e461 = {
                                                                                                let l437 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l437 {
                                                                                                    0 => {
                                                                                                        let e = {
                                                                                                            let l438 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l438 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l439 = *base.add(16).cast::<i32>();
                                                                                                                        l439
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Ok(e)
                                                                                                    }
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l440 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l440 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l441 = *base.add(16).cast::<i32>();
                                                                                                                        l441
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Err(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V461::ResultValue(e461)
                                                                                        }
                                                                                        8 => {
                                                                                            let e461 = {
                                                                                                let l442 = i32::from(*base.add(8).cast::<u8>());
                                                                                                l442 as u8
                                                                                            };
                                                                                            V461::PrimU8(e461)
                                                                                        }
                                                                                        9 => {
                                                                                            let e461 = {
                                                                                                let l443 = i32::from(*base.add(8).cast::<u16>());
                                                                                                l443 as u16
                                                                                            };
                                                                                            V461::PrimU16(e461)
                                                                                        }
                                                                                        10 => {
                                                                                            let e461 = {
                                                                                                let l444 = *base.add(8).cast::<i32>();
                                                                                                l444 as u32
                                                                                            };
                                                                                            V461::PrimU32(e461)
                                                                                        }
                                                                                        11 => {
                                                                                            let e461 = {
                                                                                                let l445 = *base.add(8).cast::<i64>();
                                                                                                l445 as u64
                                                                                            };
                                                                                            V461::PrimU64(e461)
                                                                                        }
                                                                                        12 => {
                                                                                            let e461 = {
                                                                                                let l446 = i32::from(*base.add(8).cast::<i8>());
                                                                                                l446 as i8
                                                                                            };
                                                                                            V461::PrimS8(e461)
                                                                                        }
                                                                                        13 => {
                                                                                            let e461 = {
                                                                                                let l447 = i32::from(*base.add(8).cast::<i16>());
                                                                                                l447 as i16
                                                                                            };
                                                                                            V461::PrimS16(e461)
                                                                                        }
                                                                                        14 => {
                                                                                            let e461 = {
                                                                                                let l448 = *base.add(8).cast::<i32>();
                                                                                                l448
                                                                                            };
                                                                                            V461::PrimS32(e461)
                                                                                        }
                                                                                        15 => {
                                                                                            let e461 = {
                                                                                                let l449 = *base.add(8).cast::<i64>();
                                                                                                l449
                                                                                            };
                                                                                            V461::PrimS64(e461)
                                                                                        }
                                                                                        16 => {
                                                                                            let e461 = {
                                                                                                let l450 = *base.add(8).cast::<f32>();
                                                                                                l450
                                                                                            };
                                                                                            V461::PrimFloat32(e461)
                                                                                        }
                                                                                        17 => {
                                                                                            let e461 = {
                                                                                                let l451 = *base.add(8).cast::<f64>();
                                                                                                l451
                                                                                            };
                                                                                            V461::PrimFloat64(e461)
                                                                                        }
                                                                                        18 => {
                                                                                            let e461 = {
                                                                                                let l452 = *base.add(8).cast::<i32>();
                                                                                                _rt::char_lift(l452 as u32)
                                                                                            };
                                                                                            V461::PrimChar(e461)
                                                                                        }
                                                                                        19 => {
                                                                                            let e461 = {
                                                                                                let l453 = i32::from(*base.add(8).cast::<u8>());
                                                                                                _rt::bool_lift(l453 as u8)
                                                                                            };
                                                                                            V461::PrimBool(e461)
                                                                                        }
                                                                                        20 => {
                                                                                            let e461 = {
                                                                                                let l454 = *base.add(8).cast::<*mut u8>();
                                                                                                let l455 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len456 = l455;
                                                                                                let bytes456 = _rt::Vec::from_raw_parts(
                                                                                                    l454.cast(),
                                                                                                    len456,
                                                                                                    len456,
                                                                                                );
                                                                                                _rt::string_lift(bytes456)
                                                                                            };
                                                                                            V461::PrimString(e461)
                                                                                        }
                                                                                        n => {
                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                            let e461 = {
                                                                                                let l457 = *base.add(8).cast::<*mut u8>();
                                                                                                let l458 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len459 = l458;
                                                                                                let bytes459 = _rt::Vec::from_raw_parts(
                                                                                                    l457.cast(),
                                                                                                    len459,
                                                                                                    len459,
                                                                                                );
                                                                                                let l460 = *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<i64>();
                                                                                                (
                                                                                                    super::super::super::super::golem::rpc::types::Uri {
                                                                                                        value: _rt::string_lift(bytes459),
                                                                                                    },
                                                                                                    l460 as u64,
                                                                                                )
                                                                                            };
                                                                                            V461::Handle(e461)
                                                                                        }
                                                                                    };
                                                                                    v461
                                                                                };
                                                                                result462.push(e462);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base462,
                                                                                len462 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                8,
                                                                            );
                                                                            super::super::super::super::golem::rpc::types::WitValue {
                                                                                nodes: result462,
                                                                            }
                                                                        };
                                                                        result463.push(e463);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base463,
                                                                        len463 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result463
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V465::ExportedFunction(e465)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e465 = {
                                                    let l464 = *base.add(32).cast::<i64>();
                                                    l464 as u64
                                                };
                                                V465::ManualUpdate(e465)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingAgentInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l403 as u64,
                                                nanoseconds: l404 as u32,
                                            },
                                            invocation: v465,
                                        }
                                    };
                                    V641::PendingAgentInvocation(e641)
                                }
                                16 => {
                                    let e641 = {
                                        let l466 = *base.add(8).cast::<i64>();
                                        let l467 = *base.add(16).cast::<i32>();
                                        let l468 = *base.add(24).cast::<i64>();
                                        let l469 = i32::from(*base.add(32).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::UpdateDescription as V473;
                                        let v473 = match l469 {
                                            0 => V473::AutoUpdate,
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e473 = {
                                                    let l470 = *base
                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l471 = *base
                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len472 = l471;
                                                    _rt::Vec::from_raw_parts(l470.cast(), len472, len472)
                                                };
                                                V473::SnapshotBased(e473)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l466 as u64,
                                                nanoseconds: l467 as u32,
                                            },
                                            target_version: l468 as u64,
                                            update_description: v473,
                                        }
                                    };
                                    V641::PendingUpdate(e641)
                                }
                                17 => {
                                    let e641 = {
                                        let l474 = *base.add(8).cast::<i64>();
                                        let l475 = *base.add(16).cast::<i32>();
                                        let l476 = *base.add(24).cast::<i64>();
                                        let l477 = *base.add(32).cast::<i64>();
                                        let l478 = *base.add(40).cast::<*mut u8>();
                                        let l479 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base495 = l478;
                                        let len495 = l479;
                                        let mut result495 = _rt::Vec::with_capacity(len495);
                                        for i in 0..len495 {
                                            let base = base495
                                                .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                            let e495 = {
                                                let l480 = *base.add(0).cast::<*mut u8>();
                                                let l481 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len482 = l481;
                                                let bytes482 = _rt::Vec::from_raw_parts(
                                                    l480.cast(),
                                                    len482,
                                                    len482,
                                                );
                                                let l483 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l484 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len485 = l484;
                                                let bytes485 = _rt::Vec::from_raw_parts(
                                                    l483.cast(),
                                                    len485,
                                                    len485,
                                                );
                                                let l486 = *base
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l487 = *base
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base494 = l486;
                                                let len494 = l487;
                                                let mut result494 = _rt::Vec::with_capacity(len494);
                                                for i in 0..len494 {
                                                    let base = base494
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e494 = {
                                                        let l488 = *base.add(0).cast::<*mut u8>();
                                                        let l489 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len490 = l489;
                                                        let bytes490 = _rt::Vec::from_raw_parts(
                                                            l488.cast(),
                                                            len490,
                                                            len490,
                                                        );
                                                        let l491 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l492 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len493 = l492;
                                                        let bytes493 = _rt::Vec::from_raw_parts(
                                                            l491.cast(),
                                                            len493,
                                                            len493,
                                                        );
                                                        (_rt::string_lift(bytes490), _rt::string_lift(bytes493))
                                                    };
                                                    result494.push(e494);
                                                }
                                                _rt::cabi_dealloc(
                                                    base494,
                                                    len494 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    name: _rt::string_lift(bytes482),
                                                    version: _rt::string_lift(bytes485),
                                                    parameters: result494,
                                                }
                                            };
                                            result495.push(e495);
                                        }
                                        _rt::cabi_dealloc(
                                            base495,
                                            len495 * (6 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::SuccessfulUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l474 as u64,
                                                nanoseconds: l475 as u32,
                                            },
                                            target_version: l476 as u64,
                                            new_component_size: l477 as u64,
                                            new_active_plugins: result495,
                                        }
                                    };
                                    V641::SuccessfulUpdate(e641)
                                }
                                18 => {
                                    let e641 = {
                                        let l496 = *base.add(8).cast::<i64>();
                                        let l497 = *base.add(16).cast::<i32>();
                                        let l498 = *base.add(24).cast::<i64>();
                                        let l499 = i32::from(*base.add(32).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::FailedUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l496 as u64,
                                                nanoseconds: l497 as u32,
                                            },
                                            target_version: l498 as u64,
                                            details: match l499 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l500 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l501 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len502 = l501;
                                                        let bytes502 = _rt::Vec::from_raw_parts(
                                                            l500.cast(),
                                                            len502,
                                                            len502,
                                                        );
                                                        _rt::string_lift(bytes502)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V641::FailedUpdate(e641)
                                }
                                19 => {
                                    let e641 = {
                                        let l503 = *base.add(8).cast::<i64>();
                                        let l504 = *base.add(16).cast::<i32>();
                                        let l505 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::GrowMemoryParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l503 as u64,
                                                nanoseconds: l504 as u32,
                                            },
                                            delta: l505 as u64,
                                        }
                                    };
                                    V641::GrowMemory(e641)
                                }
                                20 => {
                                    let e641 = {
                                        let l506 = *base.add(8).cast::<i64>();
                                        let l507 = *base.add(16).cast::<i32>();
                                        let l508 = *base.add(24).cast::<i64>();
                                        let l509 = *base.add(32).cast::<*mut u8>();
                                        let l510 = *base
                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len511 = l510;
                                        let bytes511 = _rt::Vec::from_raw_parts(
                                            l509.cast(),
                                            len511,
                                            len511,
                                        );
                                        let l512 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l513 = *base
                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len514 = l513;
                                        let bytes514 = _rt::Vec::from_raw_parts(
                                            l512.cast(),
                                            len514,
                                            len514,
                                        );
                                        super::super::super::super::golem::api::oplog::CreateResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l506 as u64,
                                                nanoseconds: l507 as u32,
                                            },
                                            resource_id: l508 as u64,
                                            name: _rt::string_lift(bytes511),
                                            owner: _rt::string_lift(bytes514),
                                        }
                                    };
                                    V641::CreateResource(e641)
                                }
                                21 => {
                                    let e641 = {
                                        let l515 = *base.add(8).cast::<i64>();
                                        let l516 = *base.add(16).cast::<i32>();
                                        let l517 = *base.add(24).cast::<i64>();
                                        let l518 = *base.add(32).cast::<*mut u8>();
                                        let l519 = *base
                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len520 = l519;
                                        let bytes520 = _rt::Vec::from_raw_parts(
                                            l518.cast(),
                                            len520,
                                            len520,
                                        );
                                        let l521 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l522 = *base
                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len523 = l522;
                                        let bytes523 = _rt::Vec::from_raw_parts(
                                            l521.cast(),
                                            len523,
                                            len523,
                                        );
                                        super::super::super::super::golem::api::oplog::DropResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l515 as u64,
                                                nanoseconds: l516 as u32,
                                            },
                                            resource_id: l517 as u64,
                                            name: _rt::string_lift(bytes520),
                                            owner: _rt::string_lift(bytes523),
                                        }
                                    };
                                    V641::DropResource(e641)
                                }
                                22 => {
                                    let e641 = {
                                        let l524 = *base.add(8).cast::<i64>();
                                        let l525 = *base.add(16).cast::<i32>();
                                        let l526 = i32::from(*base.add(24).cast::<u8>());
                                        let l527 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l528 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len529 = l528;
                                        let bytes529 = _rt::Vec::from_raw_parts(
                                            l527.cast(),
                                            len529,
                                            len529,
                                        );
                                        let l530 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l531 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len532 = l531;
                                        let bytes532 = _rt::Vec::from_raw_parts(
                                            l530.cast(),
                                            len532,
                                            len532,
                                        );
                                        super::super::super::super::golem::api::oplog::LogParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l524 as u64,
                                                nanoseconds: l525 as u32,
                                            },
                                            level: super::super::super::super::golem::api::oplog::LogLevel::_lift(
                                                l526 as u8,
                                            ),
                                            context: _rt::string_lift(bytes529),
                                            message: _rt::string_lift(bytes532),
                                        }
                                    };
                                    V641::Log(e641)
                                }
                                23 => {
                                    let e641 = {
                                        let l533 = *base.add(8).cast::<i64>();
                                        let l534 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l533 as u64,
                                            nanoseconds: l534 as u32,
                                        }
                                    };
                                    V641::Restart(e641)
                                }
                                24 => {
                                    let e641 = {
                                        let l535 = *base.add(8).cast::<i64>();
                                        let l536 = *base.add(16).cast::<i32>();
                                        let l537 = *base.add(24).cast::<*mut u8>();
                                        let l538 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len539 = l538;
                                        let bytes539 = _rt::Vec::from_raw_parts(
                                            l537.cast(),
                                            len539,
                                            len539,
                                        );
                                        let l540 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l541 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len542 = l541;
                                        let bytes542 = _rt::Vec::from_raw_parts(
                                            l540.cast(),
                                            len542,
                                            len542,
                                        );
                                        let l543 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l544 = *base
                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base551 = l543;
                                        let len551 = l544;
                                        let mut result551 = _rt::Vec::with_capacity(len551);
                                        for i in 0..len551 {
                                            let base = base551
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e551 = {
                                                let l545 = *base.add(0).cast::<*mut u8>();
                                                let l546 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len547 = l546;
                                                let bytes547 = _rt::Vec::from_raw_parts(
                                                    l545.cast(),
                                                    len547,
                                                    len547,
                                                );
                                                let l548 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l549 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len550 = l549;
                                                let bytes550 = _rt::Vec::from_raw_parts(
                                                    l548.cast(),
                                                    len550,
                                                    len550,
                                                );
                                                (_rt::string_lift(bytes547), _rt::string_lift(bytes550))
                                            };
                                            result551.push(e551);
                                        }
                                        _rt::cabi_dealloc(
                                            base551,
                                            len551 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::ActivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l535 as u64,
                                                nanoseconds: l536 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                name: _rt::string_lift(bytes539),
                                                version: _rt::string_lift(bytes542),
                                                parameters: result551,
                                            },
                                        }
                                    };
                                    V641::ActivatePlugin(e641)
                                }
                                25 => {
                                    let e641 = {
                                        let l552 = *base.add(8).cast::<i64>();
                                        let l553 = *base.add(16).cast::<i32>();
                                        let l554 = *base.add(24).cast::<*mut u8>();
                                        let l555 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len556 = l555;
                                        let bytes556 = _rt::Vec::from_raw_parts(
                                            l554.cast(),
                                            len556,
                                            len556,
                                        );
                                        let l557 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l558 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len559 = l558;
                                        let bytes559 = _rt::Vec::from_raw_parts(
                                            l557.cast(),
                                            len559,
                                            len559,
                                        );
                                        let l560 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l561 = *base
                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base568 = l560;
                                        let len568 = l561;
                                        let mut result568 = _rt::Vec::with_capacity(len568);
                                        for i in 0..len568 {
                                            let base = base568
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e568 = {
                                                let l562 = *base.add(0).cast::<*mut u8>();
                                                let l563 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len564 = l563;
                                                let bytes564 = _rt::Vec::from_raw_parts(
                                                    l562.cast(),
                                                    len564,
                                                    len564,
                                                );
                                                let l565 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l566 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len567 = l566;
                                                let bytes567 = _rt::Vec::from_raw_parts(
                                                    l565.cast(),
                                                    len567,
                                                    len567,
                                                );
                                                (_rt::string_lift(bytes564), _rt::string_lift(bytes567))
                                            };
                                            result568.push(e568);
                                        }
                                        _rt::cabi_dealloc(
                                            base568,
                                            len568 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::DeactivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l552 as u64,
                                                nanoseconds: l553 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                name: _rt::string_lift(bytes556),
                                                version: _rt::string_lift(bytes559),
                                                parameters: result568,
                                            },
                                        }
                                    };
                                    V641::DeactivatePlugin(e641)
                                }
                                26 => {
                                    let e641 = {
                                        let l569 = *base.add(8).cast::<i64>();
                                        let l570 = *base.add(16).cast::<i32>();
                                        let l571 = *base.add(24).cast::<i64>();
                                        let l572 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RevertParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l569 as u64,
                                                nanoseconds: l570 as u32,
                                            },
                                            start: l571 as u64,
                                            end: l572 as u64,
                                        }
                                    };
                                    V641::Revert(e641)
                                }
                                27 => {
                                    let e641 = {
                                        let l573 = *base.add(8).cast::<i64>();
                                        let l574 = *base.add(16).cast::<i32>();
                                        let l575 = *base.add(24).cast::<*mut u8>();
                                        let l576 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len577 = l576;
                                        let bytes577 = _rt::Vec::from_raw_parts(
                                            l575.cast(),
                                            len577,
                                            len577,
                                        );
                                        super::super::super::super::golem::api::oplog::CancelInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l573 as u64,
                                                nanoseconds: l574 as u32,
                                            },
                                            idempotency_key: _rt::string_lift(bytes577),
                                        }
                                    };
                                    V641::CancelInvocation(e641)
                                }
                                28 => {
                                    let e641 = {
                                        let l578 = *base.add(8).cast::<i64>();
                                        let l579 = *base.add(16).cast::<i32>();
                                        let l580 = *base.add(24).cast::<*mut u8>();
                                        let l581 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len582 = l581;
                                        let bytes582 = _rt::Vec::from_raw_parts(
                                            l580.cast(),
                                            len582,
                                            len582,
                                        );
                                        let l583 = i32::from(
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l587 = i32::from(
                                            *base
                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l591 = *base
                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l592 = *base
                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base601 = l591;
                                        let len601 = l592;
                                        let mut result601 = _rt::Vec::with_capacity(len601);
                                        for i in 0..len601 {
                                            let base = base601
                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                            let e601 = {
                                                let l593 = *base.add(0).cast::<*mut u8>();
                                                let l594 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len595 = l594;
                                                let bytes595 = _rt::Vec::from_raw_parts(
                                                    l593.cast(),
                                                    len595,
                                                    len595,
                                                );
                                                let l596 = i32::from(
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                use super::super::super::super::golem::api::context::AttributeValue as V600;
                                                let v600 = match l596 {
                                                    n => {
                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                        let e600 = {
                                                            let l597 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l598 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len599 = l598;
                                                            let bytes599 = _rt::Vec::from_raw_parts(
                                                                l597.cast(),
                                                                len599,
                                                                len599,
                                                            );
                                                            _rt::string_lift(bytes599)
                                                        };
                                                        V600::String(e600)
                                                    }
                                                };
                                                super::super::super::super::golem::api::context::Attribute {
                                                    key: _rt::string_lift(bytes595),
                                                    value: v600,
                                                }
                                            };
                                            result601.push(e601);
                                        }
                                        _rt::cabi_dealloc(
                                            base601,
                                            len601 * (5 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::StartSpanParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l578 as u64,
                                                nanoseconds: l579 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes582),
                                            parent: match l583 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l584 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l585 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len586 = l585;
                                                        let bytes586 = _rt::Vec::from_raw_parts(
                                                            l584.cast(),
                                                            len586,
                                                            len586,
                                                        );
                                                        _rt::string_lift(bytes586)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            linked_context: match l587 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l588 = *base
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l589 = *base
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len590 = l589;
                                                        let bytes590 = _rt::Vec::from_raw_parts(
                                                            l588.cast(),
                                                            len590,
                                                            len590,
                                                        );
                                                        _rt::string_lift(bytes590)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            attributes: result601,
                                        }
                                    };
                                    V641::StartSpan(e641)
                                }
                                29 => {
                                    let e641 = {
                                        let l602 = *base.add(8).cast::<i64>();
                                        let l603 = *base.add(16).cast::<i32>();
                                        let l604 = *base.add(24).cast::<*mut u8>();
                                        let l605 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len606 = l605;
                                        let bytes606 = _rt::Vec::from_raw_parts(
                                            l604.cast(),
                                            len606,
                                            len606,
                                        );
                                        super::super::super::super::golem::api::oplog::FinishSpanParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l602 as u64,
                                                nanoseconds: l603 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes606),
                                        }
                                    };
                                    V641::FinishSpan(e641)
                                }
                                30 => {
                                    let e641 = {
                                        let l607 = *base.add(8).cast::<i64>();
                                        let l608 = *base.add(16).cast::<i32>();
                                        let l609 = *base.add(24).cast::<*mut u8>();
                                        let l610 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len611 = l610;
                                        let bytes611 = _rt::Vec::from_raw_parts(
                                            l609.cast(),
                                            len611,
                                            len611,
                                        );
                                        let l612 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l613 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len614 = l613;
                                        let bytes614 = _rt::Vec::from_raw_parts(
                                            l612.cast(),
                                            len614,
                                            len614,
                                        );
                                        let l615 = i32::from(
                                            *base
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::api::context::AttributeValue as V619;
                                        let v619 = match l615 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e619 = {
                                                    let l616 = *base
                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l617 = *base
                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len618 = l617;
                                                    let bytes618 = _rt::Vec::from_raw_parts(
                                                        l616.cast(),
                                                        len618,
                                                        len618,
                                                    );
                                                    _rt::string_lift(bytes618)
                                                };
                                                V619::String(e619)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::SetSpanAttributeParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l607 as u64,
                                                nanoseconds: l608 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes611),
                                            key: _rt::string_lift(bytes614),
                                            value: v619,
                                        }
                                    };
                                    V641::SetSpanAttribute(e641)
                                }
                                31 => {
                                    let e641 = {
                                        let l620 = *base.add(8).cast::<i64>();
                                        let l621 = *base.add(16).cast::<i32>();
                                        let l622 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::super::golem::api::host::PersistenceLevel as V623;
                                        let v623 = match l622 {
                                            0 => V623::PersistNothing,
                                            1 => V623::PersistRemoteSideEffects,
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                V623::Smart
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::ChangePersistenceLevelParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l620 as u64,
                                                nanoseconds: l621 as u32,
                                            },
                                            persistence_level: v623,
                                        }
                                    };
                                    V641::ChangePersistenceLevel(e641)
                                }
                                32 => {
                                    let e641 = {
                                        let l624 = *base.add(8).cast::<i64>();
                                        let l625 = *base.add(16).cast::<i32>();
                                        let l626 = *base.add(24).cast::<*mut u8>();
                                        let l627 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len628 = l627;
                                        let bytes628 = _rt::Vec::from_raw_parts(
                                            l626.cast(),
                                            len628,
                                            len628,
                                        );
                                        super::super::super::super::golem::api::oplog::BeginRemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l624 as u64,
                                                nanoseconds: l625 as u32,
                                            },
                                            transaction_id: _rt::string_lift(bytes628),
                                        }
                                    };
                                    V641::BeginRemoteTransaction(e641)
                                }
                                33 => {
                                    let e641 = {
                                        let l629 = *base.add(8).cast::<i64>();
                                        let l630 = *base.add(16).cast::<i32>();
                                        let l631 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l629 as u64,
                                                nanoseconds: l630 as u32,
                                            },
                                            begin_index: l631 as u64,
                                        }
                                    };
                                    V641::PreCommitRemoteTransaction(e641)
                                }
                                34 => {
                                    let e641 = {
                                        let l632 = *base.add(8).cast::<i64>();
                                        let l633 = *base.add(16).cast::<i32>();
                                        let l634 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l632 as u64,
                                                nanoseconds: l633 as u32,
                                            },
                                            begin_index: l634 as u64,
                                        }
                                    };
                                    V641::PreRollbackRemoteTransaction(e641)
                                }
                                35 => {
                                    let e641 = {
                                        let l635 = *base.add(8).cast::<i64>();
                                        let l636 = *base.add(16).cast::<i32>();
                                        let l637 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l635 as u64,
                                                nanoseconds: l636 as u32,
                                            },
                                            begin_index: l637 as u64,
                                        }
                                    };
                                    V641::CommittedRemoteTransaction(e641)
                                }
                                n => {
                                    debug_assert_eq!(n, 36, "invalid enum discriminant");
                                    let e641 = {
                                        let l638 = *base.add(8).cast::<i64>();
                                        let l639 = *base.add(16).cast::<i32>();
                                        let l640 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l638 as u64,
                                                nanoseconds: l639 as u32,
                                            },
                                            begin_index: l640 as u64,
                                        }
                                    };
                                    V641::RolledBackRemoteTransaction(e641)
                                }
                            };
                            v641
                        };
                        result642.push(e642);
                    }
                    _rt::cabi_dealloc(
                        base642,
                        len642 * (120 + 10 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result643 = T::process(
                        AccountInfo {
                            account_id: super::super::super::super::golem::api::host::AccountId {
                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l0 as u64,
                                    low_bits: l1 as u64,
                                },
                            },
                        },
                        result10,
                        super::super::super::super::golem::rpc::types::ComponentId {
                            uuid: super::super::super::super::golem::rpc::types::Uuid {
                                high_bits: l11 as u64,
                                low_bits: l12 as u64,
                            },
                        },
                        super::super::super::super::golem::rpc::types::AgentId {
                            component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l13 as u64,
                                    low_bits: l14 as u64,
                                },
                            },
                            agent_id: _rt::string_lift(bytes17),
                        },
                        super::super::super::super::golem::api::host::AgentMetadata {
                            agent_id: super::super::super::super::golem::rpc::types::AgentId {
                                component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l18 as u64,
                                        low_bits: l19 as u64,
                                    },
                                },
                                agent_id: _rt::string_lift(bytes22),
                            },
                            args: result28,
                            env: result37,
                            config_vars: result46,
                            status: super::super::super::super::golem::api::host::AgentStatus::_lift(
                                l47 as u8,
                            ),
                            component_version: l48 as u64,
                            retry_count: l49 as u64,
                        },
                        l50 as u64,
                        result642,
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        96 + 14 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr644 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result643 {
                        Ok(_) => {
                            *ptr644.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr644.add(0).cast::<u8>() = (1i32) as u8;
                            let vec645 = (e.into_bytes()).into_boxed_slice();
                            let ptr645 = vec645.as_ptr().cast::<u8>();
                            let len645 = vec645.len();
                            ::core::mem::forget(vec645);
                            *ptr644
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len645;
                            *ptr644
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr645.cast_mut();
                        }
                    };
                    ptr644
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_process<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Called when one of the agents the plugin is activated on has written new entries to its oplog.
                    ///
                    /// There are no guarantees for the number of processors running at the same time, and different entries from the same agent
                    /// may be sent to different processor instances.
                    ///
                    /// The `account-info` parameters contains details of the account the installation belongs to.
                    /// The `config` parameter contains the configuration parameters for the plugin, as specified in the plugin installation
                    /// The `component-id` parameter contains the identifier of the component the plugin was installed to.
                    /// The `agent-id` parameter identifies the agent.
                    /// The `metadata` parameter contains the latest metadata of the agent.
                    /// The `first-entry-index` parameter contains the index of the first entry in the list of `entries`.
                    /// The `entries` parameter always contains at least one element.
                    fn process(
                        account_info: AccountInfo,
                        config: _rt::Vec<(_rt::String, _rt::String)>,
                        component_id: ComponentId,
                        agent_id: AgentId,
                        metadata: AgentMetadata,
                        first_entry_index: OplogIndex,
                        entries: _rt::Vec<OplogEntry>,
                    ) -> Result<(), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_api_oplog_processor_1_1_7_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:api/oplog-processor@1.1.7#process")] unsafe extern "C" fn
                        export_process(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_process_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:api/oplog-processor@1.1.7#process")] unsafe
                        extern "C" fn _post_return_process(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_process::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_api_oplog_processor_1_1_7_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 3 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 3
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
        pub mod component {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_invoked_functions_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_invoked_functions();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_invoked_functions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                pub trait Guest {
                    fn get_invoked_functions() -> _rt::Vec<_rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_component_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:component/api#get-invoked-functions")] unsafe extern "C"
                        fn export_get_invoked_functions() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_invoked_functions_cabi::<$ty >
                        () } } #[unsafe (export_name =
                        "cabi_post_golem:component/api#get-invoked-functions")] unsafe
                        extern "C" fn _post_return_get_invoked_functions(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_invoked_functions::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_component_api_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_oplog_processor_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::component::api::__export_golem_component_api_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::component::api);
        $($path_to_types_root)*::
        exports::golem::api::oplog_processor::__export_golem_api_oplog_processor_1_1_7_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::api::oplog_processor);
    };
}
#[doc(inline)]
pub(crate) use __export_oplog_processor_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:component:oplog-processor:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 11207] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc1V\x01A\x02\x01A(\x01\
B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\x01\
\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-cloc\
k@0.2.3\x05\0\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\
\x04\0\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[me\
thod]pollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04pol\
l\x01\x06\x03\0\x12wasi:io/poll@0.2.3\x05\x01\x02\x03\0\0\x08datetime\x02\x03\0\x01\
\x08pollable\x01BU\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\
\x03\x04\0\x08pollable\x03\0\x02\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uu\
id\x03\0\x04\x01r\x01\x04uuid\x05\x04\0\x0ccomponent-id\x03\0\x06\x01r\x02\x0cco\
mponent-id\x07\x08agent-ids\x04\0\x08agent-id\x03\0\x08\x01z\x04\0\x0anode-index\
\x03\0\x0a\x01w\x04\0\x0bresource-id\x03\0\x0c\x01m\x02\x05owned\x08borrowed\x04\
\0\x0dresource-mode\x03\0\x0e\x01o\x02s\x0b\x01p\x10\x01k\x0b\x01o\x02s\x12\x01p\
\x13\x01ps\x01p\x0b\x01o\x02\x12\x12\x01o\x02\x0d\x0f\x01q\x16\x0brecord-type\x01\
\x11\0\x0cvariant-type\x01\x14\0\x09enum-type\x01\x15\0\x0aflags-type\x01\x15\0\x0a\
tuple-type\x01\x16\0\x09list-type\x01\x0b\0\x0boption-type\x01\x0b\0\x0bresult-t\
ype\x01\x17\0\x0cprim-u8-type\0\0\x0dprim-u16-type\0\0\x0dprim-u32-type\0\0\x0dp\
rim-u64-type\0\0\x0cprim-s8-type\0\0\x0dprim-s16-type\0\0\x0dprim-s32-type\0\0\x0d\
prim-s64-type\0\0\x0dprim-f32-type\0\0\x0dprim-f64-type\0\0\x0eprim-char-type\0\0\
\x0eprim-bool-type\0\0\x10prim-string-type\0\0\x0bhandle-type\x01\x18\0\x04\0\x0d\
wit-type-node\x03\0\x19\x01ks\x01r\x03\x04name\x1b\x05owner\x1b\x04type\x1a\x04\0\
\x13named-wit-type-node\x03\0\x1c\x01p\x1d\x01r\x01\x05nodes\x1e\x04\0\x08wit-ty\
pe\x03\0\x1f\x01r\x01\x05values\x04\0\x03uri\x03\0!\x01o\x02y\x12\x01p\x7f\x01j\x01\
\x12\x01\x12\x01o\x02\"w\x01q\x16\x0crecord-value\x01\x16\0\x0dvariant-value\x01\
#\0\x0aenum-value\x01y\0\x0bflags-value\x01$\0\x0btuple-value\x01\x16\0\x0alist-\
value\x01\x16\0\x0coption-value\x01\x12\0\x0cresult-value\x01%\0\x07prim-u8\x01}\
\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08\
prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0c\
prim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01\
s\0\x06handle\x01&\0\x04\0\x08wit-node\x03\0'\x01p(\x01r\x01\x05nodes)\x04\0\x09\
wit-value\x03\0*\x01r\x02\x05value+\x03typ\x20\x04\0\x0evalue-and-type\x03\0,\x01\
q\x04\x0eprotocol-error\x01s\0\x06denied\x01s\0\x09not-found\x01s\0\x15remote-in\
ternal-error\x01s\0\x04\0\x09rpc-error\x03\0.\x04\0\x08wasm-rpc\x03\x01\x04\0\x14\
future-invoke-result\x03\x01\x04\0\x12cancellation-token\x03\x01\x01i0\x01@\x01\x08\
agent-id\x09\03\x04\0\x15[constructor]wasm-rpc\x014\x01h0\x01p+\x01j\x01+\x01/\x01\
@\x03\x04self5\x0dfunction-names\x0ffunction-params6\07\x04\0![method]wasm-rpc.i\
nvoke-and-await\x018\x01j\0\x01/\x01@\x03\x04self5\x0dfunction-names\x0ffunction\
-params6\09\x04\0\x17[method]wasm-rpc.invoke\x01:\x01i1\x01@\x03\x04self5\x0dfun\
ction-names\x0ffunction-params6\0;\x04\0'[method]wasm-rpc.async-invoke-and-await\
\x01<\x01@\x04\x04self5\x0escheduled-time\x01\x0dfunction-names\x0ffunction-para\
ms6\x01\0\x04\0$[method]wasm-rpc.schedule-invocation\x01=\x01i2\x01@\x04\x04self\
5\x0escheduled-time\x01\x0dfunction-names\x0ffunction-params6\0>\x04\0/[method]w\
asm-rpc.schedule-cancelable-invocation\x01?\x01h1\x01i\x03\x01@\x01\x04self\xc0\0\
\0\xc1\0\x04\0&[method]future-invoke-result.subscribe\x01B\x01k7\x01@\x01\x04sel\
f\xc0\0\0\xc3\0\x04\0\x20[method]future-invoke-result.get\x01D\x01h2\x01@\x01\x04\
self\xc5\0\x01\0\x04\0![method]cancellation-token.cancel\x01F\x01j\x01\x05\x01s\x01\
@\x01\x04uuids\0\xc7\0\x04\0\x0aparse-uuid\x01H\x01@\x01\x04uuid\x05\0s\x04\0\x0e\
uuid-to-string\x01I\x03\0\x15golem:rpc/types@0.2.2\x05\x04\x01B\x0f\x02\x03\x02\x01\
\x03\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01w\x04\0\x08dur\
ation\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\0\x0aresoluti\
on\x01\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-instant\x01\x09\
\x01@\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\0!wasi:clock\
s/monotonic-clock@0.2.3\x05\x05\x02\x03\0\x03\x08duration\x02\x03\0\x02\x0ccompo\
nent-id\x02\x03\0\x02\x04uuid\x02\x03\0\x02\x0evalue-and-type\x02\x03\0\x02\x08a\
gent-id\x01B\x85\x01\x02\x03\x02\x01\x06\x04\0\x08duration\x03\0\0\x02\x03\x02\x01\
\x07\x04\0\x0ccomponent-id\x03\0\x02\x02\x03\x02\x01\x08\x04\0\x04uuid\x03\0\x04\
\x02\x03\x02\x01\x09\x04\0\x0evalue-and-type\x03\0\x06\x02\x03\x02\x01\x0a\x04\0\
\x08agent-id\x03\0\x08\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\x0a\x01w\x04\0\
\x0boplog-index\x03\0\x0c\x01r\x02\x08agent-id\x09\x09oplog-idx\x0d\x04\0\x0apro\
mise-id\x03\0\x0e\x01w\x04\0\x11component-version\x03\0\x10\x01r\x01\x04uuid\x05\
\x04\0\x0aaccount-id\x03\0\x12\x01r\x01\x04uuid\x05\x04\0\x0eenvironment-id\x03\0\
\x14\x01ku\x01r\x05\x0cmax-attemptsy\x09min-delay\x01\x09max-delay\x01\x0amultip\
lieru\x11max-jitter-factor\x16\x04\0\x0cretry-policy\x03\0\x17\x01q\x03\x0fpersi\
st-nothing\0\0\x1bpersist-remote-side-effects\0\0\x05smart\0\0\x04\0\x11persiste\
nce-level\x03\0\x19\x01m\x02\x09automatic\x0esnapshot-based\x04\0\x0bupdate-mode\
\x03\0\x1b\x01m\x06\x05equal\x09not-equal\x0dgreater-equal\x07greater\x0aless-eq\
ual\x04less\x04\0\x11filter-comparator\x03\0\x1d\x01m\x05\x05equal\x09not-equal\x04\
like\x08not-like\x0bstarts-with\x04\0\x18string-filter-comparator\x03\0\x1f\x01m\
\x07\x07running\x04idle\x09suspended\x0binterrupted\x08retrying\x06failed\x06exi\
ted\x04\0\x0cagent-status\x03\0!\x01r\x02\x0acomparator\x20\x05values\x04\0\x11a\
gent-name-filter\x03\0#\x01r\x02\x0acomparator\x1e\x05value\"\x04\0\x13agent-sta\
tus-filter\x03\0%\x01r\x02\x0acomparator\x1e\x05valuew\x04\0\x14agent-version-fi\
lter\x03\0'\x01r\x02\x0acomparator\x1e\x05valuew\x04\0\x17agent-created-at-filte\
r\x03\0)\x01r\x03\x04names\x0acomparator\x20\x05values\x04\0\x10agent-env-filter\
\x03\0+\x01r\x03\x04names\x0acomparator\x20\x05values\x04\0\x18agent-config-vars\
-filter\x03\0-\x01q\x06\x04name\x01$\0\x06status\x01&\0\x07version\x01(\0\x0acre\
ated-at\x01*\0\x03env\x01,\0\x10wasi-config-vars\x01.\0\x04\0\x15agent-property-\
filter\x03\0/\x01p0\x01r\x01\x07filters1\x04\0\x10agent-all-filter\x03\02\x01p3\x01\
r\x01\x07filters4\x04\0\x10agent-any-filter\x03\05\x01ps\x01o\x02ss\x01p8\x01r\x07\
\x08agent-id\x09\x04args7\x03env9\x0bconfig-vars9\x06status\"\x11component-versi\
onw\x0bretry-countw\x04\0\x0eagent-metadata\x03\0:\x04\0\x0aget-agents\x03\x01\x01\
q\x02\x15revert-to-oplog-index\x01\x0d\0\x17revert-last-invocations\x01w\0\x04\0\
\x13revert-agent-target\x03\0=\x01m\x02\x08original\x06forked\x04\0\x0bfork-resu\
lt\x03\0?\x04\0\x12get-promise-result\x03\x01\x01k6\x01i<\x01@\x03\x0ccomponent-\
id\x03\x06filter\xc2\0\x07precise\x7f\0\xc3\0\x04\0\x17[constructor]get-agents\x01\
D\x01h<\x01p;\x01k\xc6\0\x01@\x01\x04self\xc5\0\0\xc7\0\x04\0\x1b[method]get-age\
nts.get-next\x01H\x01hA\x01i\x0b\x01@\x01\x04self\xc9\0\0\xca\0\x04\0$[method]ge\
t-promise-result.subscribe\x01K\x01p}\x01k\xcc\0\x01@\x01\x04self\xc9\0\0\xcd\0\x04\
\0\x1e[method]get-promise-result.get\x01N\x01@\0\0\x0f\x04\0\x0ecreate-promise\x01\
O\x01iA\x01@\x01\x0apromise-id\x0f\0\xd0\0\x04\0\x0bget-promise\x01Q\x01@\x02\x0a\
promise-id\x0f\x04data\xcc\0\0\x7f\x04\0\x10complete-promise\x01R\x01@\0\0\x0d\x04\
\0\x0fget-oplog-index\x01S\x01@\x01\x09oplog-idx\x0d\x01\0\x04\0\x0fset-oplog-in\
dex\x01T\x01@\x01\x08replicas}\x01\0\x04\0\x0coplog-commit\x01U\x04\0\x14mark-be\
gin-operation\x01S\x01@\x01\x05begin\x0d\x01\0\x04\0\x12mark-end-operation\x01V\x01\
@\0\0\x18\x04\0\x10get-retry-policy\x01W\x01@\x01\x10new-retry-policy\x18\x01\0\x04\
\0\x10set-retry-policy\x01X\x01@\0\0\x1a\x04\0\x1bget-oplog-persistence-level\x01\
Y\x01@\x01\x15new-persistence-level\x1a\x01\0\x04\0\x1bset-oplog-persistence-lev\
el\x01Z\x01@\0\0\x7f\x04\0\x14get-idempotence-mode\x01[\x01@\x01\x0aidempotent\x7f\
\x01\0\x04\0\x14set-idempotence-mode\x01\\\x01@\0\0\x05\x04\0\x18generate-idempo\
tency-key\x01]\x01@\x03\x08agent-id\x09\x0etarget-version\x11\x04mode\x1c\x01\0\x04\
\0\x0cupdate-agent\x01^\x01@\0\0;\x04\0\x11get-self-metadata\x01_\x01k;\x01@\x01\
\x08agent-id\x09\0\xe0\0\x04\0\x12get-agent-metadata\x01a\x01@\x03\x0fsource-age\
nt-id\x09\x0ftarget-agent-id\x09\x11oplog-idx-cut-off\x0d\x01\0\x04\0\x0afork-ag\
ent\x01b\x01@\x02\x08agent-id\x09\x0drevert-target>\x01\0\x04\0\x0crevert-agent\x01\
c\x01k\x03\x01@\x01\x13component-references\0\xe4\0\x04\0\x14resolve-component-i\
d\x01e\x01k\x09\x01@\x02\x13component-references\x0aagent-names\0\xe6\0\x04\0\x10\
resolve-agent-id\x01g\x04\0\x17resolve-agent-id-strict\x01g\x01@\x01\x08new-name\
s\0\xc0\0\x04\0\x04fork\x01h\x03\0\x14golem:api/host@1.1.7\x05\x0b\x01B7\x02\x03\
\x02\x01\x02\x04\0\x08datetime\x03\0\0\x04\0\x04span\x03\x01\x04\0\x12invocation\
-context\x03\x01\x01q\x01\x06string\x01s\0\x04\0\x0fattribute-value\x03\0\x04\x01\
r\x02\x03keys\x05value\x05\x04\0\x09attribute\x03\0\x06\x01p\x05\x01r\x02\x03key\
s\x06values\x08\x04\0\x0fattribute-chain\x03\0\x09\x01s\x04\0\x08trace-id\x03\0\x0b\
\x01s\x04\0\x07span-id\x03\0\x0d\x01h\x02\x01@\x01\x04self\x0f\0\x01\x04\0\x17[m\
ethod]span.started-at\x01\x10\x01@\x03\x04self\x0f\x04names\x05value\x05\x01\0\x04\
\0\x1a[method]span.set-attribute\x01\x11\x01p\x07\x01@\x02\x04self\x0f\x0aattrib\
utes\x12\x01\0\x04\0\x1b[method]span.set-attributes\x01\x13\x01@\x01\x04self\x0f\
\x01\0\x04\0\x13[method]span.finish\x01\x14\x01h\x03\x01@\x01\x04self\x15\0\x0c\x04\
\0#[method]invocation-context.trace-id\x01\x16\x01@\x01\x04self\x15\0\x0e\x04\0\"\
[method]invocation-context.span-id\x01\x17\x01i\x03\x01k\x18\x01@\x01\x04self\x15\
\0\x19\x04\0![method]invocation-context.parent\x01\x1a\x01k\x05\x01@\x03\x04self\
\x15\x03keys\x09inherited\x7f\0\x1b\x04\0([method]invocation-context.get-attribu\
te\x01\x1c\x01@\x02\x04self\x15\x09inherited\x7f\0\x12\x04\0)[method]invocation-\
context.get-attributes\x01\x1d\x01@\x02\x04self\x15\x03keys\0\x08\x04\0.[method]\
invocation-context.get-attribute-chain\x01\x1e\x01p\x0a\x01@\x01\x04self\x15\0\x1f\
\x04\0/[method]invocation-context.get-attribute-chains\x01\x20\x01o\x02ss\x01p!\x01\
@\x01\x04self\x15\0\"\x04\00[method]invocation-context.trace-context-headers\x01\
#\x01i\x02\x01@\x01\x04names\0$\x04\0\x0astart-span\x01%\x01@\0\0\x18\x04\0\x0fc\
urrent-context\x01&\x01@\x01\x05allow\x7f\0\x7f\x04\0&allow-forwarding-trace-con\
text-headers\x01'\x03\0\x17golem:api/context@1.1.7\x05\x0c\x02\x03\0\x02\x09wit-\
value\x02\x03\0\x04\x0aaccount-id\x02\x03\0\x04\x11component-version\x02\x03\0\x04\
\x0boplog-index\x02\x03\0\x04\x11persistence-level\x02\x03\0\x04\x0eenvironment-\
id\x02\x03\0\x04\x0cretry-policy\x02\x03\0\x04\x04uuid\x02\x03\0\x04\x08agent-id\
\x02\x03\0\x05\x09attribute\x02\x03\0\x05\x0fattribute-value\x02\x03\0\x05\x07sp\
an-id\x02\x03\0\x05\x08trace-id\x01B\x8b\x01\x02\x03\x02\x01\x02\x04\0\x08dateti\
me\x03\0\0\x02\x03\x02\x01\x0d\x04\0\x09wit-value\x03\0\x02\x02\x03\x02\x01\x0e\x04\
\0\x0aaccount-id\x03\0\x04\x02\x03\x02\x01\x0f\x04\0\x11component-version\x03\0\x06\
\x02\x03\x02\x01\x10\x04\0\x0boplog-index\x03\0\x08\x02\x03\x02\x01\x11\x04\0\x11\
persistence-level\x03\0\x0a\x02\x03\x02\x01\x12\x04\0\x0eenvironment-id\x03\0\x0c\
\x02\x03\x02\x01\x13\x04\0\x0cretry-policy\x03\0\x0e\x02\x03\x02\x01\x14\x04\0\x04\
uuid\x03\0\x10\x02\x03\x02\x01\x15\x04\0\x08agent-id\x03\0\x12\x02\x03\x02\x01\x16\
\x04\0\x09attribute\x03\0\x14\x02\x03\x02\x01\x17\x04\0\x0fattribute-value\x03\0\
\x16\x02\x03\x02\x01\x18\x04\0\x07span-id\x03\0\x18\x02\x03\x02\x01\x19\x04\0\x08\
trace-id\x03\0\x1a\x01k\x09\x01q\x06\x0aread-local\0\0\x0bwrite-local\0\0\x0brea\
d-remote\0\0\x0cwrite-remote\0\0\x14write-remote-batched\x01\x1c\0\x18write-remo\
te-transaction\x01\x1c\0\x04\0\x15wrapped-function-type\x03\0\x1d\x01o\x02ss\x01\
p\x1f\x01r\x03\x04names\x07versions\x0aparameters\x20\x04\0\x1fplugin-installati\
on-description\x03\0!\x01ps\x01k\x13\x01p\"\x01r\x0b\x09timestamp\x01\x08agent-i\
d\x13\x11component-version\x07\x04args#\x03env\x20\x0acreated-by\x05\x0eenvironm\
ent-id\x0d\x06parent$\x0ecomponent-sizew\x20initial-total-linear-memory-sizew\x16\
initial-active-plugins%\x04\0\x11create-parameters\x03\0&\x01r\x05\x09timestamp\x01\
\x0dfunction-names\x07request\x03\x08response\x03\x15wrapped-function-type\x1e\x04\
\0$imported-function-invoked-parameters\x03\0(\x01k\x19\x01kw\x01p\x15\x01r\x06\x07\
span-id\x19\x05start\x01\x06parent*\x0elinked-context+\x0aattributes,\x09inherit\
ed\x7f\x04\0\x0flocal-span-data\x03\0-\x01r\x01\x07span-id\x19\x04\0\x12external\
-span-data\x03\0/\x01q\x02\x0alocal-span\x01.\0\x0dexternal-span\x010\0\x04\0\x09\
span-data\x03\01\x01p\x03\x01p2\x01p4\x01r\x07\x09timestamp\x01\x0dfunction-name\
s\x07request3\x0fidempotency-keys\x08trace-id\x1b\x0ctrace-states#\x12invocation\
-context5\x04\0$exported-function-invoked-parameters\x03\06\x01k\x03\x01r\x03\x09\
timestamp\x01\x08response8\x0dconsumed-fuelx\x04\0&exported-function-completed-p\
arameters\x03\09\x01r\x02\x09timestamp\x01\x05errors\x04\0\x10error-parameters\x03\
\0;\x01r\x03\x09timestamp\x01\x05start\x09\x03end\x09\x04\0\x0fjump-parameters\x03\
\0=\x01r\x02\x09timestamp\x01\x0cretry-policy\x0f\x04\0\x1echange-retry-policy-p\
arameters\x03\0?\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\x1cend-atomi\
c-region-parameters\x03\0A\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\x1b\
end-remote-write-parameters\x03\0C\x01k3\x01r\x03\x0fidempotency-keys\x0dfunctio\
n-names\x05input\xc5\0\x04\0'exported-function-invocation-parameters\x03\0F\x01q\
\x02\x11exported-function\x01\xc7\0\0\x0dmanual-update\x01\x07\0\x04\0\x10agent-\
invocation\x03\0H\x01r\x02\x09timestamp\x01\x0ainvocation\xc9\0\x04\0#pending-ag\
ent-invocation-parameters\x03\0J\x01p}\x01q\x02\x0bauto-update\0\0\x0esnapshot-b\
ased\x01\xcc\0\0\x04\0\x12update-description\x03\0M\x01r\x03\x09timestamp\x01\x0e\
target-version\x07\x12update-description\xce\0\x04\0\x19pending-update-parameter\
s\x03\0O\x01r\x04\x09timestamp\x01\x0etarget-version\x07\x12new-component-sizew\x12\
new-active-plugins%\x04\0\x1csuccessful-update-parameters\x03\0Q\x01ks\x01r\x03\x09\
timestamp\x01\x0etarget-version\x07\x07details\xd3\0\x04\0\x18failed-update-para\
meters\x03\0T\x01r\x02\x09timestamp\x01\x05deltaw\x04\0\x16grow-memory-parameter\
s\x03\0V\x01w\x04\0\x11agent-resource-id\x03\0X\x01r\x04\x09timestamp\x01\x0bres\
ource-id\xd9\0\x04names\x05owners\x04\0\x1acreate-resource-parameters\x03\0Z\x01\
r\x04\x09timestamp\x01\x0bresource-id\xd9\0\x04names\x05owners\x04\0\x18drop-res\
ource-parameters\x03\0\\\x01m\x08\x06stdout\x06stderr\x05trace\x05debug\x04info\x04\
warn\x05error\x08critical\x04\0\x09log-level\x03\0^\x01r\x04\x09timestamp\x01\x05\
level\xdf\0\x07contexts\x07messages\x04\0\x0elog-parameters\x03\0`\x01r\x02\x09t\
imestamp\x01\x06plugin\"\x04\0\x1aactivate-plugin-parameters\x03\0b\x01r\x02\x09\
timestamp\x01\x06plugin\"\x04\0\x1cdeactivate-plugin-parameters\x03\0d\x01r\x03\x09\
timestamp\x01\x05start\x09\x03end\x09\x04\0\x11revert-parameters\x03\0f\x01r\x02\
\x09timestamp\x01\x0fidempotency-keys\x04\0\x1ccancel-invocation-parameters\x03\0\
h\x01r\x05\x09timestamp\x01\x07span-id\x19\x06parent*\x0elinked-context*\x0aattr\
ibutes,\x04\0\x15start-span-parameters\x03\0j\x01r\x02\x09timestamp\x01\x07span-\
id\x19\x04\0\x16finish-span-parameters\x03\0l\x01r\x04\x09timestamp\x01\x07span-\
id\x19\x03keys\x05value\x17\x04\0\x1dset-span-attribute-parameters\x03\0n\x01r\x02\
\x09timestamp\x01\x11persistence-level\x0b\x04\0#change-persistence-level-parame\
ters\x03\0p\x01r\x02\x09timestamp\x01\x0etransaction-ids\x04\0#begin-remote-tran\
saction-parameters\x03\0r\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\x1d\
remote-transaction-parameters\x03\0t\x01q%\x06create\x01'\0\x19imported-function\
-invoked\x01)\0\x19exported-function-invoked\x017\0\x1bexported-function-complet\
ed\x01:\0\x07suspend\x01\x01\0\x05error\x01<\0\x05no-op\x01\x01\0\x04jump\x01>\0\
\x0binterrupted\x01\x01\0\x06exited\x01\x01\0\x13change-retry-policy\x01\xc0\0\0\
\x13begin-atomic-region\x01\x01\0\x11end-atomic-region\x01\xc2\0\0\x12begin-remo\
te-write\x01\x01\0\x10end-remote-write\x01\xc4\0\0\x18pending-agent-invocation\x01\
\xcb\0\0\x0epending-update\x01\xd0\0\0\x11successful-update\x01\xd2\0\0\x0dfaile\
d-update\x01\xd5\0\0\x0bgrow-memory\x01\xd7\0\0\x0fcreate-resource\x01\xdb\0\0\x0d\
drop-resource\x01\xdd\0\0\x03log\x01\xe1\0\0\x07restart\x01\x01\0\x0factivate-pl\
ugin\x01\xe3\0\0\x11deactivate-plugin\x01\xe5\0\0\x06revert\x01\xe7\0\0\x11cance\
l-invocation\x01\xe9\0\0\x0astart-span\x01\xeb\0\0\x0bfinish-span\x01\xed\0\0\x12\
set-span-attribute\x01\xef\0\0\x18change-persistence-level\x01\xf1\0\0\x18begin-\
remote-transaction\x01\xf3\0\0\x1dpre-commit-remote-transaction\x01\xf5\0\0\x1fp\
re-rollback-remote-transaction\x01\xf5\0\0\x1ccommitted-remote-transaction\x01\xf5\
\0\0\x1erolled-back-remote-transaction\x01\xf5\0\0\x04\0\x0boplog-entry\x03\0v\x04\
\0\x09get-oplog\x03\x01\x04\0\x0csearch-oplog\x03\x01\x01ix\x01@\x02\x08agent-id\
\x13\x05start\x09\0\xfa\0\x04\0\x16[constructor]get-oplog\x01{\x01hx\x01p\xf7\0\x01\
k\xfd\0\x01@\x01\x04self\xfc\0\0\xfe\0\x04\0\x1a[method]get-oplog.get-next\x01\x7f\
\x01iy\x01@\x02\x08agent-id\x13\x04texts\0\x80\x01\x04\0\x19[constructor]search-\
oplog\x01\x81\x01\x01hy\x01o\x02\x09\xf7\0\x01p\x83\x01\x01k\x84\x01\x01@\x01\x04\
self\x82\x01\0\x85\x01\x04\0\x1d[method]search-oplog.get-next\x01\x86\x01\x03\0\x15\
golem:api/oplog@1.1.7\x05\x1a\x01B\x03\x01ps\x01@\0\0\0\x04\0\x15get-invoked-fun\
ctions\x01\x01\x04\0\x13golem:component/api\x05\x1b\x02\x03\0\x04\x0eagent-metad\
ata\x02\x03\0\x06\x0boplog-entry\x01B\x18\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\
\0\0\x02\x03\x02\x01\x0d\x04\0\x09wit-value\x03\0\x02\x02\x03\x02\x01\x0e\x04\0\x0a\
account-id\x03\0\x04\x02\x03\x02\x01\x10\x04\0\x0boplog-index\x03\0\x06\x02\x03\x02\
\x01\x1c\x04\0\x0eagent-metadata\x03\0\x08\x02\x03\x02\x01\x1d\x04\0\x0boplog-en\
try\x03\0\x0a\x02\x03\x02\x01\x07\x04\0\x0ccomponent-id\x03\0\x0c\x02\x03\x02\x01\
\x0a\x04\0\x08agent-id\x03\0\x0e\x01r\x01\x0aaccount-id\x05\x04\0\x0caccount-inf\
o\x03\0\x10\x01o\x02ss\x01p\x12\x01p\x0b\x01j\0\x01s\x01@\x07\x0caccount-info\x11\
\x06config\x13\x0ccomponent-id\x0d\x08agent-id\x0f\x08metadata\x09\x11first-entr\
y-index\x07\x07entries\x14\0\x15\x04\0\x07process\x01\x16\x04\0\x1fgolem:api/opl\
og-processor@1.1.7\x05\x1e\x04\0\x1fgolem:component/oplog-processor\x04\0\x0b\x15\
\x01\0\x0foplog-processor\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit\
-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
