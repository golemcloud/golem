// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod api {
        /// The Golem host API provides low level access to Golem specific features such as promises and control over
        /// the durability and transactional guarantees the executor provides.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            pub type ComponentId = super::super::super::golem::rpc::types::ComponentId;
            pub type Uuid = super::super::super::golem::rpc::types::Uuid;
            pub type WorkerId = super::super::super::golem::rpc::types::WorkerId;
            /// An index into the persistent log storing all performed operations of a worker
            pub type OplogIndex = u64;
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem workers can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub worker_id: WorkerId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("worker-id", &self.worker_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// Represents a Golem Cloud account
            #[derive(Clone)]
            pub struct AccountId {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AccountId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AccountId").field("value", &self.value).finish()
                }
            }
            /// Represents a Golem project
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ProjectId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ProjectId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProjectId").field("uuid", &self.uuid).finish()
                }
            }
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the worker becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for workers
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                                .finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update a worker to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the worker using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the worker's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => {
                            f.debug_tuple("UpdateMode::Automatic").finish()
                        }
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }
            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => {
                            f.debug_tuple("FilterComparator::Less").finish()
                        }
                    }
                }
            }
            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
                StartsWith,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                        StringFilterComparator::StartsWith => {
                            f.debug_tuple("StringFilterComparator::StartsWith").finish()
                        }
                    }
                }
            }
            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,
                        4 => StringFilterComparator::StartsWith,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum WorkerStatus {
                /// The worker is running an invoked function
                Running,
                /// The worker is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the worker can no longer be used
                Failed,
                /// The worker exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for WorkerStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerStatus::Running => {
                            f.debug_tuple("WorkerStatus::Running").finish()
                        }
                        WorkerStatus::Idle => {
                            f.debug_tuple("WorkerStatus::Idle").finish()
                        }
                        WorkerStatus::Suspended => {
                            f.debug_tuple("WorkerStatus::Suspended").finish()
                        }
                        WorkerStatus::Interrupted => {
                            f.debug_tuple("WorkerStatus::Interrupted").finish()
                        }
                        WorkerStatus::Retrying => {
                            f.debug_tuple("WorkerStatus::Retrying").finish()
                        }
                        WorkerStatus::Failed => {
                            f.debug_tuple("WorkerStatus::Failed").finish()
                        }
                        WorkerStatus::Exited => {
                            f.debug_tuple("WorkerStatus::Exited").finish()
                        }
                    }
                }
            }
            impl WorkerStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WorkerStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WorkerStatus::Running,
                        1 => WorkerStatus::Idle,
                        2 => WorkerStatus::Suspended,
                        3 => WorkerStatus::Interrupted,
                        4 => WorkerStatus::Retrying,
                        5 => WorkerStatus::Failed,
                        6 => WorkerStatus::Exited,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerNameFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerStatusFilter {
                pub comparator: FilterComparator,
                pub value: WorkerStatus,
            }
            impl ::core::fmt::Debug for WorkerStatusFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerVersionFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerCreatedAtFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerEnvFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerWasiConfigVarsFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerWasiConfigVarsFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerWasiConfigVarsFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerPropertyFilter {
                Name(WorkerNameFilter),
                Status(WorkerStatusFilter),
                Version(WorkerVersionFilter),
                CreatedAt(WorkerCreatedAtFilter),
                Env(WorkerEnvFilter),
                WasiConfigVars(WorkerWasiConfigVarsFilter),
            }
            impl ::core::fmt::Debug for WorkerPropertyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerPropertyFilter::Name(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Name").field(e).finish()
                        }
                        WorkerPropertyFilter::Status(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Status")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Version(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Version")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("WorkerPropertyFilter::CreatedAt")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Env(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Env").field(e).finish()
                        }
                        WorkerPropertyFilter::WasiConfigVars(e) => {
                            f.debug_tuple("WorkerPropertyFilter::WasiConfigVars")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerAllFilter {
                pub filters: _rt::Vec<WorkerPropertyFilter>,
            }
            impl ::core::fmt::Debug for WorkerAllFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerAnyFilter {
                pub filters: _rt::Vec<WorkerAllFilter>,
            }
            impl ::core::fmt::Debug for WorkerAnyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerMetadata {
                pub worker_id: WorkerId,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub wasi_config_vars: _rt::Vec<(_rt::String, _rt::String)>,
                pub status: WorkerStatus,
                pub component_version: u64,
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for WorkerMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerMetadata")
                        .field("worker-id", &self.worker_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("wasi-config-vars", &self.wasi_config_vars)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetWorkers {
                handle: _rt::Resource<GetWorkers>,
            }
            impl GetWorkers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetWorkers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-workers"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Target parameter for the `revert-worker` operation
            #[derive(Clone, Copy)]
            pub enum RevertWorkerTarget {
                /// Revert to a specific oplog index. The given index will be the last one to be kept.
                RevertToOplogIndex(OplogIndex),
                /// Revert the last N invocations.
                RevertLastInvocations(u64),
            }
            impl ::core::fmt::Debug for RevertWorkerTarget {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RevertWorkerTarget::RevertToOplogIndex(e) => {
                            f.debug_tuple("RevertWorkerTarget::RevertToOplogIndex")
                                .field(e)
                                .finish()
                        }
                        RevertWorkerTarget::RevertLastInvocations(e) => {
                            f.debug_tuple("RevertWorkerTarget::RevertLastInvocations")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Indicates which worker the code is running on after `fork`
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ForkResult {
                /// The original worker that called `fork`
                Original,
                /// The new worker
                Forked,
            }
            impl ::core::fmt::Debug for ForkResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ForkResult::Original => {
                            f.debug_tuple("ForkResult::Original").finish()
                        }
                        ForkResult::Forked => {
                            f.debug_tuple("ForkResult::Forked").finish()
                        }
                    }
                }
            }
            impl ForkResult {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ForkResult {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ForkResult::Original,
                        1 => ForkResult::Forked,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&WorkerAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid0,
                        } = component_id;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits1,
                            low_bits: low_bits1,
                        } = uuid0;
                        let (result17_0, result17_1, result17_2) = match filter {
                            Some(e) => {
                                let WorkerAnyFilter { filters: filters2 } = e;
                                let vec16 = filters2;
                                let len16 = vec16.len();
                                let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec16.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result16 = if layout16.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout16);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec16.into_iter().enumerate() {
                                    let base = result16
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let WorkerAllFilter { filters: filters3 } = e;
                                        let vec15 = filters3;
                                        let len15 = vec15.len();
                                        let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec15.len()
                                                * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let result15 = if layout15.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout15);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec15.into_iter().enumerate() {
                                            let base = result15
                                                .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                match e {
                                                    WorkerPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let WorkerNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator4.clone() as i32)
                                                            as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len5;
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr5.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let WorkerStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator6.clone() as i32)
                                                            as u8;
                                                        *base.add(9).cast::<u8>() = (value6.clone() as i32) as u8;
                                                    }
                                                    WorkerPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let WorkerVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator7.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value7);
                                                    }
                                                    WorkerPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let WorkerCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator8.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value8);
                                                    }
                                                    WorkerPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let WorkerEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator9.clone() as i32) as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len11;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr11.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::WasiConfigVars(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        let WorkerWasiConfigVarsFilter {
                                                            name: name12,
                                                            comparator: comparator12,
                                                            value: value12,
                                                        } = e;
                                                        let vec13 = name12;
                                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                                        let len13 = vec13.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len13;
                                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator12.clone() as i32) as u8;
                                                        let vec14 = value12;
                                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                                        let len14 = vec14.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len14;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr14.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len15;
                                        *base.add(0).cast::<*mut u8>() = result15;
                                        cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                (1i32, result16, len16)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-workers"]
                            fn wit_import18(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import18(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import18(
                                _rt::as_i64(high_bits1),
                                _rt::as_i64(low_bits1),
                                result17_0,
                                result17_1,
                                result17_2,
                                match &precise {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { GetWorkers::from_handle(ret as u32) }
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<WorkerMetadata>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-workers.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result38 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base37 = l3;
                                    let len37 = l4;
                                    let mut result37 = _rt::Vec::with_capacity(len37);
                                    for i in 0..len37 {
                                        let base = base37
                                            .add(i * (40 + 8 * ::core::mem::size_of::<*const u8>()));
                                        let e37 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = *base.add(8).cast::<i64>();
                                            let l7 = *base.add(16).cast::<*mut u8>();
                                            let l8 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            let l10 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base15 = l10;
                                            let len15 = l11;
                                            let mut result15 = _rt::Vec::with_capacity(len15);
                                            for i in 0..len15 {
                                                let base = base15
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                let e15 = {
                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len14 = l13;
                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                        l12.cast(),
                                                        len14,
                                                        len14,
                                                    );
                                                    _rt::string_lift(bytes14)
                                                };
                                                result15.push(e15);
                                            }
                                            _rt::cabi_dealloc(
                                                base15,
                                                len15 * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l16 = *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base24 = l16;
                                            let len24 = l17;
                                            let mut result24 = _rt::Vec::with_capacity(len24);
                                            for i in 0..len24 {
                                                let base = base24
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e24 = {
                                                    let l18 = *base.add(0).cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len20 = l19;
                                                    let bytes20 = _rt::Vec::from_raw_parts(
                                                        l18.cast(),
                                                        len20,
                                                        len20,
                                                    );
                                                    let l21 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len23 = l22;
                                                    let bytes23 = _rt::Vec::from_raw_parts(
                                                        l21.cast(),
                                                        len23,
                                                        len23,
                                                    );
                                                    (_rt::string_lift(bytes20), _rt::string_lift(bytes23))
                                                };
                                                result24.push(e24);
                                            }
                                            _rt::cabi_dealloc(
                                                base24,
                                                len24 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l25 = *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l26 = *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base33 = l25;
                                            let len33 = l26;
                                            let mut result33 = _rt::Vec::with_capacity(len33);
                                            for i in 0..len33 {
                                                let base = base33
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e33 = {
                                                    let l27 = *base.add(0).cast::<*mut u8>();
                                                    let l28 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len29 = l28;
                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                        l27.cast(),
                                                        len29,
                                                        len29,
                                                    );
                                                    let l30 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len32 = l31;
                                                    let bytes32 = _rt::Vec::from_raw_parts(
                                                        l30.cast(),
                                                        len32,
                                                        len32,
                                                    );
                                                    (_rt::string_lift(bytes29), _rt::string_lift(bytes32))
                                                };
                                                result33.push(e33);
                                            }
                                            _rt::cabi_dealloc(
                                                base33,
                                                len33 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l34 = i32::from(
                                                *base
                                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l35 = *base
                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            let l36 = *base
                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            WorkerMetadata {
                                                worker_id: super::super::super::golem::rpc::types::WorkerId {
                                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                                            high_bits: l5 as u64,
                                                            low_bits: l6 as u64,
                                                        },
                                                    },
                                                    worker_name: _rt::string_lift(bytes9),
                                                },
                                                args: result15,
                                                env: result24,
                                                wasi_config_vars: result33,
                                                status: WorkerStatus::_lift(l34 as u8),
                                                component_version: l35 as u64,
                                                retry_count: l36 as u64,
                                            }
                                        };
                                        result37.push(e37);
                                    }
                                    _rt::cabi_dealloc(
                                        base37,
                                        len37 * (40 + 8 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result37
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result38
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result8 = PromiseId {
                        worker_id: super::super::super::golem::rpc::types::WorkerId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes6),
                        },
                        oplog_idx: l7 as u64,
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Suspends execution until the given promise gets completed, and returns the payload passed to
            /// the promise completion.
            pub fn await_promise(promise_id: &PromiseId) -> _rt::Vec<u8> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "await-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5,
                        )
                    };
                    let l7 = *ptr5.add(0).cast::<*mut u8>();
                    let l8 = *ptr5
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len9 = l8;
                    let result10 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Checks whether the given promise is completed. If not, it returns None. If the promise is completed,
            /// it returns the payload passed to the promise completion.
            pub fn poll_promise(promise_id: &PromiseId) -> Option<_rt::Vec<u8>> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "poll-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5,
                        )
                    };
                    let l7 = i32::from(*ptr5.add(0).cast::<u8>());
                    let result11 = match l7 {
                        0 => None,
                        1 => {
                            let e = {
                                let l8 = *ptr5
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l9 = *ptr5
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len10 = l9;
                                _rt::Vec::from_raw_parts(l8.cast(), len10, len10)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the worker that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5.cast_mut(),
                            len5,
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Deletes the given promise
            pub fn delete_promise(promise_id: &PromiseId) -> () {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "delete-promise"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current worker travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(oplog_idx)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i32(&replicas)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(begin)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the worker
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i32>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<i64>();
                    let l5 = *ptr0.add(24).cast::<f64>();
                    let l6 = i32::from(*ptr0.add(32).cast::<u8>());
                    let result8 = RetryPolicy {
                        max_attempts: l2 as u32,
                        min_delay: l3 as u64,
                        max_delay: l4 as u64,
                        multiplier: l5,
                        max_jitter_factor: match l6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l7 = *ptr0.add(40).cast::<f64>();
                                    l7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the worker. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) -> () {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import2(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: i64,
                        _: i64,
                        _: f64,
                        _: i32,
                        _: f64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i32(max_attempts0),
                            _rt::as_i64(min_delay0),
                            _rt::as_i64(max_delay0),
                            _rt::as_f64(multiplier0),
                            result1_0,
                            result1_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the worker's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    let v1 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v1
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the worker's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(
                new_persistence_level: PersistenceLevel,
            ) -> () {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import1(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the worker in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            match &idempotent {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let result4 = super::super::super::golem::rpc::types::Uuid {
                        high_bits: l2 as u64,
                        low_bits: l3 as u64,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given worker. The function returns immediately once the request has been processed,
            /// not waiting for the worker to get updated.
            pub fn update_worker(
                worker_id: &WorkerId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "update-worker"]
                        fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(target_version),
                            mode.clone() as i32,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get current worker metadata
            pub fn get_self_metadata() -> WorkerMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 40 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 40
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *ptr0
                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l7;
                    let len12 = l8;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l9 = *base.add(0).cast::<*mut u8>();
                            let l10 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(
                                l9.cast(),
                                len11,
                                len11,
                            );
                            _rt::string_lift(bytes11)
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l13 = *ptr0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l14 = *ptr0
                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base21 = l13;
                    let len21 = l14;
                    let mut result21 = _rt::Vec::with_capacity(len21);
                    for i in 0..len21 {
                        let base = base21
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e21 = {
                            let l15 = *base.add(0).cast::<*mut u8>();
                            let l16 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            let l18 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len20 = l19;
                            let bytes20 = _rt::Vec::from_raw_parts(
                                l18.cast(),
                                len20,
                                len20,
                            );
                            (_rt::string_lift(bytes17), _rt::string_lift(bytes20))
                        };
                        result21.push(e21);
                    }
                    _rt::cabi_dealloc(
                        base21,
                        len21 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l22 = *ptr0
                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l23 = *ptr0
                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base30 = l22;
                    let len30 = l23;
                    let mut result30 = _rt::Vec::with_capacity(len30);
                    for i in 0..len30 {
                        let base = base30
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e30 = {
                            let l24 = *base.add(0).cast::<*mut u8>();
                            let l25 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len26 = l25;
                            let bytes26 = _rt::Vec::from_raw_parts(
                                l24.cast(),
                                len26,
                                len26,
                            );
                            let l27 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l28 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len29 = l28;
                            let bytes29 = _rt::Vec::from_raw_parts(
                                l27.cast(),
                                len29,
                                len29,
                            );
                            (_rt::string_lift(bytes26), _rt::string_lift(bytes29))
                        };
                        result30.push(e30);
                    }
                    _rt::cabi_dealloc(
                        base30,
                        len30 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l31 = i32::from(
                        *ptr0
                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l32 = *ptr0
                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l33 = *ptr0
                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result34 = WorkerMetadata {
                        worker_id: super::super::super::golem::rpc::types::WorkerId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes6),
                        },
                        args: result12,
                        env: result21,
                        wasi_config_vars: result30,
                        status: WorkerStatus::_lift(l31 as u8),
                        component_version: l32 as u64,
                        retry_count: l33 as u64,
                    };
                    result34
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get worker metadata
            pub fn get_worker_metadata(worker_id: &WorkerId) -> Option<WorkerMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 48 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 48
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-worker-metadata"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4,
                        )
                    };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let result39 = match l6 {
                        0 => None,
                        1 => {
                            let e = {
                                let l7 = *ptr4.add(8).cast::<i64>();
                                let l8 = *ptr4.add(16).cast::<i64>();
                                let l9 = *ptr4.add(24).cast::<*mut u8>();
                                let l10 = *ptr4
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                let l12 = *ptr4
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr4
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base17 = l12;
                                let len17 = l13;
                                let mut result17 = _rt::Vec::with_capacity(len17);
                                for i in 0..len17 {
                                    let base = base17
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e17 = {
                                        let l14 = *base.add(0).cast::<*mut u8>();
                                        let l15 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        _rt::string_lift(bytes16)
                                    };
                                    result17.push(e17);
                                }
                                _rt::cabi_dealloc(
                                    base17,
                                    len17 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l18 = *ptr4
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *ptr4
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base26 = l18;
                                let len26 = l19;
                                let mut result26 = _rt::Vec::with_capacity(len26);
                                for i in 0..len26 {
                                    let base = base26
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e26 = {
                                        let l20 = *base.add(0).cast::<*mut u8>();
                                        let l21 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        let l23 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l24 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 = _rt::Vec::from_raw_parts(
                                            l23.cast(),
                                            len25,
                                            len25,
                                        );
                                        (_rt::string_lift(bytes22), _rt::string_lift(bytes25))
                                    };
                                    result26.push(e26);
                                }
                                _rt::cabi_dealloc(
                                    base26,
                                    len26 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l27 = *ptr4
                                    .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr4
                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base35 = l27;
                                let len35 = l28;
                                let mut result35 = _rt::Vec::with_capacity(len35);
                                for i in 0..len35 {
                                    let base = base35
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e35 = {
                                        let l29 = *base.add(0).cast::<*mut u8>();
                                        let l30 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 = _rt::Vec::from_raw_parts(
                                            l29.cast(),
                                            len31,
                                            len31,
                                        );
                                        let l32 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l33 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len34 = l33;
                                        let bytes34 = _rt::Vec::from_raw_parts(
                                            l32.cast(),
                                            len34,
                                            len34,
                                        );
                                        (_rt::string_lift(bytes31), _rt::string_lift(bytes34))
                                    };
                                    result35.push(e35);
                                }
                                _rt::cabi_dealloc(
                                    base35,
                                    len35 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l36 = i32::from(
                                    *ptr4
                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = *ptr4
                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                let l38 = *ptr4
                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                WorkerMetadata {
                                    worker_id: super::super::super::golem::rpc::types::WorkerId {
                                        component_id: super::super::super::golem::rpc::types::ComponentId {
                                            uuid: super::super::super::golem::rpc::types::Uuid {
                                                high_bits: l7 as u64,
                                                low_bits: l8 as u64,
                                            },
                                        },
                                        worker_name: _rt::string_lift(bytes11),
                                    },
                                    args: result17,
                                    env: result26,
                                    wasi_config_vars: result35,
                                    status: WorkerStatus::_lift(l36 as u8),
                                    component_version: l37 as u64,
                                    retry_count: l38 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result39
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fork a worker to another worker at a given oplog index
            pub fn fork_worker(
                source_worker_id: &WorkerId,
                target_worker_id: &WorkerId,
                oplog_idx_cut_off: OplogIndex,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = source_worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id4,
                        worker_name: worker_name4,
                    } = target_worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid5,
                    } = component_id4;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits6,
                        low_bits: low_bits6,
                    } = uuid5;
                    let vec7 = worker_name4;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork-worker"]
                        fn wit_import8(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(high_bits6),
                            _rt::as_i64(low_bits6),
                            ptr7.cast_mut(),
                            len7,
                            _rt::as_i64(oplog_idx_cut_off),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Revert a worker to a previous state
            pub fn revert_worker(
                worker_id: &WorkerId,
                revert_target: RevertWorkerTarget,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result4_0, result4_1) = match revert_target {
                        RevertWorkerTarget::RevertToOplogIndex(e) => {
                            (0i32, _rt::as_i64(e))
                        }
                        RevertWorkerTarget::RevertLastInvocations(e) => {
                            (1i32, _rt::as_i64(e))
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "revert-worker"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            result4_0,
                            result4_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the component-id for a given component reference.
            /// Returns none when no component with the specified reference exists.
            /// The syntax of the component reference is implementation dependent.
            ///
            /// Golem OSS: "{component_name}"
            /// Golem Cloud:
            ///     1: "{component_name}" -> will resolve in current account and project
            ///     2: "{project_name}/{component_name}" -> will resolve in current account
            ///     3: "{account_id}/{project_name}/{component_name}"
            pub fn resolve_component_id(
                component_reference: &str,
            ) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result6 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l4 as u64,
                                        low_bits: l5 as u64,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the worker-id for a given component and worker name.
            /// Returns none when no component for the specified reference exists.
            pub fn resolve_worker_id(
                component_reference: &str,
                worker_name: &str,
            ) -> Option<WorkerId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = worker_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-worker-id"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::WorkerId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    worker_name: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the worker-id for a given component and worker name.
            /// Returns none when no component for the specified component-reference or no worker with the specified worker-name exists.
            pub fn resolve_worker_id_strict(
                component_reference: &str,
                worker_name: &str,
            ) -> Option<WorkerId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = worker_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-worker-id-strict"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::WorkerId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    worker_name: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Forks the current worker at the current execution point. The new worker gets the `new-name` worker name,
            /// and this worker continues running as well. The return value is going to be different in this worker and
            /// the forked worker.
            pub fn fork(new_name: &str) -> ForkResult {
                unsafe {
                    let vec0 = new_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ForkResult::_lift(ret as u8)
                }
            }
        }
        /// Invocation context support
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod context {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            /// Represents a unit of work or operation
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Span {
                handle: _rt::Resource<Span>,
            }
            impl Span {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Span {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]span"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Represents an invocation context wich allows querying the stack of attributes
            /// created by automatic and user-defined spans.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InvocationContext {
                handle: _rt::Resource<InvocationContext>,
            }
            impl InvocationContext {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for InvocationContext {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]invocation-context"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Possible span attribute value types
            #[derive(Clone)]
            pub enum AttributeValue {
                /// A string value
                String(_rt::String),
            }
            impl ::core::fmt::Debug for AttributeValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AttributeValue::String(e) => {
                            f.debug_tuple("AttributeValue::String").field(e).finish()
                        }
                    }
                }
            }
            /// An attribute of a span
            #[derive(Clone)]
            pub struct Attribute {
                pub key: _rt::String,
                pub value: AttributeValue,
            }
            impl ::core::fmt::Debug for Attribute {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Attribute")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// A chain of attribute values, the first element representing the most recent value
            #[derive(Clone)]
            pub struct AttributeChain {
                pub key: _rt::String,
                pub values: _rt::Vec<AttributeValue>,
            }
            impl ::core::fmt::Debug for AttributeChain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AttributeChain")
                        .field("key", &self.key)
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// The trace represented by a 16 bytes hexadecimal string
            pub type TraceId = _rt::String;
            /// The span represented by a 8 bytes hexadecimal string
            pub type SpanId = _rt::String;
            #[allow(unused_unsafe, clippy::all)]
            /// Starts a new `span` with the given name, as a child of the current invocation context
            pub fn start_span(name: &str) -> Span {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "start-span"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    unsafe { Span::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current invocation context
            ///
            /// The function call captures the current context; if new spans are started, the returned `invocation-context` instance will not
            /// reflect that.
            pub fn current_context() -> InvocationContext {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "current-context"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    unsafe { InvocationContext::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Allows or disallows forwarding of trace context headers in outgoing HTTP requests
            ///
            /// Returns the previous value of the setting
            pub fn allow_forwarding_trace_context_headers(allow: bool) -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "allow-forwarding-trace-context-headers"]
                        fn wit_import0(_: i32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import0(
                            match &allow {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the starting time of the span
                pub fn started_at(&self) -> Datetime {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.started-at"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<i64>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let result4 = super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: l2 as u64,
                            nanoseconds: l3 as u32,
                        };
                        result4
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Set an attribute on the span
                pub fn set_attribute(&self, name: &str, value: &AttributeValue) -> () {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let (result2_0, result2_1, result2_2) = match value {
                            AttributeValue::String(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (0i32, ptr1.cast_mut(), len1)
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.set-attribute"]
                            fn wit_import3(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import3(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import3(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result2_0,
                                result2_1,
                                result2_2,
                            )
                        };
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Set multiple attributes on the span
                pub fn set_attributes(&self, attributes: &[Attribute]) -> () {
                    unsafe {
                        let vec3 = attributes;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * (5 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3
                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                            {
                                let Attribute { key: key0, value: value0 } = e;
                                let vec1 = key0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                match value0 {
                                    AttributeValue::String(e) => {
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len2;
                                        *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                }
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.set-attributes"]
                            fn wit_import4(_: i32, _: *mut u8, _: usize);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        unsafe { wit_import4((self).handle() as i32, result3, len3) };
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Early finishes the span; otherwise it will be finished when the resource is dropped
                pub fn finish(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.finish"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current trace id
                pub fn trace_id(&self) -> TraceId {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.trace-id"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current span id
                pub fn span_id(&self) -> SpanId {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.span-id"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the parent context, if any; allows recursive processing of the invocation context.
                ///
                /// Alternatively, the attribute query methods can return inherited values without having to
                /// traverse the stack manually.
                pub fn parent(&self) -> Option<InvocationContext> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.parent"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result4 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    unsafe { InvocationContext::from_handle(l3 as u32) }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result4
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the value of an attribute `key`. If `inherited` is true, the value is searched in the stack of spans,
                /// otherwise only in the current span.
                pub fn get_attribute(
                    &self,
                    key: &str,
                    inherited: bool,
                ) -> Option<AttributeValue> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute"]
                            fn wit_import2(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                match &inherited {
                                    true => 1,
                                    false => 0,
                                },
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result9 = match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = i32::from(
                                        *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l4 {
                                        n => {
                                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                                            let e8 = {
                                                let l5 = *ptr1
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l6 = *ptr1
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            AttributeValue::String(e8)
                                        }
                                    };
                                    v8
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets all attributes of the current invocation context. If `inherited` is true, it returns the merged set of attributes, each
                /// key associated with the latest value found in the stack of spans.
                pub fn get_attributes(&self, inherited: bool) -> _rt::Vec<Attribute> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attributes"]
                            fn wit_import1(_: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                match &inherited {
                                    true => 1,
                                    false => 0,
                                },
                                ptr0,
                            )
                        };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base12 = l2;
                        let len12 = l3;
                        let mut result12 = _rt::Vec::with_capacity(len12);
                        for i in 0..len12 {
                            let base = base12
                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                            let e12 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = i32::from(
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let v11 = match l7 {
                                    n => {
                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                        let e11 = {
                                            let l8 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            _rt::string_lift(bytes10)
                                        };
                                        AttributeValue::String(e11)
                                    }
                                };
                                Attribute {
                                    key: _rt::string_lift(bytes6),
                                    value: v11,
                                }
                            };
                            result12.push(e12);
                        }
                        _rt::cabi_dealloc(
                            base12,
                            len12 * (5 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = result12;
                        result13
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the chain of attribute values associated with the given `key`. If the key does not exist in any of the
                /// spans in the invocation context, the list is empty. The chain's first element contains the most recent (innermost) value.
                pub fn get_attribute_chain(
                    &self,
                    key: &str,
                ) -> _rt::Vec<AttributeValue> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute-chain"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = *ptr1.add(0).cast::<*mut u8>();
                        let l4 = *ptr1
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base10 = l3;
                        let len10 = l4;
                        let mut result10 = _rt::Vec::with_capacity(len10);
                        for i in 0..len10 {
                            let base = base10
                                .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                            let e10 = {
                                let l5 = i32::from(*base.add(0).cast::<u8>());
                                let v9 = match l5 {
                                    n => {
                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                        let e9 = {
                                            let l6 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                l6.cast(),
                                                len8,
                                                len8,
                                            );
                                            _rt::string_lift(bytes8)
                                        };
                                        AttributeValue::String(e9)
                                    }
                                };
                                v9
                            };
                            result10.push(e10);
                        }
                        _rt::cabi_dealloc(
                            base10,
                            len10 * (3 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result11 = result10;
                        result11
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets all values of all attributes of the current invocation context.
                pub fn get_attribute_chains(&self) -> _rt::Vec<AttributeChain> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute-chains"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base15 = l2;
                        let len15 = l3;
                        let mut result15 = _rt::Vec::with_capacity(len15);
                        for i in 0..len15 {
                            let base = base15
                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                            let e15 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *base
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base14 = l7;
                                let len14 = l8;
                                let mut result14 = _rt::Vec::with_capacity(len14);
                                for i in 0..len14 {
                                    let base = base14
                                        .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                    let e14 = {
                                        let l9 = i32::from(*base.add(0).cast::<u8>());
                                        let v13 = match l9 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e13 = {
                                                    let l10 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len12 = l11;
                                                    let bytes12 = _rt::Vec::from_raw_parts(
                                                        l10.cast(),
                                                        len12,
                                                        len12,
                                                    );
                                                    _rt::string_lift(bytes12)
                                                };
                                                AttributeValue::String(e13)
                                            }
                                        };
                                        v13
                                    };
                                    result14.push(e14);
                                }
                                _rt::cabi_dealloc(
                                    base14,
                                    len14 * (3 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                AttributeChain {
                                    key: _rt::string_lift(bytes6),
                                    values: result14,
                                }
                            };
                            result15.push(e15);
                        }
                        _rt::cabi_dealloc(
                            base15,
                            len15 * (4 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result16 = result15;
                        result16
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the W3C Trace Context headers associated with the current invocation context
                pub fn trace_context_headers(
                    &self,
                ) -> _rt::Vec<(_rt::String, _rt::String)> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.trace-context-headers"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base10 = l2;
                        let len10 = l3;
                        let mut result10 = _rt::Vec::with_capacity(len10);
                        for i in 0..len10 {
                            let base = base10
                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                            let e10 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *base
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                (_rt::string_lift(bytes6), _rt::string_lift(bytes9))
                            };
                            result10.push(e10);
                        }
                        _rt::cabi_dealloc(
                            base10,
                            len10 * (4 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result11 = result10;
                        result11
                    }
                }
            }
        }
        /// Host interface for enumerating and searching for worker oplogs
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod oplog {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type WitValue = super::super::super::golem::rpc::types::WitValue;
            pub type AccountId = super::super::super::golem::api::host::AccountId;
            pub type ComponentVersion = super::super::super::golem::api::host::ComponentVersion;
            pub type OplogIndex = super::super::super::golem::api::host::OplogIndex;
            pub type PersistenceLevel = super::super::super::golem::api::host::PersistenceLevel;
            pub type ProjectId = super::super::super::golem::api::host::ProjectId;
            pub type RetryPolicy = super::super::super::golem::api::host::RetryPolicy;
            pub type Uuid = super::super::super::golem::api::host::Uuid;
            pub type WorkerId = super::super::super::golem::api::host::WorkerId;
            pub type Attribute = super::super::super::golem::api::context::Attribute;
            pub type AttributeValue = super::super::super::golem::api::context::AttributeValue;
            pub type SpanId = super::super::super::golem::api::context::SpanId;
            pub type TraceId = super::super::super::golem::api::context::TraceId;
            #[derive(Clone, Copy)]
            pub enum WrappedFunctionType {
                /// The side-effect reads from the worker's local state (for example local file system,
                /// random generator, etc.)
                ReadLocal,
                /// The side-effect writes to the worker's local state (for example local file system)
                WriteLocal,
                /// The side-effect reads from external state (for example a key-value store)
                ReadRemote,
                /// The side-effect manipulates external state (for example an RPC call)
                WriteRemote,
                /// The side-effect manipulates external state through multiple invoked functions (for example
                /// a HTTP request where reading the response involves multiple host function calls)
                ///
                /// On the first invocation of the batch, the parameter should be `None` - this triggers
                /// writing a `BeginRemoteWrite` entry in the oplog. Followup invocations should contain
                /// this entry's index as the parameter. In batched remote writes it is the caller's responsibility
                /// to manually write an `EndRemoteWrite` entry (using `end_function`) when the operation is completed.
                WriteRemoteBatched(Option<OplogIndex>),
            }
            impl ::core::fmt::Debug for WrappedFunctionType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WrappedFunctionType::ReadLocal => {
                            f.debug_tuple("WrappedFunctionType::ReadLocal").finish()
                        }
                        WrappedFunctionType::WriteLocal => {
                            f.debug_tuple("WrappedFunctionType::WriteLocal").finish()
                        }
                        WrappedFunctionType::ReadRemote => {
                            f.debug_tuple("WrappedFunctionType::ReadRemote").finish()
                        }
                        WrappedFunctionType::WriteRemote => {
                            f.debug_tuple("WrappedFunctionType::WriteRemote").finish()
                        }
                        WrappedFunctionType::WriteRemoteBatched(e) => {
                            f.debug_tuple("WrappedFunctionType::WriteRemoteBatched")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PluginInstallationDescription {
                pub installation_id: Uuid,
                pub name: _rt::String,
                pub version: _rt::String,
                pub parameters: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for PluginInstallationDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PluginInstallationDescription")
                        .field("installation-id", &self.installation_id)
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("parameters", &self.parameters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CreateParameters {
                pub timestamp: Datetime,
                pub worker_id: WorkerId,
                pub component_version: ComponentVersion,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub created_by: AccountId,
                pub project_id: ProjectId,
                pub parent: Option<WorkerId>,
                pub component_size: u64,
                pub initial_total_linear_memory_size: u64,
                pub initial_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for CreateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("worker-id", &self.worker_id)
                        .field("component-version", &self.component_version)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("created-by", &self.created_by)
                        .field("project-id", &self.project_id)
                        .field("parent", &self.parent)
                        .field("component-size", &self.component_size)
                        .field(
                            "initial-total-linear-memory-size",
                            &self.initial_total_linear_memory_size,
                        )
                        .field("initial-active-plugins", &self.initial_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ImportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: WitValue,
                pub response: WitValue,
                pub wrapped_function_type: WrappedFunctionType,
            }
            impl ::core::fmt::Debug for ImportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("response", &self.response)
                        .field("wrapped-function-type", &self.wrapped_function_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct LocalSpanData {
                pub span_id: SpanId,
                pub start: Datetime,
                pub parent: Option<SpanId>,
                /// Optionally an index of the exported-function-invoked-parameters's invocation-context field
                pub linked_context: Option<u64>,
                pub attributes: _rt::Vec<Attribute>,
                pub inherited: bool,
            }
            impl ::core::fmt::Debug for LocalSpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LocalSpanData")
                        .field("span-id", &self.span_id)
                        .field("start", &self.start)
                        .field("parent", &self.parent)
                        .field("linked-context", &self.linked_context)
                        .field("attributes", &self.attributes)
                        .field("inherited", &self.inherited)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExternalSpanData {
                pub span_id: SpanId,
            }
            impl ::core::fmt::Debug for ExternalSpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExternalSpanData")
                        .field("span-id", &self.span_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum SpanData {
                LocalSpan(LocalSpanData),
                ExternalSpan(ExternalSpanData),
            }
            impl ::core::fmt::Debug for SpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SpanData::LocalSpan(e) => {
                            f.debug_tuple("SpanData::LocalSpan").field(e).finish()
                        }
                        SpanData::ExternalSpan(e) => {
                            f.debug_tuple("SpanData::ExternalSpan").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: _rt::Vec<WitValue>,
                pub idempotency_key: _rt::String,
                pub trace_id: TraceId,
                pub trace_states: _rt::Vec<_rt::String>,
                /// The first one is the invocation context stack associated with the exported function invocation,
                /// and further stacks can be added that are referenced by the `linked-context` field of `local-span-data`
                pub invocation_context: _rt::Vec<_rt::Vec<SpanData>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("idempotency-key", &self.idempotency_key)
                        .field("trace-id", &self.trace_id)
                        .field("trace-states", &self.trace_states)
                        .field("invocation-context", &self.invocation_context)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionCompletedParameters {
                pub timestamp: Datetime,
                pub response: Option<WitValue>,
                pub consumed_fuel: i64,
            }
            impl ::core::fmt::Debug for ExportedFunctionCompletedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionCompletedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("response", &self.response)
                        .field("consumed-fuel", &self.consumed_fuel)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ErrorParameters {
                pub timestamp: Datetime,
                pub error: _rt::String,
            }
            impl ::core::fmt::Debug for ErrorParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ErrorParameters")
                        .field("timestamp", &self.timestamp)
                        .field("error", &self.error)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct JumpParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for JumpParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JumpParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangeRetryPolicyParameters {
                pub timestamp: Datetime,
                pub retry_policy: RetryPolicy,
            }
            impl ::core::fmt::Debug for ChangeRetryPolicyParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChangeRetryPolicyParameters")
                        .field("timestamp", &self.timestamp)
                        .field("retry-policy", &self.retry_policy)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndAtomicRegionParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndAtomicRegionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndAtomicRegionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndRemoteWriteParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndRemoteWriteParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndRemoteWriteParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvocationParameters {
                pub idempotency_key: _rt::String,
                pub function_name: _rt::String,
                pub input: Option<_rt::Vec<WitValue>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvocationParameters")
                        .field("idempotency-key", &self.idempotency_key)
                        .field("function-name", &self.function_name)
                        .field("input", &self.input)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerInvocation {
                ExportedFunction(ExportedFunctionInvocationParameters),
                ManualUpdate(ComponentVersion),
            }
            impl ::core::fmt::Debug for WorkerInvocation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerInvocation::ExportedFunction(e) => {
                            f.debug_tuple("WorkerInvocation::ExportedFunction")
                                .field(e)
                                .finish()
                        }
                        WorkerInvocation::ManualUpdate(e) => {
                            f.debug_tuple("WorkerInvocation::ManualUpdate")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingWorkerInvocationParameters {
                pub timestamp: Datetime,
                pub invocation: WorkerInvocation,
            }
            impl ::core::fmt::Debug for PendingWorkerInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingWorkerInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("invocation", &self.invocation)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum UpdateDescription {
                /// Automatic update by replaying the oplog on the new version
                AutoUpdate,
                /// Custom update by loading a given snapshot on the new version
                SnapshotBased(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for UpdateDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateDescription::AutoUpdate => {
                            f.debug_tuple("UpdateDescription::AutoUpdate").finish()
                        }
                        UpdateDescription::SnapshotBased(e) => {
                            f.debug_tuple("UpdateDescription::SnapshotBased")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub update_description: UpdateDescription,
            }
            impl ::core::fmt::Debug for PendingUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("update-description", &self.update_description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SuccessfulUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub new_component_size: u64,
                pub new_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for SuccessfulUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SuccessfulUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("new-component-size", &self.new_component_size)
                        .field("new-active-plugins", &self.new_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FailedUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub details: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for FailedUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FailedUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("details", &self.details)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct GrowMemoryParameters {
                pub timestamp: Datetime,
                pub delta: u64,
            }
            impl ::core::fmt::Debug for GrowMemoryParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GrowMemoryParameters")
                        .field("timestamp", &self.timestamp)
                        .field("delta", &self.delta)
                        .finish()
                }
            }
            pub type WorkerResourceId = u64;
            #[derive(Clone)]
            pub struct CreateResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
                pub name: _rt::String,
                pub owner: _rt::String,
            }
            impl ::core::fmt::Debug for CreateResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DropResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
                pub name: _rt::String,
                pub owner: _rt::String,
            }
            impl ::core::fmt::Debug for DropResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DropResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum LogLevel {
                Stdout,
                Stderr,
                Trace,
                Debug,
                Info,
                Warn,
                Error,
                Critical,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Stdout => f.debug_tuple("LogLevel::Stdout").finish(),
                        LogLevel::Stderr => f.debug_tuple("LogLevel::Stderr").finish(),
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => {
                            f.debug_tuple("LogLevel::Critical").finish()
                        }
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Stdout,
                        1 => LogLevel::Stderr,
                        2 => LogLevel::Trace,
                        3 => LogLevel::Debug,
                        4 => LogLevel::Info,
                        5 => LogLevel::Warn,
                        6 => LogLevel::Error,
                        7 => LogLevel::Critical,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct LogParameters {
                pub timestamp: Datetime,
                pub level: LogLevel,
                pub context: _rt::String,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for LogParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LogParameters")
                        .field("timestamp", &self.timestamp)
                        .field("level", &self.level)
                        .field("context", &self.context)
                        .field("message", &self.message)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ActivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for ActivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ActivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DeactivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for DeactivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DeactivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RevertParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for RevertParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RevertParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CancelInvocationParameters {
                pub timestamp: Datetime,
                pub idempotency_key: _rt::String,
            }
            impl ::core::fmt::Debug for CancelInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CancelInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("idempotency-key", &self.idempotency_key)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct StartSpanParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
                pub parent: Option<SpanId>,
                pub linked_context: Option<SpanId>,
                pub attributes: _rt::Vec<Attribute>,
            }
            impl ::core::fmt::Debug for StartSpanParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("StartSpanParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .field("parent", &self.parent)
                        .field("linked-context", &self.linked_context)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FinishSpanParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
            }
            impl ::core::fmt::Debug for FinishSpanParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FinishSpanParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SetSpanAttributeParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
                pub key: _rt::String,
                pub value: AttributeValue,
            }
            impl ::core::fmt::Debug for SetSpanAttributeParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SetSpanAttributeParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangePersistenceLevelParameters {
                pub timestamp: Datetime,
                pub persistence_level: PersistenceLevel,
            }
            impl ::core::fmt::Debug for ChangePersistenceLevelParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChangePersistenceLevelParameters")
                        .field("timestamp", &self.timestamp)
                        .field("persistence-level", &self.persistence_level)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum OplogEntry {
                /// The initial worker oplog entry
                Create(CreateParameters),
                /// The worker invoked a host function
                ImportedFunctionInvoked(ImportedFunctionInvokedParameters),
                /// The worker has been invoked
                ExportedFunctionInvoked(ExportedFunctionInvokedParameters),
                /// The worker has completed an invocation
                ExportedFunctionCompleted(ExportedFunctionCompletedParameters),
                /// Worker suspended
                Suspend(Datetime),
                /// Worker failed
                Error(ErrorParameters),
                /// Marker entry added when get-oplog-index is called from the worker, to make the jumping behavior
                /// more predictable.
                NoOp(Datetime),
                /// The worker needs to recover up to the given target oplog index and continue running from
                /// the source oplog index from there
                /// `jump` is an oplog region representing that from the end of that region we want to go back to the start and
                /// ignore all recorded operations in between.
                Jump(JumpParameters),
                /// Indicates that the worker has been interrupted at this point.
                /// Only used to recompute the worker's (cached) status, has no effect on execution.
                Interrupted(Datetime),
                /// Indicates that the worker has been exited using WASI's exit function.
                Exited(Datetime),
                /// Overrides the worker's retry policy
                ChangeRetryPolicy(ChangeRetryPolicyParameters),
                /// Begins an atomic region. All oplog entries after `BeginAtomicRegion` are to be ignored during
                /// recovery except if there is a corresponding `EndAtomicRegion` entry.
                BeginAtomicRegion(Datetime),
                /// Ends an atomic region. All oplog entries between the corresponding `BeginAtomicRegion` and this
                /// entry are to be considered during recovery, and the begin/end markers can be removed during oplog
                /// compaction.
                EndAtomicRegion(EndAtomicRegionParameters),
                /// Begins a remote write operation. Only used when idempotence mode is off. In this case each
                /// remote write must be surrounded by a `BeginRemoteWrite` and `EndRemoteWrite` log pair and
                /// unfinished remote writes cannot be recovered.
                BeginRemoteWrite(Datetime),
                /// Marks the end of a remote write operation. Only used when idempotence mode is off.
                EndRemoteWrite(EndRemoteWriteParameters),
                /// An invocation request arrived while the worker was busy
                PendingWorkerInvocation(PendingWorkerInvocationParameters),
                /// An update request arrived and will be applied as soon the worker restarts
                PendingUpdate(PendingUpdateParameters),
                /// An update was successfully applied
                SuccessfulUpdate(SuccessfulUpdateParameters),
                /// An update failed to be applied
                FailedUpdate(FailedUpdateParameters),
                /// Increased total linear memory size
                GrowMemory(GrowMemoryParameters),
                /// Created a resource instance
                CreateResource(CreateResourceParameters),
                /// Dropped a resource instance
                DropResource(DropResourceParameters),
                /// The worker emitted a log message
                Log(LogParameters),
                /// The worker's has been restarted, forgetting all its history
                Restart(Datetime),
                /// Activates a plugin
                ActivatePlugin(ActivatePluginParameters),
                /// Deactivates a plugin
                DeactivatePlugin(DeactivatePluginParameters),
                /// Revert a worker to a previous state
                Revert(RevertParameters),
                /// Cancel a pending invocation
                CancelInvocation(CancelInvocationParameters),
                /// Start a new span in the invocation context
                StartSpan(StartSpanParameters),
                /// Finish an open span in the invocation context
                FinishSpan(FinishSpanParameters),
                /// Set an attribute on an open span in the invocation context
                SetSpanAttribute(SetSpanAttributeParameters),
                /// Change the current persistence level
                ChangePersistenceLevel(ChangePersistenceLevelParameters),
            }
            impl ::core::fmt::Debug for OplogEntry {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        OplogEntry::Create(e) => {
                            f.debug_tuple("OplogEntry::Create").field(e).finish()
                        }
                        OplogEntry::ImportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ImportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionCompleted(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionCompleted")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Suspend(e) => {
                            f.debug_tuple("OplogEntry::Suspend").field(e).finish()
                        }
                        OplogEntry::Error(e) => {
                            f.debug_tuple("OplogEntry::Error").field(e).finish()
                        }
                        OplogEntry::NoOp(e) => {
                            f.debug_tuple("OplogEntry::NoOp").field(e).finish()
                        }
                        OplogEntry::Jump(e) => {
                            f.debug_tuple("OplogEntry::Jump").field(e).finish()
                        }
                        OplogEntry::Interrupted(e) => {
                            f.debug_tuple("OplogEntry::Interrupted").field(e).finish()
                        }
                        OplogEntry::Exited(e) => {
                            f.debug_tuple("OplogEntry::Exited").field(e).finish()
                        }
                        OplogEntry::ChangeRetryPolicy(e) => {
                            f.debug_tuple("OplogEntry::ChangeRetryPolicy")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::BeginAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::EndAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::BeginRemoteWrite")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::EndRemoteWrite").field(e).finish()
                        }
                        OplogEntry::PendingWorkerInvocation(e) => {
                            f.debug_tuple("OplogEntry::PendingWorkerInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PendingUpdate(e) => {
                            f.debug_tuple("OplogEntry::PendingUpdate").field(e).finish()
                        }
                        OplogEntry::SuccessfulUpdate(e) => {
                            f.debug_tuple("OplogEntry::SuccessfulUpdate")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::FailedUpdate(e) => {
                            f.debug_tuple("OplogEntry::FailedUpdate").field(e).finish()
                        }
                        OplogEntry::GrowMemory(e) => {
                            f.debug_tuple("OplogEntry::GrowMemory").field(e).finish()
                        }
                        OplogEntry::CreateResource(e) => {
                            f.debug_tuple("OplogEntry::CreateResource").field(e).finish()
                        }
                        OplogEntry::DropResource(e) => {
                            f.debug_tuple("OplogEntry::DropResource").field(e).finish()
                        }
                        OplogEntry::Log(e) => {
                            f.debug_tuple("OplogEntry::Log").field(e).finish()
                        }
                        OplogEntry::Restart(e) => {
                            f.debug_tuple("OplogEntry::Restart").field(e).finish()
                        }
                        OplogEntry::ActivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::ActivatePlugin").field(e).finish()
                        }
                        OplogEntry::DeactivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::DeactivatePlugin")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Revert(e) => {
                            f.debug_tuple("OplogEntry::Revert").field(e).finish()
                        }
                        OplogEntry::CancelInvocation(e) => {
                            f.debug_tuple("OplogEntry::CancelInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::StartSpan(e) => {
                            f.debug_tuple("OplogEntry::StartSpan").field(e).finish()
                        }
                        OplogEntry::FinishSpan(e) => {
                            f.debug_tuple("OplogEntry::FinishSpan").field(e).finish()
                        }
                        OplogEntry::SetSpanAttribute(e) => {
                            f.debug_tuple("OplogEntry::SetSpanAttribute")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ChangePersistenceLevel(e) => {
                            f.debug_tuple("OplogEntry::ChangePersistenceLevel")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetOplog {
                handle: _rt::Resource<GetOplog>,
            }
            impl GetOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-oplog"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SearchOplog {
                handle: _rt::Resource<SearchOplog>,
            }
            impl SearchOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SearchOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]search-oplog"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId, start: OplogIndex) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-oplog"]
                            fn wit_import4(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                                _rt::as_i64(start),
                            )
                        };
                        unsafe { GetOplog::from_handle(ret as u32) }
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<OplogEntry>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-oplog.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result585 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base584 = l3;
                                    let len584 = l4;
                                    let mut result584 = _rt::Vec::with_capacity(len584);
                                    for i in 0..len584 {
                                        let base = base584
                                            .add(i * (104 + 12 * ::core::mem::size_of::<*const u8>()));
                                        let e584 = {
                                            let l5 = i32::from(*base.add(0).cast::<u8>());
                                            let v583 = match l5 {
                                                0 => {
                                                    let e583 = {
                                                        let l6 = *base.add(8).cast::<i64>();
                                                        let l7 = *base.add(16).cast::<i32>();
                                                        let l8 = *base.add(24).cast::<i64>();
                                                        let l9 = *base.add(32).cast::<i64>();
                                                        let l10 = *base.add(40).cast::<*mut u8>();
                                                        let l11 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len12 = l11;
                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                            l10.cast(),
                                                            len12,
                                                            len12,
                                                        );
                                                        let l13 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l14 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l15 = *base
                                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base19 = l14;
                                                        let len19 = l15;
                                                        let mut result19 = _rt::Vec::with_capacity(len19);
                                                        for i in 0..len19 {
                                                            let base = base19
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e19 = {
                                                                let l16 = *base.add(0).cast::<*mut u8>();
                                                                let l17 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len18 = l17;
                                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                                    l16.cast(),
                                                                    len18,
                                                                    len18,
                                                                );
                                                                _rt::string_lift(bytes18)
                                                            };
                                                            result19.push(e19);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base19,
                                                            len19 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l20 = *base
                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l21 = *base
                                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base28 = l20;
                                                        let len28 = l21;
                                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e28 = {
                                                                let l22 = *base.add(0).cast::<*mut u8>();
                                                                let l23 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len24 = l23;
                                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                                    l22.cast(),
                                                                    len24,
                                                                    len24,
                                                                );
                                                                let l25 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l26 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len27 = l26;
                                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                                    l25.cast(),
                                                                    len27,
                                                                    len27,
                                                                );
                                                                (_rt::string_lift(bytes24), _rt::string_lift(bytes27))
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base28,
                                                            len28 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l29 = *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l30 = *base
                                                            .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len31 = l30;
                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        );
                                                        let l32 = *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l33 = *base
                                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l34 = i32::from(
                                                            *base
                                                                .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l40 = *base
                                                            .add(88 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l41 = *base
                                                            .add(96 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l42 = *base
                                                            .add(104 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l43 = *base
                                                            .add(104 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base61 = l42;
                                                        let len61 = l43;
                                                        let mut result61 = _rt::Vec::with_capacity(len61);
                                                        for i in 0..len61 {
                                                            let base = base61
                                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                                            let e61 = {
                                                                let l44 = *base.add(0).cast::<i64>();
                                                                let l45 = *base.add(8).cast::<i64>();
                                                                let l46 = *base.add(16).cast::<*mut u8>();
                                                                let l47 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                );
                                                                let l49 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                let l52 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l53 = *base
                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base60 = l52;
                                                                let len60 = l53;
                                                                let mut result60 = _rt::Vec::with_capacity(len60);
                                                                for i in 0..len60 {
                                                                    let base = base60
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e60 = {
                                                                        let l54 = *base.add(0).cast::<*mut u8>();
                                                                        let l55 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len56 = l55;
                                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                                            l54.cast(),
                                                                            len56,
                                                                            len56,
                                                                        );
                                                                        let l57 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l58 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len59 = l58;
                                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                                            l57.cast(),
                                                                            len59,
                                                                            len59,
                                                                        );
                                                                        (_rt::string_lift(bytes56), _rt::string_lift(bytes59))
                                                                    };
                                                                    result60.push(e60);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base60,
                                                                    len60 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l44 as u64,
                                                                        low_bits: l45 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes48),
                                                                    version: _rt::string_lift(bytes51),
                                                                    parameters: result60,
                                                                }
                                                            };
                                                            result61.push(e61);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base61,
                                                            len61 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l6 as u64,
                                                                nanoseconds: l7 as u32,
                                                            },
                                                            worker_id: super::super::super::golem::rpc::types::WorkerId {
                                                                component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l8 as u64,
                                                                        low_bits: l9 as u64,
                                                                    },
                                                                },
                                                                worker_name: _rt::string_lift(bytes12),
                                                            },
                                                            component_version: l13 as u64,
                                                            args: result19,
                                                            env: result28,
                                                            created_by: super::super::super::golem::api::host::AccountId {
                                                                value: _rt::string_lift(bytes31),
                                                            },
                                                            project_id: super::super::super::golem::api::host::ProjectId {
                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l32 as u64,
                                                                    low_bits: l33 as u64,
                                                                },
                                                            },
                                                            parent: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *base
                                                                            .add(72 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l36 = *base
                                                                            .add(80 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l37 = *base
                                                                            .add(88 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l38 = *base
                                                                            .add(88 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len39 = l38;
                                                                        let bytes39 = _rt::Vec::from_raw_parts(
                                                                            l37.cast(),
                                                                            len39,
                                                                            len39,
                                                                        );
                                                                        super::super::super::golem::rpc::types::WorkerId {
                                                                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                                    high_bits: l35 as u64,
                                                                                    low_bits: l36 as u64,
                                                                                },
                                                                            },
                                                                            worker_name: _rt::string_lift(bytes39),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l40 as u64,
                                                            initial_total_linear_memory_size: l41 as u64,
                                                            initial_active_plugins: result61,
                                                        }
                                                    };
                                                    OplogEntry::Create(e583)
                                                }
                                                1 => {
                                                    let e583 = {
                                                        let l62 = *base.add(8).cast::<i64>();
                                                        let l63 = *base.add(16).cast::<i32>();
                                                        let l64 = *base.add(24).cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        let l67 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l68 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base114 = l67;
                                                        let len114 = l68;
                                                        let mut result114 = _rt::Vec::with_capacity(len114);
                                                        for i in 0..len114 {
                                                            let base = base114
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e114 = {
                                                                let l69 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V113;
                                                                let v113 = match l69 {
                                                                    0 => {
                                                                        let e113 = {
                                                                            let l70 = *base.add(8).cast::<*mut u8>();
                                                                            let l71 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len72 = l71;
                                                                            _rt::Vec::from_raw_parts(l70.cast(), len72, len72)
                                                                        };
                                                                        V113::RecordValue(e113)
                                                                    }
                                                                    1 => {
                                                                        let e113 = {
                                                                            let l73 = *base.add(8).cast::<i32>();
                                                                            let l74 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l73 as u32,
                                                                                match l74 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l75 = *base.add(16).cast::<i32>();
                                                                                            l75
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V113::VariantValue(e113)
                                                                    }
                                                                    2 => {
                                                                        let e113 = {
                                                                            let l76 = *base.add(8).cast::<i32>();
                                                                            l76 as u32
                                                                        };
                                                                        V113::EnumValue(e113)
                                                                    }
                                                                    3 => {
                                                                        let e113 = {
                                                                            let l77 = *base.add(8).cast::<*mut u8>();
                                                                            let l78 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base80 = l77;
                                                                            let len80 = l78;
                                                                            let mut result80 = _rt::Vec::with_capacity(len80);
                                                                            for i in 0..len80 {
                                                                                let base = base80.add(i * 1);
                                                                                let e80 = {
                                                                                    let l79 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l79 as u8)
                                                                                };
                                                                                result80.push(e80);
                                                                            }
                                                                            _rt::cabi_dealloc(base80, len80 * 1, 1);
                                                                            result80
                                                                        };
                                                                        V113::FlagsValue(e113)
                                                                    }
                                                                    4 => {
                                                                        let e113 = {
                                                                            let l81 = *base.add(8).cast::<*mut u8>();
                                                                            let l82 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len83 = l82;
                                                                            _rt::Vec::from_raw_parts(l81.cast(), len83, len83)
                                                                        };
                                                                        V113::TupleValue(e113)
                                                                    }
                                                                    5 => {
                                                                        let e113 = {
                                                                            let l84 = *base.add(8).cast::<*mut u8>();
                                                                            let l85 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len86 = l85;
                                                                            _rt::Vec::from_raw_parts(l84.cast(), len86, len86)
                                                                        };
                                                                        V113::ListValue(e113)
                                                                    }
                                                                    6 => {
                                                                        let e113 = {
                                                                            let l87 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l87 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l88 = *base.add(12).cast::<i32>();
                                                                                        l88
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V113::OptionValue(e113)
                                                                    }
                                                                    7 => {
                                                                        let e113 = {
                                                                            let l89 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l89 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l90 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l90 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l91 = *base.add(16).cast::<i32>();
                                                                                                    l91
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l92 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l92 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l93 = *base.add(16).cast::<i32>();
                                                                                                    l93
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V113::ResultValue(e113)
                                                                    }
                                                                    8 => {
                                                                        let e113 = {
                                                                            let l94 = i32::from(*base.add(8).cast::<u8>());
                                                                            l94 as u8
                                                                        };
                                                                        V113::PrimU8(e113)
                                                                    }
                                                                    9 => {
                                                                        let e113 = {
                                                                            let l95 = i32::from(*base.add(8).cast::<u16>());
                                                                            l95 as u16
                                                                        };
                                                                        V113::PrimU16(e113)
                                                                    }
                                                                    10 => {
                                                                        let e113 = {
                                                                            let l96 = *base.add(8).cast::<i32>();
                                                                            l96 as u32
                                                                        };
                                                                        V113::PrimU32(e113)
                                                                    }
                                                                    11 => {
                                                                        let e113 = {
                                                                            let l97 = *base.add(8).cast::<i64>();
                                                                            l97 as u64
                                                                        };
                                                                        V113::PrimU64(e113)
                                                                    }
                                                                    12 => {
                                                                        let e113 = {
                                                                            let l98 = i32::from(*base.add(8).cast::<i8>());
                                                                            l98 as i8
                                                                        };
                                                                        V113::PrimS8(e113)
                                                                    }
                                                                    13 => {
                                                                        let e113 = {
                                                                            let l99 = i32::from(*base.add(8).cast::<i16>());
                                                                            l99 as i16
                                                                        };
                                                                        V113::PrimS16(e113)
                                                                    }
                                                                    14 => {
                                                                        let e113 = {
                                                                            let l100 = *base.add(8).cast::<i32>();
                                                                            l100
                                                                        };
                                                                        V113::PrimS32(e113)
                                                                    }
                                                                    15 => {
                                                                        let e113 = {
                                                                            let l101 = *base.add(8).cast::<i64>();
                                                                            l101
                                                                        };
                                                                        V113::PrimS64(e113)
                                                                    }
                                                                    16 => {
                                                                        let e113 = {
                                                                            let l102 = *base.add(8).cast::<f32>();
                                                                            l102
                                                                        };
                                                                        V113::PrimFloat32(e113)
                                                                    }
                                                                    17 => {
                                                                        let e113 = {
                                                                            let l103 = *base.add(8).cast::<f64>();
                                                                            l103
                                                                        };
                                                                        V113::PrimFloat64(e113)
                                                                    }
                                                                    18 => {
                                                                        let e113 = {
                                                                            let l104 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l104 as u32)
                                                                        };
                                                                        V113::PrimChar(e113)
                                                                    }
                                                                    19 => {
                                                                        let e113 = {
                                                                            let l105 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l105 as u8)
                                                                        };
                                                                        V113::PrimBool(e113)
                                                                    }
                                                                    20 => {
                                                                        let e113 = {
                                                                            let l106 = *base.add(8).cast::<*mut u8>();
                                                                            let l107 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len108 = l107;
                                                                            let bytes108 = _rt::Vec::from_raw_parts(
                                                                                l106.cast(),
                                                                                len108,
                                                                                len108,
                                                                            );
                                                                            _rt::string_lift(bytes108)
                                                                        };
                                                                        V113::PrimString(e113)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e113 = {
                                                                            let l109 = *base.add(8).cast::<*mut u8>();
                                                                            let l110 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len111 = l110;
                                                                            let bytes111 = _rt::Vec::from_raw_parts(
                                                                                l109.cast(),
                                                                                len111,
                                                                                len111,
                                                                            );
                                                                            let l112 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes111),
                                                                                },
                                                                                l112 as u64,
                                                                            )
                                                                        };
                                                                        V113::Handle(e113)
                                                                    }
                                                                };
                                                                v113
                                                            };
                                                            result114.push(e114);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base114,
                                                            len114 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l115 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l116 = *base
                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base162 = l115;
                                                        let len162 = l116;
                                                        let mut result162 = _rt::Vec::with_capacity(len162);
                                                        for i in 0..len162 {
                                                            let base = base162
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e162 = {
                                                                let l117 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V161;
                                                                let v161 = match l117 {
                                                                    0 => {
                                                                        let e161 = {
                                                                            let l118 = *base.add(8).cast::<*mut u8>();
                                                                            let l119 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len120 = l119;
                                                                            _rt::Vec::from_raw_parts(l118.cast(), len120, len120)
                                                                        };
                                                                        V161::RecordValue(e161)
                                                                    }
                                                                    1 => {
                                                                        let e161 = {
                                                                            let l121 = *base.add(8).cast::<i32>();
                                                                            let l122 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l121 as u32,
                                                                                match l122 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l123 = *base.add(16).cast::<i32>();
                                                                                            l123
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V161::VariantValue(e161)
                                                                    }
                                                                    2 => {
                                                                        let e161 = {
                                                                            let l124 = *base.add(8).cast::<i32>();
                                                                            l124 as u32
                                                                        };
                                                                        V161::EnumValue(e161)
                                                                    }
                                                                    3 => {
                                                                        let e161 = {
                                                                            let l125 = *base.add(8).cast::<*mut u8>();
                                                                            let l126 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base128 = l125;
                                                                            let len128 = l126;
                                                                            let mut result128 = _rt::Vec::with_capacity(len128);
                                                                            for i in 0..len128 {
                                                                                let base = base128.add(i * 1);
                                                                                let e128 = {
                                                                                    let l127 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l127 as u8)
                                                                                };
                                                                                result128.push(e128);
                                                                            }
                                                                            _rt::cabi_dealloc(base128, len128 * 1, 1);
                                                                            result128
                                                                        };
                                                                        V161::FlagsValue(e161)
                                                                    }
                                                                    4 => {
                                                                        let e161 = {
                                                                            let l129 = *base.add(8).cast::<*mut u8>();
                                                                            let l130 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len131 = l130;
                                                                            _rt::Vec::from_raw_parts(l129.cast(), len131, len131)
                                                                        };
                                                                        V161::TupleValue(e161)
                                                                    }
                                                                    5 => {
                                                                        let e161 = {
                                                                            let l132 = *base.add(8).cast::<*mut u8>();
                                                                            let l133 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len134 = l133;
                                                                            _rt::Vec::from_raw_parts(l132.cast(), len134, len134)
                                                                        };
                                                                        V161::ListValue(e161)
                                                                    }
                                                                    6 => {
                                                                        let e161 = {
                                                                            let l135 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l135 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l136 = *base.add(12).cast::<i32>();
                                                                                        l136
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V161::OptionValue(e161)
                                                                    }
                                                                    7 => {
                                                                        let e161 = {
                                                                            let l137 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l137 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l138 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l138 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l139 = *base.add(16).cast::<i32>();
                                                                                                    l139
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l140 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l140 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l141 = *base.add(16).cast::<i32>();
                                                                                                    l141
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V161::ResultValue(e161)
                                                                    }
                                                                    8 => {
                                                                        let e161 = {
                                                                            let l142 = i32::from(*base.add(8).cast::<u8>());
                                                                            l142 as u8
                                                                        };
                                                                        V161::PrimU8(e161)
                                                                    }
                                                                    9 => {
                                                                        let e161 = {
                                                                            let l143 = i32::from(*base.add(8).cast::<u16>());
                                                                            l143 as u16
                                                                        };
                                                                        V161::PrimU16(e161)
                                                                    }
                                                                    10 => {
                                                                        let e161 = {
                                                                            let l144 = *base.add(8).cast::<i32>();
                                                                            l144 as u32
                                                                        };
                                                                        V161::PrimU32(e161)
                                                                    }
                                                                    11 => {
                                                                        let e161 = {
                                                                            let l145 = *base.add(8).cast::<i64>();
                                                                            l145 as u64
                                                                        };
                                                                        V161::PrimU64(e161)
                                                                    }
                                                                    12 => {
                                                                        let e161 = {
                                                                            let l146 = i32::from(*base.add(8).cast::<i8>());
                                                                            l146 as i8
                                                                        };
                                                                        V161::PrimS8(e161)
                                                                    }
                                                                    13 => {
                                                                        let e161 = {
                                                                            let l147 = i32::from(*base.add(8).cast::<i16>());
                                                                            l147 as i16
                                                                        };
                                                                        V161::PrimS16(e161)
                                                                    }
                                                                    14 => {
                                                                        let e161 = {
                                                                            let l148 = *base.add(8).cast::<i32>();
                                                                            l148
                                                                        };
                                                                        V161::PrimS32(e161)
                                                                    }
                                                                    15 => {
                                                                        let e161 = {
                                                                            let l149 = *base.add(8).cast::<i64>();
                                                                            l149
                                                                        };
                                                                        V161::PrimS64(e161)
                                                                    }
                                                                    16 => {
                                                                        let e161 = {
                                                                            let l150 = *base.add(8).cast::<f32>();
                                                                            l150
                                                                        };
                                                                        V161::PrimFloat32(e161)
                                                                    }
                                                                    17 => {
                                                                        let e161 = {
                                                                            let l151 = *base.add(8).cast::<f64>();
                                                                            l151
                                                                        };
                                                                        V161::PrimFloat64(e161)
                                                                    }
                                                                    18 => {
                                                                        let e161 = {
                                                                            let l152 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l152 as u32)
                                                                        };
                                                                        V161::PrimChar(e161)
                                                                    }
                                                                    19 => {
                                                                        let e161 = {
                                                                            let l153 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l153 as u8)
                                                                        };
                                                                        V161::PrimBool(e161)
                                                                    }
                                                                    20 => {
                                                                        let e161 = {
                                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                                            let l155 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len156 = l155;
                                                                            let bytes156 = _rt::Vec::from_raw_parts(
                                                                                l154.cast(),
                                                                                len156,
                                                                                len156,
                                                                            );
                                                                            _rt::string_lift(bytes156)
                                                                        };
                                                                        V161::PrimString(e161)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e161 = {
                                                                            let l157 = *base.add(8).cast::<*mut u8>();
                                                                            let l158 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len159 = l158;
                                                                            let bytes159 = _rt::Vec::from_raw_parts(
                                                                                l157.cast(),
                                                                                len159,
                                                                                len159,
                                                                            );
                                                                            let l160 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes159),
                                                                                },
                                                                                l160 as u64,
                                                                            )
                                                                        };
                                                                        V161::Handle(e161)
                                                                    }
                                                                };
                                                                v161
                                                            };
                                                            result162.push(e162);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base162,
                                                            len162 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l163 = i32::from(
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let v166 = match l163 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            n => {
                                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                                let e166 = {
                                                                    let l164 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l164 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l165 = *base
                                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l165 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e166)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l62 as u64,
                                                                nanoseconds: l63 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes66),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result114,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result162,
                                                            },
                                                            wrapped_function_type: v166,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e583)
                                                }
                                                2 => {
                                                    let e583 = {
                                                        let l167 = *base.add(8).cast::<i64>();
                                                        let l168 = *base.add(16).cast::<i32>();
                                                        let l169 = *base.add(24).cast::<*mut u8>();
                                                        let l170 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len171 = l170;
                                                        let bytes171 = _rt::Vec::from_raw_parts(
                                                            l169.cast(),
                                                            len171,
                                                            len171,
                                                        );
                                                        let l172 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l173 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base222 = l172;
                                                        let len222 = l173;
                                                        let mut result222 = _rt::Vec::with_capacity(len222);
                                                        for i in 0..len222 {
                                                            let base = base222
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e222 = {
                                                                let l174 = *base.add(0).cast::<*mut u8>();
                                                                let l175 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base221 = l174;
                                                                let len221 = l175;
                                                                let mut result221 = _rt::Vec::with_capacity(len221);
                                                                for i in 0..len221 {
                                                                    let base = base221
                                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                    let e221 = {
                                                                        let l176 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V220;
                                                                        let v220 = match l176 {
                                                                            0 => {
                                                                                let e220 = {
                                                                                    let l177 = *base.add(8).cast::<*mut u8>();
                                                                                    let l178 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len179 = l178;
                                                                                    _rt::Vec::from_raw_parts(l177.cast(), len179, len179)
                                                                                };
                                                                                V220::RecordValue(e220)
                                                                            }
                                                                            1 => {
                                                                                let e220 = {
                                                                                    let l180 = *base.add(8).cast::<i32>();
                                                                                    let l181 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l180 as u32,
                                                                                        match l181 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l182 = *base.add(16).cast::<i32>();
                                                                                                    l182
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V220::VariantValue(e220)
                                                                            }
                                                                            2 => {
                                                                                let e220 = {
                                                                                    let l183 = *base.add(8).cast::<i32>();
                                                                                    l183 as u32
                                                                                };
                                                                                V220::EnumValue(e220)
                                                                            }
                                                                            3 => {
                                                                                let e220 = {
                                                                                    let l184 = *base.add(8).cast::<*mut u8>();
                                                                                    let l185 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base187 = l184;
                                                                                    let len187 = l185;
                                                                                    let mut result187 = _rt::Vec::with_capacity(len187);
                                                                                    for i in 0..len187 {
                                                                                        let base = base187.add(i * 1);
                                                                                        let e187 = {
                                                                                            let l186 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l186 as u8)
                                                                                        };
                                                                                        result187.push(e187);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base187, len187 * 1, 1);
                                                                                    result187
                                                                                };
                                                                                V220::FlagsValue(e220)
                                                                            }
                                                                            4 => {
                                                                                let e220 = {
                                                                                    let l188 = *base.add(8).cast::<*mut u8>();
                                                                                    let l189 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len190 = l189;
                                                                                    _rt::Vec::from_raw_parts(l188.cast(), len190, len190)
                                                                                };
                                                                                V220::TupleValue(e220)
                                                                            }
                                                                            5 => {
                                                                                let e220 = {
                                                                                    let l191 = *base.add(8).cast::<*mut u8>();
                                                                                    let l192 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len193 = l192;
                                                                                    _rt::Vec::from_raw_parts(l191.cast(), len193, len193)
                                                                                };
                                                                                V220::ListValue(e220)
                                                                            }
                                                                            6 => {
                                                                                let e220 = {
                                                                                    let l194 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l194 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l195 = *base.add(12).cast::<i32>();
                                                                                                l195
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V220::OptionValue(e220)
                                                                            }
                                                                            7 => {
                                                                                let e220 = {
                                                                                    let l196 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l196 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l197 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l197 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l198 = *base.add(16).cast::<i32>();
                                                                                                            l198
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l199 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l199 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l200 = *base.add(16).cast::<i32>();
                                                                                                            l200
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V220::ResultValue(e220)
                                                                            }
                                                                            8 => {
                                                                                let e220 = {
                                                                                    let l201 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l201 as u8
                                                                                };
                                                                                V220::PrimU8(e220)
                                                                            }
                                                                            9 => {
                                                                                let e220 = {
                                                                                    let l202 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l202 as u16
                                                                                };
                                                                                V220::PrimU16(e220)
                                                                            }
                                                                            10 => {
                                                                                let e220 = {
                                                                                    let l203 = *base.add(8).cast::<i32>();
                                                                                    l203 as u32
                                                                                };
                                                                                V220::PrimU32(e220)
                                                                            }
                                                                            11 => {
                                                                                let e220 = {
                                                                                    let l204 = *base.add(8).cast::<i64>();
                                                                                    l204 as u64
                                                                                };
                                                                                V220::PrimU64(e220)
                                                                            }
                                                                            12 => {
                                                                                let e220 = {
                                                                                    let l205 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l205 as i8
                                                                                };
                                                                                V220::PrimS8(e220)
                                                                            }
                                                                            13 => {
                                                                                let e220 = {
                                                                                    let l206 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l206 as i16
                                                                                };
                                                                                V220::PrimS16(e220)
                                                                            }
                                                                            14 => {
                                                                                let e220 = {
                                                                                    let l207 = *base.add(8).cast::<i32>();
                                                                                    l207
                                                                                };
                                                                                V220::PrimS32(e220)
                                                                            }
                                                                            15 => {
                                                                                let e220 = {
                                                                                    let l208 = *base.add(8).cast::<i64>();
                                                                                    l208
                                                                                };
                                                                                V220::PrimS64(e220)
                                                                            }
                                                                            16 => {
                                                                                let e220 = {
                                                                                    let l209 = *base.add(8).cast::<f32>();
                                                                                    l209
                                                                                };
                                                                                V220::PrimFloat32(e220)
                                                                            }
                                                                            17 => {
                                                                                let e220 = {
                                                                                    let l210 = *base.add(8).cast::<f64>();
                                                                                    l210
                                                                                };
                                                                                V220::PrimFloat64(e220)
                                                                            }
                                                                            18 => {
                                                                                let e220 = {
                                                                                    let l211 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l211 as u32)
                                                                                };
                                                                                V220::PrimChar(e220)
                                                                            }
                                                                            19 => {
                                                                                let e220 = {
                                                                                    let l212 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l212 as u8)
                                                                                };
                                                                                V220::PrimBool(e220)
                                                                            }
                                                                            20 => {
                                                                                let e220 = {
                                                                                    let l213 = *base.add(8).cast::<*mut u8>();
                                                                                    let l214 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len215 = l214;
                                                                                    let bytes215 = _rt::Vec::from_raw_parts(
                                                                                        l213.cast(),
                                                                                        len215,
                                                                                        len215,
                                                                                    );
                                                                                    _rt::string_lift(bytes215)
                                                                                };
                                                                                V220::PrimString(e220)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e220 = {
                                                                                    let l216 = *base.add(8).cast::<*mut u8>();
                                                                                    let l217 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len218 = l217;
                                                                                    let bytes218 = _rt::Vec::from_raw_parts(
                                                                                        l216.cast(),
                                                                                        len218,
                                                                                        len218,
                                                                                    );
                                                                                    let l219 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes218),
                                                                                        },
                                                                                        l219 as u64,
                                                                                    )
                                                                                };
                                                                                V220::Handle(e220)
                                                                            }
                                                                        };
                                                                        v220
                                                                    };
                                                                    result221.push(e221);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base221,
                                                                    len221 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result221,
                                                                }
                                                            };
                                                            result222.push(e222);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base222,
                                                            len222 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l223 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l224 = *base
                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len225 = l224;
                                                        let bytes225 = _rt::Vec::from_raw_parts(
                                                            l223.cast(),
                                                            len225,
                                                            len225,
                                                        );
                                                        let l226 = *base
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l227 = *base
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len228 = l227;
                                                        let bytes228 = _rt::Vec::from_raw_parts(
                                                            l226.cast(),
                                                            len228,
                                                            len228,
                                                        );
                                                        let l229 = *base
                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l230 = *base
                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base234 = l229;
                                                        let len234 = l230;
                                                        let mut result234 = _rt::Vec::with_capacity(len234);
                                                        for i in 0..len234 {
                                                            let base = base234
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e234 = {
                                                                let l231 = *base.add(0).cast::<*mut u8>();
                                                                let l232 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len233 = l232;
                                                                let bytes233 = _rt::Vec::from_raw_parts(
                                                                    l231.cast(),
                                                                    len233,
                                                                    len233,
                                                                );
                                                                _rt::string_lift(bytes233)
                                                            };
                                                            result234.push(e234);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base234,
                                                            len234 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l235 = *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l236 = *base
                                                            .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base268 = l235;
                                                        let len268 = l236;
                                                        let mut result268 = _rt::Vec::with_capacity(len268);
                                                        for i in 0..len268 {
                                                            let base = base268
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e268 = {
                                                                let l237 = *base.add(0).cast::<*mut u8>();
                                                                let l238 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base267 = l237;
                                                                let len267 = l238;
                                                                let mut result267 = _rt::Vec::with_capacity(len267);
                                                                for i in 0..len267 {
                                                                    let base = base267
                                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                    let e267 = {
                                                                        let l239 = i32::from(*base.add(0).cast::<u8>());
                                                                        let v266 = match l239 {
                                                                            0 => {
                                                                                let e266 = {
                                                                                    let l240 = *base.add(8).cast::<*mut u8>();
                                                                                    let l241 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len242 = l241;
                                                                                    let bytes242 = _rt::Vec::from_raw_parts(
                                                                                        l240.cast(),
                                                                                        len242,
                                                                                        len242,
                                                                                    );
                                                                                    let l243 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    let l244 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>();
                                                                                    let l245 = i32::from(
                                                                                        *base
                                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l249 = i32::from(
                                                                                        *base
                                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l251 = *base
                                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l252 = *base
                                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base261 = l251;
                                                                                    let len261 = l252;
                                                                                    let mut result261 = _rt::Vec::with_capacity(len261);
                                                                                    for i in 0..len261 {
                                                                                        let base = base261
                                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e261 = {
                                                                                            let l253 = *base.add(0).cast::<*mut u8>();
                                                                                            let l254 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len255 = l254;
                                                                                            let bytes255 = _rt::Vec::from_raw_parts(
                                                                                                l253.cast(),
                                                                                                len255,
                                                                                                len255,
                                                                                            );
                                                                                            let l256 = i32::from(
                                                                                                *base
                                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            use super::super::super::golem::api::context::AttributeValue as V260;
                                                                                            let v260 = match l256 {
                                                                                                n => {
                                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                                    let e260 = {
                                                                                                        let l257 = *base
                                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<*mut u8>();
                                                                                                        let l258 = *base
                                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<usize>();
                                                                                                        let len259 = l258;
                                                                                                        let bytes259 = _rt::Vec::from_raw_parts(
                                                                                                            l257.cast(),
                                                                                                            len259,
                                                                                                            len259,
                                                                                                        );
                                                                                                        _rt::string_lift(bytes259)
                                                                                                    };
                                                                                                    V260::String(e260)
                                                                                                }
                                                                                            };
                                                                                            super::super::super::golem::api::context::Attribute {
                                                                                                key: _rt::string_lift(bytes255),
                                                                                                value: v260,
                                                                                            }
                                                                                        };
                                                                                        result261.push(e261);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base261,
                                                                                        len261 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let l262 = i32::from(
                                                                                        *base
                                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    LocalSpanData {
                                                                                        span_id: _rt::string_lift(bytes242),
                                                                                        start: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                                            seconds: l243 as u64,
                                                                                            nanoseconds: l244 as u32,
                                                                                        },
                                                                                        parent: match l245 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l246 = *base
                                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<*mut u8>();
                                                                                                    let l247 = *base
                                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<usize>();
                                                                                                    let len248 = l247;
                                                                                                    let bytes248 = _rt::Vec::from_raw_parts(
                                                                                                        l246.cast(),
                                                                                                        len248,
                                                                                                        len248,
                                                                                                    );
                                                                                                    _rt::string_lift(bytes248)
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        linked_context: match l249 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l250 = *base
                                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i64>();
                                                                                                    l250 as u64
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        attributes: result261,
                                                                                        inherited: _rt::bool_lift(l262 as u8),
                                                                                    }
                                                                                };
                                                                                SpanData::LocalSpan(e266)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e266 = {
                                                                                    let l263 = *base.add(8).cast::<*mut u8>();
                                                                                    let l264 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len265 = l264;
                                                                                    let bytes265 = _rt::Vec::from_raw_parts(
                                                                                        l263.cast(),
                                                                                        len265,
                                                                                        len265,
                                                                                    );
                                                                                    ExternalSpanData {
                                                                                        span_id: _rt::string_lift(bytes265),
                                                                                    }
                                                                                };
                                                                                SpanData::ExternalSpan(e266)
                                                                            }
                                                                        };
                                                                        v266
                                                                    };
                                                                    result267.push(e267);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base267,
                                                                    len267 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                result267
                                                            };
                                                            result268.push(e268);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base268,
                                                            len268 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l167 as u64,
                                                                nanoseconds: l168 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes171),
                                                            request: result222,
                                                            idempotency_key: _rt::string_lift(bytes225),
                                                            trace_id: _rt::string_lift(bytes228),
                                                            trace_states: result234,
                                                            invocation_context: result268,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e583)
                                                }
                                                3 => {
                                                    let e583 = {
                                                        let l269 = *base.add(8).cast::<i64>();
                                                        let l270 = *base.add(16).cast::<i32>();
                                                        let l271 = i32::from(*base.add(24).cast::<u8>());
                                                        let l320 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l269 as u64,
                                                                nanoseconds: l270 as u32,
                                                            },
                                                            response: match l271 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l272 = *base
                                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l273 = *base
                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base319 = l272;
                                                                        let len319 = l273;
                                                                        let mut result319 = _rt::Vec::with_capacity(len319);
                                                                        for i in 0..len319 {
                                                                            let base = base319
                                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e319 = {
                                                                                let l274 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::golem::rpc::types::WitNode as V318;
                                                                                let v318 = match l274 {
                                                                                    0 => {
                                                                                        let e318 = {
                                                                                            let l275 = *base.add(8).cast::<*mut u8>();
                                                                                            let l276 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len277 = l276;
                                                                                            _rt::Vec::from_raw_parts(l275.cast(), len277, len277)
                                                                                        };
                                                                                        V318::RecordValue(e318)
                                                                                    }
                                                                                    1 => {
                                                                                        let e318 = {
                                                                                            let l278 = *base.add(8).cast::<i32>();
                                                                                            let l279 = i32::from(*base.add(12).cast::<u8>());
                                                                                            (
                                                                                                l278 as u32,
                                                                                                match l279 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l280 = *base.add(16).cast::<i32>();
                                                                                                            l280
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            )
                                                                                        };
                                                                                        V318::VariantValue(e318)
                                                                                    }
                                                                                    2 => {
                                                                                        let e318 = {
                                                                                            let l281 = *base.add(8).cast::<i32>();
                                                                                            l281 as u32
                                                                                        };
                                                                                        V318::EnumValue(e318)
                                                                                    }
                                                                                    3 => {
                                                                                        let e318 = {
                                                                                            let l282 = *base.add(8).cast::<*mut u8>();
                                                                                            let l283 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base285 = l282;
                                                                                            let len285 = l283;
                                                                                            let mut result285 = _rt::Vec::with_capacity(len285);
                                                                                            for i in 0..len285 {
                                                                                                let base = base285.add(i * 1);
                                                                                                let e285 = {
                                                                                                    let l284 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    _rt::bool_lift(l284 as u8)
                                                                                                };
                                                                                                result285.push(e285);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base285, len285 * 1, 1);
                                                                                            result285
                                                                                        };
                                                                                        V318::FlagsValue(e318)
                                                                                    }
                                                                                    4 => {
                                                                                        let e318 = {
                                                                                            let l286 = *base.add(8).cast::<*mut u8>();
                                                                                            let l287 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len288 = l287;
                                                                                            _rt::Vec::from_raw_parts(l286.cast(), len288, len288)
                                                                                        };
                                                                                        V318::TupleValue(e318)
                                                                                    }
                                                                                    5 => {
                                                                                        let e318 = {
                                                                                            let l289 = *base.add(8).cast::<*mut u8>();
                                                                                            let l290 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len291 = l290;
                                                                                            _rt::Vec::from_raw_parts(l289.cast(), len291, len291)
                                                                                        };
                                                                                        V318::ListValue(e318)
                                                                                    }
                                                                                    6 => {
                                                                                        let e318 = {
                                                                                            let l292 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l292 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l293 = *base.add(12).cast::<i32>();
                                                                                                        l293
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V318::OptionValue(e318)
                                                                                    }
                                                                                    7 => {
                                                                                        let e318 = {
                                                                                            let l294 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l294 {
                                                                                                0 => {
                                                                                                    let e = {
                                                                                                        let l295 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l295 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l296 = *base.add(16).cast::<i32>();
                                                                                                                    l296
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Ok(e)
                                                                                                }
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l297 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l297 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l298 = *base.add(16).cast::<i32>();
                                                                                                                    l298
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Err(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V318::ResultValue(e318)
                                                                                    }
                                                                                    8 => {
                                                                                        let e318 = {
                                                                                            let l299 = i32::from(*base.add(8).cast::<u8>());
                                                                                            l299 as u8
                                                                                        };
                                                                                        V318::PrimU8(e318)
                                                                                    }
                                                                                    9 => {
                                                                                        let e318 = {
                                                                                            let l300 = i32::from(*base.add(8).cast::<u16>());
                                                                                            l300 as u16
                                                                                        };
                                                                                        V318::PrimU16(e318)
                                                                                    }
                                                                                    10 => {
                                                                                        let e318 = {
                                                                                            let l301 = *base.add(8).cast::<i32>();
                                                                                            l301 as u32
                                                                                        };
                                                                                        V318::PrimU32(e318)
                                                                                    }
                                                                                    11 => {
                                                                                        let e318 = {
                                                                                            let l302 = *base.add(8).cast::<i64>();
                                                                                            l302 as u64
                                                                                        };
                                                                                        V318::PrimU64(e318)
                                                                                    }
                                                                                    12 => {
                                                                                        let e318 = {
                                                                                            let l303 = i32::from(*base.add(8).cast::<i8>());
                                                                                            l303 as i8
                                                                                        };
                                                                                        V318::PrimS8(e318)
                                                                                    }
                                                                                    13 => {
                                                                                        let e318 = {
                                                                                            let l304 = i32::from(*base.add(8).cast::<i16>());
                                                                                            l304 as i16
                                                                                        };
                                                                                        V318::PrimS16(e318)
                                                                                    }
                                                                                    14 => {
                                                                                        let e318 = {
                                                                                            let l305 = *base.add(8).cast::<i32>();
                                                                                            l305
                                                                                        };
                                                                                        V318::PrimS32(e318)
                                                                                    }
                                                                                    15 => {
                                                                                        let e318 = {
                                                                                            let l306 = *base.add(8).cast::<i64>();
                                                                                            l306
                                                                                        };
                                                                                        V318::PrimS64(e318)
                                                                                    }
                                                                                    16 => {
                                                                                        let e318 = {
                                                                                            let l307 = *base.add(8).cast::<f32>();
                                                                                            l307
                                                                                        };
                                                                                        V318::PrimFloat32(e318)
                                                                                    }
                                                                                    17 => {
                                                                                        let e318 = {
                                                                                            let l308 = *base.add(8).cast::<f64>();
                                                                                            l308
                                                                                        };
                                                                                        V318::PrimFloat64(e318)
                                                                                    }
                                                                                    18 => {
                                                                                        let e318 = {
                                                                                            let l309 = *base.add(8).cast::<i32>();
                                                                                            _rt::char_lift(l309 as u32)
                                                                                        };
                                                                                        V318::PrimChar(e318)
                                                                                    }
                                                                                    19 => {
                                                                                        let e318 = {
                                                                                            let l310 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l310 as u8)
                                                                                        };
                                                                                        V318::PrimBool(e318)
                                                                                    }
                                                                                    20 => {
                                                                                        let e318 = {
                                                                                            let l311 = *base.add(8).cast::<*mut u8>();
                                                                                            let l312 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len313 = l312;
                                                                                            let bytes313 = _rt::Vec::from_raw_parts(
                                                                                                l311.cast(),
                                                                                                len313,
                                                                                                len313,
                                                                                            );
                                                                                            _rt::string_lift(bytes313)
                                                                                        };
                                                                                        V318::PrimString(e318)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                        let e318 = {
                                                                                            let l314 = *base.add(8).cast::<*mut u8>();
                                                                                            let l315 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len316 = l315;
                                                                                            let bytes316 = _rt::Vec::from_raw_parts(
                                                                                                l314.cast(),
                                                                                                len316,
                                                                                                len316,
                                                                                            );
                                                                                            let l317 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            (
                                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                                    value: _rt::string_lift(bytes316),
                                                                                                },
                                                                                                l317 as u64,
                                                                                            )
                                                                                        };
                                                                                        V318::Handle(e318)
                                                                                    }
                                                                                };
                                                                                v318
                                                                            };
                                                                            result319.push(e319);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base319,
                                                                            len319 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        super::super::super::golem::rpc::types::WitValue {
                                                                            nodes: result319,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            consumed_fuel: l320,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e583)
                                                }
                                                4 => {
                                                    let e583 = {
                                                        let l321 = *base.add(8).cast::<i64>();
                                                        let l322 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l321 as u64,
                                                            nanoseconds: l322 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e583)
                                                }
                                                5 => {
                                                    let e583 = {
                                                        let l323 = *base.add(8).cast::<i64>();
                                                        let l324 = *base.add(16).cast::<i32>();
                                                        let l325 = *base.add(24).cast::<*mut u8>();
                                                        let l326 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len327 = l326;
                                                        let bytes327 = _rt::Vec::from_raw_parts(
                                                            l325.cast(),
                                                            len327,
                                                            len327,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l323 as u64,
                                                                nanoseconds: l324 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes327),
                                                        }
                                                    };
                                                    OplogEntry::Error(e583)
                                                }
                                                6 => {
                                                    let e583 = {
                                                        let l328 = *base.add(8).cast::<i64>();
                                                        let l329 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l328 as u64,
                                                            nanoseconds: l329 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e583)
                                                }
                                                7 => {
                                                    let e583 = {
                                                        let l330 = *base.add(8).cast::<i64>();
                                                        let l331 = *base.add(16).cast::<i32>();
                                                        let l332 = *base.add(24).cast::<i64>();
                                                        let l333 = *base.add(32).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l330 as u64,
                                                                nanoseconds: l331 as u32,
                                                            },
                                                            start: l332 as u64,
                                                            end: l333 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e583)
                                                }
                                                8 => {
                                                    let e583 = {
                                                        let l334 = *base.add(8).cast::<i64>();
                                                        let l335 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l334 as u64,
                                                            nanoseconds: l335 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e583)
                                                }
                                                9 => {
                                                    let e583 = {
                                                        let l336 = *base.add(8).cast::<i64>();
                                                        let l337 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l336 as u64,
                                                            nanoseconds: l337 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e583)
                                                }
                                                10 => {
                                                    let e583 = {
                                                        let l338 = *base.add(8).cast::<i64>();
                                                        let l339 = *base.add(16).cast::<i32>();
                                                        let l340 = *base.add(24).cast::<i32>();
                                                        let l341 = *base.add(32).cast::<i64>();
                                                        let l342 = *base.add(40).cast::<i64>();
                                                        let l343 = *base.add(48).cast::<f64>();
                                                        let l344 = i32::from(*base.add(56).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l338 as u64,
                                                                nanoseconds: l339 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l340 as u32,
                                                                min_delay: l341 as u64,
                                                                max_delay: l342 as u64,
                                                                multiplier: l343,
                                                                max_jitter_factor: match l344 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l345 = *base.add(64).cast::<f64>();
                                                                            l345
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e583)
                                                }
                                                11 => {
                                                    let e583 = {
                                                        let l346 = *base.add(8).cast::<i64>();
                                                        let l347 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l346 as u64,
                                                            nanoseconds: l347 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e583)
                                                }
                                                12 => {
                                                    let e583 = {
                                                        let l348 = *base.add(8).cast::<i64>();
                                                        let l349 = *base.add(16).cast::<i32>();
                                                        let l350 = *base.add(24).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l348 as u64,
                                                                nanoseconds: l349 as u32,
                                                            },
                                                            begin_index: l350 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e583)
                                                }
                                                13 => {
                                                    let e583 = {
                                                        let l351 = *base.add(8).cast::<i64>();
                                                        let l352 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l351 as u64,
                                                            nanoseconds: l352 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e583)
                                                }
                                                14 => {
                                                    let e583 = {
                                                        let l353 = *base.add(8).cast::<i64>();
                                                        let l354 = *base.add(16).cast::<i32>();
                                                        let l355 = *base.add(24).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l353 as u64,
                                                                nanoseconds: l354 as u32,
                                                            },
                                                            begin_index: l355 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e583)
                                                }
                                                15 => {
                                                    let e583 = {
                                                        let l356 = *base.add(8).cast::<i64>();
                                                        let l357 = *base.add(16).cast::<i32>();
                                                        let l358 = i32::from(*base.add(24).cast::<u8>());
                                                        let v418 = match l358 {
                                                            0 => {
                                                                let e418 = {
                                                                    let l359 = *base.add(32).cast::<*mut u8>();
                                                                    let l360 = *base
                                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len361 = l360;
                                                                    let bytes361 = _rt::Vec::from_raw_parts(
                                                                        l359.cast(),
                                                                        len361,
                                                                        len361,
                                                                    );
                                                                    let l362 = *base
                                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l363 = *base
                                                                        .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len364 = l363;
                                                                    let bytes364 = _rt::Vec::from_raw_parts(
                                                                        l362.cast(),
                                                                        len364,
                                                                        len364,
                                                                    );
                                                                    let l365 = i32::from(
                                                                        *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes361),
                                                                        function_name: _rt::string_lift(bytes364),
                                                                        input: match l365 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l366 = *base
                                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l367 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base416 = l366;
                                                                                    let len416 = l367;
                                                                                    let mut result416 = _rt::Vec::with_capacity(len416);
                                                                                    for i in 0..len416 {
                                                                                        let base = base416
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e416 = {
                                                                                            let l368 = *base.add(0).cast::<*mut u8>();
                                                                                            let l369 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base415 = l368;
                                                                                            let len415 = l369;
                                                                                            let mut result415 = _rt::Vec::with_capacity(len415);
                                                                                            for i in 0..len415 {
                                                                                                let base = base415
                                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                                let e415 = {
                                                                                                    let l370 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V414;
                                                                                                    let v414 = match l370 {
                                                                                                        0 => {
                                                                                                            let e414 = {
                                                                                                                let l371 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l372 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len373 = l372;
                                                                                                                _rt::Vec::from_raw_parts(l371.cast(), len373, len373)
                                                                                                            };
                                                                                                            V414::RecordValue(e414)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e414 = {
                                                                                                                let l374 = *base.add(8).cast::<i32>();
                                                                                                                let l375 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l374 as u32,
                                                                                                                    match l375 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l376 = *base.add(16).cast::<i32>();
                                                                                                                                l376
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V414::VariantValue(e414)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e414 = {
                                                                                                                let l377 = *base.add(8).cast::<i32>();
                                                                                                                l377 as u32
                                                                                                            };
                                                                                                            V414::EnumValue(e414)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e414 = {
                                                                                                                let l378 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l379 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let base381 = l378;
                                                                                                                let len381 = l379;
                                                                                                                let mut result381 = _rt::Vec::with_capacity(len381);
                                                                                                                for i in 0..len381 {
                                                                                                                    let base = base381.add(i * 1);
                                                                                                                    let e381 = {
                                                                                                                        let l380 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l380 as u8)
                                                                                                                    };
                                                                                                                    result381.push(e381);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base381, len381 * 1, 1);
                                                                                                                result381
                                                                                                            };
                                                                                                            V414::FlagsValue(e414)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e414 = {
                                                                                                                let l382 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l383 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len384 = l383;
                                                                                                                _rt::Vec::from_raw_parts(l382.cast(), len384, len384)
                                                                                                            };
                                                                                                            V414::TupleValue(e414)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e414 = {
                                                                                                                let l385 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l386 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len387 = l386;
                                                                                                                _rt::Vec::from_raw_parts(l385.cast(), len387, len387)
                                                                                                            };
                                                                                                            V414::ListValue(e414)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e414 = {
                                                                                                                let l388 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l388 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l389 = *base.add(12).cast::<i32>();
                                                                                                                            l389
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V414::OptionValue(e414)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e414 = {
                                                                                                                let l390 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l390 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l391 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l391 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l392 = *base.add(16).cast::<i32>();
                                                                                                                                        l392
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l393 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l393 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l394 = *base.add(16).cast::<i32>();
                                                                                                                                        l394
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V414::ResultValue(e414)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e414 = {
                                                                                                                let l395 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l395 as u8
                                                                                                            };
                                                                                                            V414::PrimU8(e414)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e414 = {
                                                                                                                let l396 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l396 as u16
                                                                                                            };
                                                                                                            V414::PrimU16(e414)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e414 = {
                                                                                                                let l397 = *base.add(8).cast::<i32>();
                                                                                                                l397 as u32
                                                                                                            };
                                                                                                            V414::PrimU32(e414)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e414 = {
                                                                                                                let l398 = *base.add(8).cast::<i64>();
                                                                                                                l398 as u64
                                                                                                            };
                                                                                                            V414::PrimU64(e414)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e414 = {
                                                                                                                let l399 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l399 as i8
                                                                                                            };
                                                                                                            V414::PrimS8(e414)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e414 = {
                                                                                                                let l400 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l400 as i16
                                                                                                            };
                                                                                                            V414::PrimS16(e414)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e414 = {
                                                                                                                let l401 = *base.add(8).cast::<i32>();
                                                                                                                l401
                                                                                                            };
                                                                                                            V414::PrimS32(e414)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e414 = {
                                                                                                                let l402 = *base.add(8).cast::<i64>();
                                                                                                                l402
                                                                                                            };
                                                                                                            V414::PrimS64(e414)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e414 = {
                                                                                                                let l403 = *base.add(8).cast::<f32>();
                                                                                                                l403
                                                                                                            };
                                                                                                            V414::PrimFloat32(e414)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e414 = {
                                                                                                                let l404 = *base.add(8).cast::<f64>();
                                                                                                                l404
                                                                                                            };
                                                                                                            V414::PrimFloat64(e414)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e414 = {
                                                                                                                let l405 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l405 as u32)
                                                                                                            };
                                                                                                            V414::PrimChar(e414)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e414 = {
                                                                                                                let l406 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l406 as u8)
                                                                                                            };
                                                                                                            V414::PrimBool(e414)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e414 = {
                                                                                                                let l407 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l408 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len409 = l408;
                                                                                                                let bytes409 = _rt::Vec::from_raw_parts(
                                                                                                                    l407.cast(),
                                                                                                                    len409,
                                                                                                                    len409,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes409)
                                                                                                            };
                                                                                                            V414::PrimString(e414)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e414 = {
                                                                                                                let l410 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l411 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len412 = l411;
                                                                                                                let bytes412 = _rt::Vec::from_raw_parts(
                                                                                                                    l410.cast(),
                                                                                                                    len412,
                                                                                                                    len412,
                                                                                                                );
                                                                                                                let l413 = *base
                                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes412),
                                                                                                                    },
                                                                                                                    l413 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V414::Handle(e414)
                                                                                                        }
                                                                                                    };
                                                                                                    v414
                                                                                                };
                                                                                                result415.push(e415);
                                                                                            }
                                                                                            _rt::cabi_dealloc(
                                                                                                base415,
                                                                                                len415 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                                8,
                                                                                            );
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result415,
                                                                                            }
                                                                                        };
                                                                                        result416.push(e416);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base416,
                                                                                        len416 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    result416
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                WorkerInvocation::ExportedFunction(e418)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e418 = {
                                                                    let l417 = *base.add(32).cast::<i64>();
                                                                    l417 as u64
                                                                };
                                                                WorkerInvocation::ManualUpdate(e418)
                                                            }
                                                        };
                                                        PendingWorkerInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l356 as u64,
                                                                nanoseconds: l357 as u32,
                                                            },
                                                            invocation: v418,
                                                        }
                                                    };
                                                    OplogEntry::PendingWorkerInvocation(e583)
                                                }
                                                16 => {
                                                    let e583 = {
                                                        let l419 = *base.add(8).cast::<i64>();
                                                        let l420 = *base.add(16).cast::<i32>();
                                                        let l421 = *base.add(24).cast::<i64>();
                                                        let l422 = i32::from(*base.add(32).cast::<u8>());
                                                        let v426 = match l422 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e426 = {
                                                                    let l423 = *base
                                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l424 = *base
                                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len425 = l424;
                                                                    _rt::Vec::from_raw_parts(l423.cast(), len425, len425)
                                                                };
                                                                UpdateDescription::SnapshotBased(e426)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l419 as u64,
                                                                nanoseconds: l420 as u32,
                                                            },
                                                            target_version: l421 as u64,
                                                            update_description: v426,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e583)
                                                }
                                                17 => {
                                                    let e583 = {
                                                        let l427 = *base.add(8).cast::<i64>();
                                                        let l428 = *base.add(16).cast::<i32>();
                                                        let l429 = *base.add(24).cast::<i64>();
                                                        let l430 = *base.add(32).cast::<i64>();
                                                        let l431 = *base.add(40).cast::<*mut u8>();
                                                        let l432 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base450 = l431;
                                                        let len450 = l432;
                                                        let mut result450 = _rt::Vec::with_capacity(len450);
                                                        for i in 0..len450 {
                                                            let base = base450
                                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                                            let e450 = {
                                                                let l433 = *base.add(0).cast::<i64>();
                                                                let l434 = *base.add(8).cast::<i64>();
                                                                let l435 = *base.add(16).cast::<*mut u8>();
                                                                let l436 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len437 = l436;
                                                                let bytes437 = _rt::Vec::from_raw_parts(
                                                                    l435.cast(),
                                                                    len437,
                                                                    len437,
                                                                );
                                                                let l438 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l439 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len440 = l439;
                                                                let bytes440 = _rt::Vec::from_raw_parts(
                                                                    l438.cast(),
                                                                    len440,
                                                                    len440,
                                                                );
                                                                let l441 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l442 = *base
                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base449 = l441;
                                                                let len449 = l442;
                                                                let mut result449 = _rt::Vec::with_capacity(len449);
                                                                for i in 0..len449 {
                                                                    let base = base449
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e449 = {
                                                                        let l443 = *base.add(0).cast::<*mut u8>();
                                                                        let l444 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len445 = l444;
                                                                        let bytes445 = _rt::Vec::from_raw_parts(
                                                                            l443.cast(),
                                                                            len445,
                                                                            len445,
                                                                        );
                                                                        let l446 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l447 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len448 = l447;
                                                                        let bytes448 = _rt::Vec::from_raw_parts(
                                                                            l446.cast(),
                                                                            len448,
                                                                            len448,
                                                                        );
                                                                        (_rt::string_lift(bytes445), _rt::string_lift(bytes448))
                                                                    };
                                                                    result449.push(e449);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base449,
                                                                    len449 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l433 as u64,
                                                                        low_bits: l434 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes437),
                                                                    version: _rt::string_lift(bytes440),
                                                                    parameters: result449,
                                                                }
                                                            };
                                                            result450.push(e450);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base450,
                                                            len450 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l427 as u64,
                                                                nanoseconds: l428 as u32,
                                                            },
                                                            target_version: l429 as u64,
                                                            new_component_size: l430 as u64,
                                                            new_active_plugins: result450,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e583)
                                                }
                                                18 => {
                                                    let e583 = {
                                                        let l451 = *base.add(8).cast::<i64>();
                                                        let l452 = *base.add(16).cast::<i32>();
                                                        let l453 = *base.add(24).cast::<i64>();
                                                        let l454 = i32::from(*base.add(32).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l451 as u64,
                                                                nanoseconds: l452 as u32,
                                                            },
                                                            target_version: l453 as u64,
                                                            details: match l454 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l455 = *base
                                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l456 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len457 = l456;
                                                                        let bytes457 = _rt::Vec::from_raw_parts(
                                                                            l455.cast(),
                                                                            len457,
                                                                            len457,
                                                                        );
                                                                        _rt::string_lift(bytes457)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e583)
                                                }
                                                19 => {
                                                    let e583 = {
                                                        let l458 = *base.add(8).cast::<i64>();
                                                        let l459 = *base.add(16).cast::<i32>();
                                                        let l460 = *base.add(24).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l458 as u64,
                                                                nanoseconds: l459 as u32,
                                                            },
                                                            delta: l460 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e583)
                                                }
                                                20 => {
                                                    let e583 = {
                                                        let l461 = *base.add(8).cast::<i64>();
                                                        let l462 = *base.add(16).cast::<i32>();
                                                        let l463 = *base.add(24).cast::<i64>();
                                                        let l464 = *base.add(32).cast::<*mut u8>();
                                                        let l465 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len466 = l465;
                                                        let bytes466 = _rt::Vec::from_raw_parts(
                                                            l464.cast(),
                                                            len466,
                                                            len466,
                                                        );
                                                        let l467 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l468 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len469 = l468;
                                                        let bytes469 = _rt::Vec::from_raw_parts(
                                                            l467.cast(),
                                                            len469,
                                                            len469,
                                                        );
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l461 as u64,
                                                                nanoseconds: l462 as u32,
                                                            },
                                                            resource_id: l463 as u64,
                                                            name: _rt::string_lift(bytes466),
                                                            owner: _rt::string_lift(bytes469),
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e583)
                                                }
                                                21 => {
                                                    let e583 = {
                                                        let l470 = *base.add(8).cast::<i64>();
                                                        let l471 = *base.add(16).cast::<i32>();
                                                        let l472 = *base.add(24).cast::<i64>();
                                                        let l473 = *base.add(32).cast::<*mut u8>();
                                                        let l474 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len475 = l474;
                                                        let bytes475 = _rt::Vec::from_raw_parts(
                                                            l473.cast(),
                                                            len475,
                                                            len475,
                                                        );
                                                        let l476 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l477 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len478 = l477;
                                                        let bytes478 = _rt::Vec::from_raw_parts(
                                                            l476.cast(),
                                                            len478,
                                                            len478,
                                                        );
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l470 as u64,
                                                                nanoseconds: l471 as u32,
                                                            },
                                                            resource_id: l472 as u64,
                                                            name: _rt::string_lift(bytes475),
                                                            owner: _rt::string_lift(bytes478),
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e583)
                                                }
                                                22 => {
                                                    let e583 = {
                                                        let l479 = *base.add(8).cast::<i64>();
                                                        let l480 = *base.add(16).cast::<i32>();
                                                        let l481 = i32::from(*base.add(24).cast::<u8>());
                                                        let l482 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l483 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len484 = l483;
                                                        let bytes484 = _rt::Vec::from_raw_parts(
                                                            l482.cast(),
                                                            len484,
                                                            len484,
                                                        );
                                                        let l485 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l486 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len487 = l486;
                                                        let bytes487 = _rt::Vec::from_raw_parts(
                                                            l485.cast(),
                                                            len487,
                                                            len487,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l479 as u64,
                                                                nanoseconds: l480 as u32,
                                                            },
                                                            level: LogLevel::_lift(l481 as u8),
                                                            context: _rt::string_lift(bytes484),
                                                            message: _rt::string_lift(bytes487),
                                                        }
                                                    };
                                                    OplogEntry::Log(e583)
                                                }
                                                23 => {
                                                    let e583 = {
                                                        let l488 = *base.add(8).cast::<i64>();
                                                        let l489 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l488 as u64,
                                                            nanoseconds: l489 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e583)
                                                }
                                                24 => {
                                                    let e583 = {
                                                        let l490 = *base.add(8).cast::<i64>();
                                                        let l491 = *base.add(16).cast::<i32>();
                                                        let l492 = *base.add(24).cast::<i64>();
                                                        let l493 = *base.add(32).cast::<i64>();
                                                        let l494 = *base.add(40).cast::<*mut u8>();
                                                        let l495 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len496 = l495;
                                                        let bytes496 = _rt::Vec::from_raw_parts(
                                                            l494.cast(),
                                                            len496,
                                                            len496,
                                                        );
                                                        let l497 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l498 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len499 = l498;
                                                        let bytes499 = _rt::Vec::from_raw_parts(
                                                            l497.cast(),
                                                            len499,
                                                            len499,
                                                        );
                                                        let l500 = *base
                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l501 = *base
                                                            .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base508 = l500;
                                                        let len508 = l501;
                                                        let mut result508 = _rt::Vec::with_capacity(len508);
                                                        for i in 0..len508 {
                                                            let base = base508
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e508 = {
                                                                let l502 = *base.add(0).cast::<*mut u8>();
                                                                let l503 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len504 = l503;
                                                                let bytes504 = _rt::Vec::from_raw_parts(
                                                                    l502.cast(),
                                                                    len504,
                                                                    len504,
                                                                );
                                                                let l505 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l506 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len507 = l506;
                                                                let bytes507 = _rt::Vec::from_raw_parts(
                                                                    l505.cast(),
                                                                    len507,
                                                                    len507,
                                                                );
                                                                (_rt::string_lift(bytes504), _rt::string_lift(bytes507))
                                                            };
                                                            result508.push(e508);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base508,
                                                            len508 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l490 as u64,
                                                                nanoseconds: l491 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l492 as u64,
                                                                    low_bits: l493 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes496),
                                                                version: _rt::string_lift(bytes499),
                                                                parameters: result508,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e583)
                                                }
                                                25 => {
                                                    let e583 = {
                                                        let l509 = *base.add(8).cast::<i64>();
                                                        let l510 = *base.add(16).cast::<i32>();
                                                        let l511 = *base.add(24).cast::<i64>();
                                                        let l512 = *base.add(32).cast::<i64>();
                                                        let l513 = *base.add(40).cast::<*mut u8>();
                                                        let l514 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len515 = l514;
                                                        let bytes515 = _rt::Vec::from_raw_parts(
                                                            l513.cast(),
                                                            len515,
                                                            len515,
                                                        );
                                                        let l516 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l517 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len518 = l517;
                                                        let bytes518 = _rt::Vec::from_raw_parts(
                                                            l516.cast(),
                                                            len518,
                                                            len518,
                                                        );
                                                        let l519 = *base
                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l520 = *base
                                                            .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base527 = l519;
                                                        let len527 = l520;
                                                        let mut result527 = _rt::Vec::with_capacity(len527);
                                                        for i in 0..len527 {
                                                            let base = base527
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e527 = {
                                                                let l521 = *base.add(0).cast::<*mut u8>();
                                                                let l522 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len523 = l522;
                                                                let bytes523 = _rt::Vec::from_raw_parts(
                                                                    l521.cast(),
                                                                    len523,
                                                                    len523,
                                                                );
                                                                let l524 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l525 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len526 = l525;
                                                                let bytes526 = _rt::Vec::from_raw_parts(
                                                                    l524.cast(),
                                                                    len526,
                                                                    len526,
                                                                );
                                                                (_rt::string_lift(bytes523), _rt::string_lift(bytes526))
                                                            };
                                                            result527.push(e527);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base527,
                                                            len527 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l509 as u64,
                                                                nanoseconds: l510 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l511 as u64,
                                                                    low_bits: l512 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes515),
                                                                version: _rt::string_lift(bytes518),
                                                                parameters: result527,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e583)
                                                }
                                                26 => {
                                                    let e583 = {
                                                        let l528 = *base.add(8).cast::<i64>();
                                                        let l529 = *base.add(16).cast::<i32>();
                                                        let l530 = *base.add(24).cast::<i64>();
                                                        let l531 = *base.add(32).cast::<i64>();
                                                        RevertParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l528 as u64,
                                                                nanoseconds: l529 as u32,
                                                            },
                                                            start: l530 as u64,
                                                            end: l531 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Revert(e583)
                                                }
                                                27 => {
                                                    let e583 = {
                                                        let l532 = *base.add(8).cast::<i64>();
                                                        let l533 = *base.add(16).cast::<i32>();
                                                        let l534 = *base.add(24).cast::<*mut u8>();
                                                        let l535 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len536 = l535;
                                                        let bytes536 = _rt::Vec::from_raw_parts(
                                                            l534.cast(),
                                                            len536,
                                                            len536,
                                                        );
                                                        CancelInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l532 as u64,
                                                                nanoseconds: l533 as u32,
                                                            },
                                                            idempotency_key: _rt::string_lift(bytes536),
                                                        }
                                                    };
                                                    OplogEntry::CancelInvocation(e583)
                                                }
                                                28 => {
                                                    let e583 = {
                                                        let l537 = *base.add(8).cast::<i64>();
                                                        let l538 = *base.add(16).cast::<i32>();
                                                        let l539 = *base.add(24).cast::<*mut u8>();
                                                        let l540 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len541 = l540;
                                                        let bytes541 = _rt::Vec::from_raw_parts(
                                                            l539.cast(),
                                                            len541,
                                                            len541,
                                                        );
                                                        let l542 = i32::from(
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l546 = i32::from(
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l550 = *base
                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l551 = *base
                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base560 = l550;
                                                        let len560 = l551;
                                                        let mut result560 = _rt::Vec::with_capacity(len560);
                                                        for i in 0..len560 {
                                                            let base = base560
                                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                            let e560 = {
                                                                let l552 = *base.add(0).cast::<*mut u8>();
                                                                let l553 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len554 = l553;
                                                                let bytes554 = _rt::Vec::from_raw_parts(
                                                                    l552.cast(),
                                                                    len554,
                                                                    len554,
                                                                );
                                                                let l555 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::api::context::AttributeValue as V559;
                                                                let v559 = match l555 {
                                                                    n => {
                                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                        let e559 = {
                                                                            let l556 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l557 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len558 = l557;
                                                                            let bytes558 = _rt::Vec::from_raw_parts(
                                                                                l556.cast(),
                                                                                len558,
                                                                                len558,
                                                                            );
                                                                            _rt::string_lift(bytes558)
                                                                        };
                                                                        V559::String(e559)
                                                                    }
                                                                };
                                                                super::super::super::golem::api::context::Attribute {
                                                                    key: _rt::string_lift(bytes554),
                                                                    value: v559,
                                                                }
                                                            };
                                                            result560.push(e560);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base560,
                                                            len560 * (5 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        StartSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l537 as u64,
                                                                nanoseconds: l538 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes541),
                                                            parent: match l542 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l543 = *base
                                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l544 = *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len545 = l544;
                                                                        let bytes545 = _rt::Vec::from_raw_parts(
                                                                            l543.cast(),
                                                                            len545,
                                                                            len545,
                                                                        );
                                                                        _rt::string_lift(bytes545)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            linked_context: match l546 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l547 = *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l548 = *base
                                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len549 = l548;
                                                                        let bytes549 = _rt::Vec::from_raw_parts(
                                                                            l547.cast(),
                                                                            len549,
                                                                            len549,
                                                                        );
                                                                        _rt::string_lift(bytes549)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            attributes: result560,
                                                        }
                                                    };
                                                    OplogEntry::StartSpan(e583)
                                                }
                                                29 => {
                                                    let e583 = {
                                                        let l561 = *base.add(8).cast::<i64>();
                                                        let l562 = *base.add(16).cast::<i32>();
                                                        let l563 = *base.add(24).cast::<*mut u8>();
                                                        let l564 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len565 = l564;
                                                        let bytes565 = _rt::Vec::from_raw_parts(
                                                            l563.cast(),
                                                            len565,
                                                            len565,
                                                        );
                                                        FinishSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l561 as u64,
                                                                nanoseconds: l562 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes565),
                                                        }
                                                    };
                                                    OplogEntry::FinishSpan(e583)
                                                }
                                                30 => {
                                                    let e583 = {
                                                        let l566 = *base.add(8).cast::<i64>();
                                                        let l567 = *base.add(16).cast::<i32>();
                                                        let l568 = *base.add(24).cast::<*mut u8>();
                                                        let l569 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len570 = l569;
                                                        let bytes570 = _rt::Vec::from_raw_parts(
                                                            l568.cast(),
                                                            len570,
                                                            len570,
                                                        );
                                                        let l571 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l572 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len573 = l572;
                                                        let bytes573 = _rt::Vec::from_raw_parts(
                                                            l571.cast(),
                                                            len573,
                                                            len573,
                                                        );
                                                        let l574 = i32::from(
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        use super::super::super::golem::api::context::AttributeValue as V578;
                                                        let v578 = match l574 {
                                                            n => {
                                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                let e578 = {
                                                                    let l575 = *base
                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l576 = *base
                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len577 = l576;
                                                                    let bytes577 = _rt::Vec::from_raw_parts(
                                                                        l575.cast(),
                                                                        len577,
                                                                        len577,
                                                                    );
                                                                    _rt::string_lift(bytes577)
                                                                };
                                                                V578::String(e578)
                                                            }
                                                        };
                                                        SetSpanAttributeParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l566 as u64,
                                                                nanoseconds: l567 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes570),
                                                            key: _rt::string_lift(bytes573),
                                                            value: v578,
                                                        }
                                                    };
                                                    OplogEntry::SetSpanAttribute(e583)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 31, "invalid enum discriminant");
                                                    let e583 = {
                                                        let l579 = *base.add(8).cast::<i64>();
                                                        let l580 = *base.add(16).cast::<i32>();
                                                        let l581 = i32::from(*base.add(24).cast::<u8>());
                                                        use super::super::super::golem::api::host::PersistenceLevel as V582;
                                                        let v582 = match l581 {
                                                            0 => V582::PersistNothing,
                                                            1 => V582::PersistRemoteSideEffects,
                                                            n => {
                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                V582::Smart
                                                            }
                                                        };
                                                        ChangePersistenceLevelParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l579 as u64,
                                                                nanoseconds: l580 as u32,
                                                            },
                                                            persistence_level: v582,
                                                        }
                                                    };
                                                    OplogEntry::ChangePersistenceLevel(e583)
                                                }
                                            };
                                            v583
                                        };
                                        result584.push(e584);
                                    }
                                    _rt::cabi_dealloc(
                                        base584,
                                        len584 * (104 + 12 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result584
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result585
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId, text: &str) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let vec4 = text;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]search-oplog"]
                            fn wit_import5(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import5(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                                ptr4.cast_mut(),
                                len4,
                            )
                        };
                        unsafe { SearchOplog::from_handle(ret as u32) }
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<(OplogIndex, OplogEntry)>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]search-oplog.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result586 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base585 = l3;
                                    let len585 = l4;
                                    let mut result585 = _rt::Vec::with_capacity(len585);
                                    for i in 0..len585 {
                                        let base = base585
                                            .add(i * (112 + 12 * ::core::mem::size_of::<*const u8>()));
                                        let e585 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = i32::from(*base.add(8).cast::<u8>());
                                            let v584 = match l6 {
                                                0 => {
                                                    let e584 = {
                                                        let l7 = *base.add(16).cast::<i64>();
                                                        let l8 = *base.add(24).cast::<i32>();
                                                        let l9 = *base.add(32).cast::<i64>();
                                                        let l10 = *base.add(40).cast::<i64>();
                                                        let l11 = *base.add(48).cast::<*mut u8>();
                                                        let l12 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len13 = l12;
                                                        let bytes13 = _rt::Vec::from_raw_parts(
                                                            l11.cast(),
                                                            len13,
                                                            len13,
                                                        );
                                                        let l14 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l15 = *base
                                                            .add(56 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l16 = *base
                                                            .add(56 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base20 = l15;
                                                        let len20 = l16;
                                                        let mut result20 = _rt::Vec::with_capacity(len20);
                                                        for i in 0..len20 {
                                                            let base = base20
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e20 = {
                                                                let l17 = *base.add(0).cast::<*mut u8>();
                                                                let l18 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len19 = l18;
                                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                                    l17.cast(),
                                                                    len19,
                                                                    len19,
                                                                );
                                                                _rt::string_lift(bytes19)
                                                            };
                                                            result20.push(e20);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base20,
                                                            len20 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l21 = *base
                                                            .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l22 = *base
                                                            .add(56 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l21;
                                                        let len29 = l22;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e29 = {
                                                                let l23 = *base.add(0).cast::<*mut u8>();
                                                                let l24 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len25 = l24;
                                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                                    l23.cast(),
                                                                    len25,
                                                                    len25,
                                                                );
                                                                let l26 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l27 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len28 = l27;
                                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                                    l26.cast(),
                                                                    len28,
                                                                    len28,
                                                                );
                                                                (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base29,
                                                            len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l30 = *base
                                                            .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        let l33 = *base
                                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l34 = *base
                                                            .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l35 = i32::from(
                                                            *base
                                                                .add(72 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l41 = *base
                                                            .add(96 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l42 = *base
                                                            .add(104 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l43 = *base
                                                            .add(112 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l44 = *base
                                                            .add(112 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base62 = l43;
                                                        let len62 = l44;
                                                        let mut result62 = _rt::Vec::with_capacity(len62);
                                                        for i in 0..len62 {
                                                            let base = base62
                                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                                            let e62 = {
                                                                let l45 = *base.add(0).cast::<i64>();
                                                                let l46 = *base.add(8).cast::<i64>();
                                                                let l47 = *base.add(16).cast::<*mut u8>();
                                                                let l48 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len49 = l48;
                                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                                    l47.cast(),
                                                                    len49,
                                                                    len49,
                                                                );
                                                                let l50 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l51 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len52 = l51;
                                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                                    l50.cast(),
                                                                    len52,
                                                                    len52,
                                                                );
                                                                let l53 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l54 = *base
                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base61 = l53;
                                                                let len61 = l54;
                                                                let mut result61 = _rt::Vec::with_capacity(len61);
                                                                for i in 0..len61 {
                                                                    let base = base61
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e61 = {
                                                                        let l55 = *base.add(0).cast::<*mut u8>();
                                                                        let l56 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len57 = l56;
                                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                                            l55.cast(),
                                                                            len57,
                                                                            len57,
                                                                        );
                                                                        let l58 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l59 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len60 = l59;
                                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                                            l58.cast(),
                                                                            len60,
                                                                            len60,
                                                                        );
                                                                        (_rt::string_lift(bytes57), _rt::string_lift(bytes60))
                                                                    };
                                                                    result61.push(e61);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base61,
                                                                    len61 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l45 as u64,
                                                                        low_bits: l46 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes49),
                                                                    version: _rt::string_lift(bytes52),
                                                                    parameters: result61,
                                                                }
                                                            };
                                                            result62.push(e62);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base62,
                                                            len62 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l7 as u64,
                                                                nanoseconds: l8 as u32,
                                                            },
                                                            worker_id: super::super::super::golem::rpc::types::WorkerId {
                                                                component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l9 as u64,
                                                                        low_bits: l10 as u64,
                                                                    },
                                                                },
                                                                worker_name: _rt::string_lift(bytes13),
                                                            },
                                                            component_version: l14 as u64,
                                                            args: result20,
                                                            env: result29,
                                                            created_by: super::super::super::golem::api::host::AccountId {
                                                                value: _rt::string_lift(bytes32),
                                                            },
                                                            project_id: super::super::super::golem::api::host::ProjectId {
                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l33 as u64,
                                                                    low_bits: l34 as u64,
                                                                },
                                                            },
                                                            parent: match l35 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l36 = *base
                                                                            .add(80 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l37 = *base
                                                                            .add(88 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l38 = *base
                                                                            .add(96 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l39 = *base
                                                                            .add(96 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len40 = l39;
                                                                        let bytes40 = _rt::Vec::from_raw_parts(
                                                                            l38.cast(),
                                                                            len40,
                                                                            len40,
                                                                        );
                                                                        super::super::super::golem::rpc::types::WorkerId {
                                                                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                                    high_bits: l36 as u64,
                                                                                    low_bits: l37 as u64,
                                                                                },
                                                                            },
                                                                            worker_name: _rt::string_lift(bytes40),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l41 as u64,
                                                            initial_total_linear_memory_size: l42 as u64,
                                                            initial_active_plugins: result62,
                                                        }
                                                    };
                                                    OplogEntry::Create(e584)
                                                }
                                                1 => {
                                                    let e584 = {
                                                        let l63 = *base.add(16).cast::<i64>();
                                                        let l64 = *base.add(24).cast::<i32>();
                                                        let l65 = *base.add(32).cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        let l68 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l69 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base115 = l68;
                                                        let len115 = l69;
                                                        let mut result115 = _rt::Vec::with_capacity(len115);
                                                        for i in 0..len115 {
                                                            let base = base115
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e115 = {
                                                                let l70 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V114;
                                                                let v114 = match l70 {
                                                                    0 => {
                                                                        let e114 = {
                                                                            let l71 = *base.add(8).cast::<*mut u8>();
                                                                            let l72 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len73 = l72;
                                                                            _rt::Vec::from_raw_parts(l71.cast(), len73, len73)
                                                                        };
                                                                        V114::RecordValue(e114)
                                                                    }
                                                                    1 => {
                                                                        let e114 = {
                                                                            let l74 = *base.add(8).cast::<i32>();
                                                                            let l75 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l74 as u32,
                                                                                match l75 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l76 = *base.add(16).cast::<i32>();
                                                                                            l76
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V114::VariantValue(e114)
                                                                    }
                                                                    2 => {
                                                                        let e114 = {
                                                                            let l77 = *base.add(8).cast::<i32>();
                                                                            l77 as u32
                                                                        };
                                                                        V114::EnumValue(e114)
                                                                    }
                                                                    3 => {
                                                                        let e114 = {
                                                                            let l78 = *base.add(8).cast::<*mut u8>();
                                                                            let l79 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base81 = l78;
                                                                            let len81 = l79;
                                                                            let mut result81 = _rt::Vec::with_capacity(len81);
                                                                            for i in 0..len81 {
                                                                                let base = base81.add(i * 1);
                                                                                let e81 = {
                                                                                    let l80 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l80 as u8)
                                                                                };
                                                                                result81.push(e81);
                                                                            }
                                                                            _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                                            result81
                                                                        };
                                                                        V114::FlagsValue(e114)
                                                                    }
                                                                    4 => {
                                                                        let e114 = {
                                                                            let l82 = *base.add(8).cast::<*mut u8>();
                                                                            let l83 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len84 = l83;
                                                                            _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                        };
                                                                        V114::TupleValue(e114)
                                                                    }
                                                                    5 => {
                                                                        let e114 = {
                                                                            let l85 = *base.add(8).cast::<*mut u8>();
                                                                            let l86 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len87 = l86;
                                                                            _rt::Vec::from_raw_parts(l85.cast(), len87, len87)
                                                                        };
                                                                        V114::ListValue(e114)
                                                                    }
                                                                    6 => {
                                                                        let e114 = {
                                                                            let l88 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l88 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l89 = *base.add(12).cast::<i32>();
                                                                                        l89
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V114::OptionValue(e114)
                                                                    }
                                                                    7 => {
                                                                        let e114 = {
                                                                            let l90 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l90 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l91 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l91 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l92 = *base.add(16).cast::<i32>();
                                                                                                    l92
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l93 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l93 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l94 = *base.add(16).cast::<i32>();
                                                                                                    l94
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V114::ResultValue(e114)
                                                                    }
                                                                    8 => {
                                                                        let e114 = {
                                                                            let l95 = i32::from(*base.add(8).cast::<u8>());
                                                                            l95 as u8
                                                                        };
                                                                        V114::PrimU8(e114)
                                                                    }
                                                                    9 => {
                                                                        let e114 = {
                                                                            let l96 = i32::from(*base.add(8).cast::<u16>());
                                                                            l96 as u16
                                                                        };
                                                                        V114::PrimU16(e114)
                                                                    }
                                                                    10 => {
                                                                        let e114 = {
                                                                            let l97 = *base.add(8).cast::<i32>();
                                                                            l97 as u32
                                                                        };
                                                                        V114::PrimU32(e114)
                                                                    }
                                                                    11 => {
                                                                        let e114 = {
                                                                            let l98 = *base.add(8).cast::<i64>();
                                                                            l98 as u64
                                                                        };
                                                                        V114::PrimU64(e114)
                                                                    }
                                                                    12 => {
                                                                        let e114 = {
                                                                            let l99 = i32::from(*base.add(8).cast::<i8>());
                                                                            l99 as i8
                                                                        };
                                                                        V114::PrimS8(e114)
                                                                    }
                                                                    13 => {
                                                                        let e114 = {
                                                                            let l100 = i32::from(*base.add(8).cast::<i16>());
                                                                            l100 as i16
                                                                        };
                                                                        V114::PrimS16(e114)
                                                                    }
                                                                    14 => {
                                                                        let e114 = {
                                                                            let l101 = *base.add(8).cast::<i32>();
                                                                            l101
                                                                        };
                                                                        V114::PrimS32(e114)
                                                                    }
                                                                    15 => {
                                                                        let e114 = {
                                                                            let l102 = *base.add(8).cast::<i64>();
                                                                            l102
                                                                        };
                                                                        V114::PrimS64(e114)
                                                                    }
                                                                    16 => {
                                                                        let e114 = {
                                                                            let l103 = *base.add(8).cast::<f32>();
                                                                            l103
                                                                        };
                                                                        V114::PrimFloat32(e114)
                                                                    }
                                                                    17 => {
                                                                        let e114 = {
                                                                            let l104 = *base.add(8).cast::<f64>();
                                                                            l104
                                                                        };
                                                                        V114::PrimFloat64(e114)
                                                                    }
                                                                    18 => {
                                                                        let e114 = {
                                                                            let l105 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l105 as u32)
                                                                        };
                                                                        V114::PrimChar(e114)
                                                                    }
                                                                    19 => {
                                                                        let e114 = {
                                                                            let l106 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l106 as u8)
                                                                        };
                                                                        V114::PrimBool(e114)
                                                                    }
                                                                    20 => {
                                                                        let e114 = {
                                                                            let l107 = *base.add(8).cast::<*mut u8>();
                                                                            let l108 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len109 = l108;
                                                                            let bytes109 = _rt::Vec::from_raw_parts(
                                                                                l107.cast(),
                                                                                len109,
                                                                                len109,
                                                                            );
                                                                            _rt::string_lift(bytes109)
                                                                        };
                                                                        V114::PrimString(e114)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e114 = {
                                                                            let l110 = *base.add(8).cast::<*mut u8>();
                                                                            let l111 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len112 = l111;
                                                                            let bytes112 = _rt::Vec::from_raw_parts(
                                                                                l110.cast(),
                                                                                len112,
                                                                                len112,
                                                                            );
                                                                            let l113 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes112),
                                                                                },
                                                                                l113 as u64,
                                                                            )
                                                                        };
                                                                        V114::Handle(e114)
                                                                    }
                                                                };
                                                                v114
                                                            };
                                                            result115.push(e115);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base115,
                                                            len115 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l116 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l117 = *base
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base163 = l116;
                                                        let len163 = l117;
                                                        let mut result163 = _rt::Vec::with_capacity(len163);
                                                        for i in 0..len163 {
                                                            let base = base163
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e163 = {
                                                                let l118 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V162;
                                                                let v162 = match l118 {
                                                                    0 => {
                                                                        let e162 = {
                                                                            let l119 = *base.add(8).cast::<*mut u8>();
                                                                            let l120 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len121 = l120;
                                                                            _rt::Vec::from_raw_parts(l119.cast(), len121, len121)
                                                                        };
                                                                        V162::RecordValue(e162)
                                                                    }
                                                                    1 => {
                                                                        let e162 = {
                                                                            let l122 = *base.add(8).cast::<i32>();
                                                                            let l123 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l122 as u32,
                                                                                match l123 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l124 = *base.add(16).cast::<i32>();
                                                                                            l124
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V162::VariantValue(e162)
                                                                    }
                                                                    2 => {
                                                                        let e162 = {
                                                                            let l125 = *base.add(8).cast::<i32>();
                                                                            l125 as u32
                                                                        };
                                                                        V162::EnumValue(e162)
                                                                    }
                                                                    3 => {
                                                                        let e162 = {
                                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                                            let l127 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base129 = l126;
                                                                            let len129 = l127;
                                                                            let mut result129 = _rt::Vec::with_capacity(len129);
                                                                            for i in 0..len129 {
                                                                                let base = base129.add(i * 1);
                                                                                let e129 = {
                                                                                    let l128 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l128 as u8)
                                                                                };
                                                                                result129.push(e129);
                                                                            }
                                                                            _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                                            result129
                                                                        };
                                                                        V162::FlagsValue(e162)
                                                                    }
                                                                    4 => {
                                                                        let e162 = {
                                                                            let l130 = *base.add(8).cast::<*mut u8>();
                                                                            let l131 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len132 = l131;
                                                                            _rt::Vec::from_raw_parts(l130.cast(), len132, len132)
                                                                        };
                                                                        V162::TupleValue(e162)
                                                                    }
                                                                    5 => {
                                                                        let e162 = {
                                                                            let l133 = *base.add(8).cast::<*mut u8>();
                                                                            let l134 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len135 = l134;
                                                                            _rt::Vec::from_raw_parts(l133.cast(), len135, len135)
                                                                        };
                                                                        V162::ListValue(e162)
                                                                    }
                                                                    6 => {
                                                                        let e162 = {
                                                                            let l136 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l136 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l137 = *base.add(12).cast::<i32>();
                                                                                        l137
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V162::OptionValue(e162)
                                                                    }
                                                                    7 => {
                                                                        let e162 = {
                                                                            let l138 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l138 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l139 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l139 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l140 = *base.add(16).cast::<i32>();
                                                                                                    l140
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l141 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l141 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l142 = *base.add(16).cast::<i32>();
                                                                                                    l142
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V162::ResultValue(e162)
                                                                    }
                                                                    8 => {
                                                                        let e162 = {
                                                                            let l143 = i32::from(*base.add(8).cast::<u8>());
                                                                            l143 as u8
                                                                        };
                                                                        V162::PrimU8(e162)
                                                                    }
                                                                    9 => {
                                                                        let e162 = {
                                                                            let l144 = i32::from(*base.add(8).cast::<u16>());
                                                                            l144 as u16
                                                                        };
                                                                        V162::PrimU16(e162)
                                                                    }
                                                                    10 => {
                                                                        let e162 = {
                                                                            let l145 = *base.add(8).cast::<i32>();
                                                                            l145 as u32
                                                                        };
                                                                        V162::PrimU32(e162)
                                                                    }
                                                                    11 => {
                                                                        let e162 = {
                                                                            let l146 = *base.add(8).cast::<i64>();
                                                                            l146 as u64
                                                                        };
                                                                        V162::PrimU64(e162)
                                                                    }
                                                                    12 => {
                                                                        let e162 = {
                                                                            let l147 = i32::from(*base.add(8).cast::<i8>());
                                                                            l147 as i8
                                                                        };
                                                                        V162::PrimS8(e162)
                                                                    }
                                                                    13 => {
                                                                        let e162 = {
                                                                            let l148 = i32::from(*base.add(8).cast::<i16>());
                                                                            l148 as i16
                                                                        };
                                                                        V162::PrimS16(e162)
                                                                    }
                                                                    14 => {
                                                                        let e162 = {
                                                                            let l149 = *base.add(8).cast::<i32>();
                                                                            l149
                                                                        };
                                                                        V162::PrimS32(e162)
                                                                    }
                                                                    15 => {
                                                                        let e162 = {
                                                                            let l150 = *base.add(8).cast::<i64>();
                                                                            l150
                                                                        };
                                                                        V162::PrimS64(e162)
                                                                    }
                                                                    16 => {
                                                                        let e162 = {
                                                                            let l151 = *base.add(8).cast::<f32>();
                                                                            l151
                                                                        };
                                                                        V162::PrimFloat32(e162)
                                                                    }
                                                                    17 => {
                                                                        let e162 = {
                                                                            let l152 = *base.add(8).cast::<f64>();
                                                                            l152
                                                                        };
                                                                        V162::PrimFloat64(e162)
                                                                    }
                                                                    18 => {
                                                                        let e162 = {
                                                                            let l153 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l153 as u32)
                                                                        };
                                                                        V162::PrimChar(e162)
                                                                    }
                                                                    19 => {
                                                                        let e162 = {
                                                                            let l154 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l154 as u8)
                                                                        };
                                                                        V162::PrimBool(e162)
                                                                    }
                                                                    20 => {
                                                                        let e162 = {
                                                                            let l155 = *base.add(8).cast::<*mut u8>();
                                                                            let l156 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len157 = l156;
                                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                                l155.cast(),
                                                                                len157,
                                                                                len157,
                                                                            );
                                                                            _rt::string_lift(bytes157)
                                                                        };
                                                                        V162::PrimString(e162)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e162 = {
                                                                            let l158 = *base.add(8).cast::<*mut u8>();
                                                                            let l159 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len160 = l159;
                                                                            let bytes160 = _rt::Vec::from_raw_parts(
                                                                                l158.cast(),
                                                                                len160,
                                                                                len160,
                                                                            );
                                                                            let l161 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes160),
                                                                                },
                                                                                l161 as u64,
                                                                            )
                                                                        };
                                                                        V162::Handle(e162)
                                                                    }
                                                                };
                                                                v162
                                                            };
                                                            result163.push(e163);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base163,
                                                            len163 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l164 = i32::from(
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let v167 = match l164 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            n => {
                                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                                let e167 = {
                                                                    let l165 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l165 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l166 = *base
                                                                                    .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l166 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e167)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l63 as u64,
                                                                nanoseconds: l64 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes67),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result115,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result163,
                                                            },
                                                            wrapped_function_type: v167,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e584)
                                                }
                                                2 => {
                                                    let e584 = {
                                                        let l168 = *base.add(16).cast::<i64>();
                                                        let l169 = *base.add(24).cast::<i32>();
                                                        let l170 = *base.add(32).cast::<*mut u8>();
                                                        let l171 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len172 = l171;
                                                        let bytes172 = _rt::Vec::from_raw_parts(
                                                            l170.cast(),
                                                            len172,
                                                            len172,
                                                        );
                                                        let l173 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l174 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base223 = l173;
                                                        let len223 = l174;
                                                        let mut result223 = _rt::Vec::with_capacity(len223);
                                                        for i in 0..len223 {
                                                            let base = base223
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e223 = {
                                                                let l175 = *base.add(0).cast::<*mut u8>();
                                                                let l176 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base222 = l175;
                                                                let len222 = l176;
                                                                let mut result222 = _rt::Vec::with_capacity(len222);
                                                                for i in 0..len222 {
                                                                    let base = base222
                                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                    let e222 = {
                                                                        let l177 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V221;
                                                                        let v221 = match l177 {
                                                                            0 => {
                                                                                let e221 = {
                                                                                    let l178 = *base.add(8).cast::<*mut u8>();
                                                                                    let l179 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len180 = l179;
                                                                                    _rt::Vec::from_raw_parts(l178.cast(), len180, len180)
                                                                                };
                                                                                V221::RecordValue(e221)
                                                                            }
                                                                            1 => {
                                                                                let e221 = {
                                                                                    let l181 = *base.add(8).cast::<i32>();
                                                                                    let l182 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l181 as u32,
                                                                                        match l182 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l183 = *base.add(16).cast::<i32>();
                                                                                                    l183
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V221::VariantValue(e221)
                                                                            }
                                                                            2 => {
                                                                                let e221 = {
                                                                                    let l184 = *base.add(8).cast::<i32>();
                                                                                    l184 as u32
                                                                                };
                                                                                V221::EnumValue(e221)
                                                                            }
                                                                            3 => {
                                                                                let e221 = {
                                                                                    let l185 = *base.add(8).cast::<*mut u8>();
                                                                                    let l186 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base188 = l185;
                                                                                    let len188 = l186;
                                                                                    let mut result188 = _rt::Vec::with_capacity(len188);
                                                                                    for i in 0..len188 {
                                                                                        let base = base188.add(i * 1);
                                                                                        let e188 = {
                                                                                            let l187 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l187 as u8)
                                                                                        };
                                                                                        result188.push(e188);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base188, len188 * 1, 1);
                                                                                    result188
                                                                                };
                                                                                V221::FlagsValue(e221)
                                                                            }
                                                                            4 => {
                                                                                let e221 = {
                                                                                    let l189 = *base.add(8).cast::<*mut u8>();
                                                                                    let l190 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len191 = l190;
                                                                                    _rt::Vec::from_raw_parts(l189.cast(), len191, len191)
                                                                                };
                                                                                V221::TupleValue(e221)
                                                                            }
                                                                            5 => {
                                                                                let e221 = {
                                                                                    let l192 = *base.add(8).cast::<*mut u8>();
                                                                                    let l193 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len194 = l193;
                                                                                    _rt::Vec::from_raw_parts(l192.cast(), len194, len194)
                                                                                };
                                                                                V221::ListValue(e221)
                                                                            }
                                                                            6 => {
                                                                                let e221 = {
                                                                                    let l195 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l195 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l196 = *base.add(12).cast::<i32>();
                                                                                                l196
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V221::OptionValue(e221)
                                                                            }
                                                                            7 => {
                                                                                let e221 = {
                                                                                    let l197 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l197 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l198 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l198 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l199 = *base.add(16).cast::<i32>();
                                                                                                            l199
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l200 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l200 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l201 = *base.add(16).cast::<i32>();
                                                                                                            l201
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V221::ResultValue(e221)
                                                                            }
                                                                            8 => {
                                                                                let e221 = {
                                                                                    let l202 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l202 as u8
                                                                                };
                                                                                V221::PrimU8(e221)
                                                                            }
                                                                            9 => {
                                                                                let e221 = {
                                                                                    let l203 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l203 as u16
                                                                                };
                                                                                V221::PrimU16(e221)
                                                                            }
                                                                            10 => {
                                                                                let e221 = {
                                                                                    let l204 = *base.add(8).cast::<i32>();
                                                                                    l204 as u32
                                                                                };
                                                                                V221::PrimU32(e221)
                                                                            }
                                                                            11 => {
                                                                                let e221 = {
                                                                                    let l205 = *base.add(8).cast::<i64>();
                                                                                    l205 as u64
                                                                                };
                                                                                V221::PrimU64(e221)
                                                                            }
                                                                            12 => {
                                                                                let e221 = {
                                                                                    let l206 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l206 as i8
                                                                                };
                                                                                V221::PrimS8(e221)
                                                                            }
                                                                            13 => {
                                                                                let e221 = {
                                                                                    let l207 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l207 as i16
                                                                                };
                                                                                V221::PrimS16(e221)
                                                                            }
                                                                            14 => {
                                                                                let e221 = {
                                                                                    let l208 = *base.add(8).cast::<i32>();
                                                                                    l208
                                                                                };
                                                                                V221::PrimS32(e221)
                                                                            }
                                                                            15 => {
                                                                                let e221 = {
                                                                                    let l209 = *base.add(8).cast::<i64>();
                                                                                    l209
                                                                                };
                                                                                V221::PrimS64(e221)
                                                                            }
                                                                            16 => {
                                                                                let e221 = {
                                                                                    let l210 = *base.add(8).cast::<f32>();
                                                                                    l210
                                                                                };
                                                                                V221::PrimFloat32(e221)
                                                                            }
                                                                            17 => {
                                                                                let e221 = {
                                                                                    let l211 = *base.add(8).cast::<f64>();
                                                                                    l211
                                                                                };
                                                                                V221::PrimFloat64(e221)
                                                                            }
                                                                            18 => {
                                                                                let e221 = {
                                                                                    let l212 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l212 as u32)
                                                                                };
                                                                                V221::PrimChar(e221)
                                                                            }
                                                                            19 => {
                                                                                let e221 = {
                                                                                    let l213 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l213 as u8)
                                                                                };
                                                                                V221::PrimBool(e221)
                                                                            }
                                                                            20 => {
                                                                                let e221 = {
                                                                                    let l214 = *base.add(8).cast::<*mut u8>();
                                                                                    let l215 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len216 = l215;
                                                                                    let bytes216 = _rt::Vec::from_raw_parts(
                                                                                        l214.cast(),
                                                                                        len216,
                                                                                        len216,
                                                                                    );
                                                                                    _rt::string_lift(bytes216)
                                                                                };
                                                                                V221::PrimString(e221)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e221 = {
                                                                                    let l217 = *base.add(8).cast::<*mut u8>();
                                                                                    let l218 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len219 = l218;
                                                                                    let bytes219 = _rt::Vec::from_raw_parts(
                                                                                        l217.cast(),
                                                                                        len219,
                                                                                        len219,
                                                                                    );
                                                                                    let l220 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes219),
                                                                                        },
                                                                                        l220 as u64,
                                                                                    )
                                                                                };
                                                                                V221::Handle(e221)
                                                                            }
                                                                        };
                                                                        v221
                                                                    };
                                                                    result222.push(e222);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base222,
                                                                    len222 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result222,
                                                                }
                                                            };
                                                            result223.push(e223);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base223,
                                                            len223 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l224 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l225 = *base
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len226 = l225;
                                                        let bytes226 = _rt::Vec::from_raw_parts(
                                                            l224.cast(),
                                                            len226,
                                                            len226,
                                                        );
                                                        let l227 = *base
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l228 = *base
                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len229 = l228;
                                                        let bytes229 = _rt::Vec::from_raw_parts(
                                                            l227.cast(),
                                                            len229,
                                                            len229,
                                                        );
                                                        let l230 = *base
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l231 = *base
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base235 = l230;
                                                        let len235 = l231;
                                                        let mut result235 = _rt::Vec::with_capacity(len235);
                                                        for i in 0..len235 {
                                                            let base = base235
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e235 = {
                                                                let l232 = *base.add(0).cast::<*mut u8>();
                                                                let l233 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len234 = l233;
                                                                let bytes234 = _rt::Vec::from_raw_parts(
                                                                    l232.cast(),
                                                                    len234,
                                                                    len234,
                                                                );
                                                                _rt::string_lift(bytes234)
                                                            };
                                                            result235.push(e235);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base235,
                                                            len235 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l236 = *base
                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l237 = *base
                                                            .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base269 = l236;
                                                        let len269 = l237;
                                                        let mut result269 = _rt::Vec::with_capacity(len269);
                                                        for i in 0..len269 {
                                                            let base = base269
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e269 = {
                                                                let l238 = *base.add(0).cast::<*mut u8>();
                                                                let l239 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base268 = l238;
                                                                let len268 = l239;
                                                                let mut result268 = _rt::Vec::with_capacity(len268);
                                                                for i in 0..len268 {
                                                                    let base = base268
                                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                    let e268 = {
                                                                        let l240 = i32::from(*base.add(0).cast::<u8>());
                                                                        let v267 = match l240 {
                                                                            0 => {
                                                                                let e267 = {
                                                                                    let l241 = *base.add(8).cast::<*mut u8>();
                                                                                    let l242 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len243 = l242;
                                                                                    let bytes243 = _rt::Vec::from_raw_parts(
                                                                                        l241.cast(),
                                                                                        len243,
                                                                                        len243,
                                                                                    );
                                                                                    let l244 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    let l245 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>();
                                                                                    let l246 = i32::from(
                                                                                        *base
                                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l250 = i32::from(
                                                                                        *base
                                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l252 = *base
                                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l253 = *base
                                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base262 = l252;
                                                                                    let len262 = l253;
                                                                                    let mut result262 = _rt::Vec::with_capacity(len262);
                                                                                    for i in 0..len262 {
                                                                                        let base = base262
                                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e262 = {
                                                                                            let l254 = *base.add(0).cast::<*mut u8>();
                                                                                            let l255 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len256 = l255;
                                                                                            let bytes256 = _rt::Vec::from_raw_parts(
                                                                                                l254.cast(),
                                                                                                len256,
                                                                                                len256,
                                                                                            );
                                                                                            let l257 = i32::from(
                                                                                                *base
                                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            use super::super::super::golem::api::context::AttributeValue as V261;
                                                                                            let v261 = match l257 {
                                                                                                n => {
                                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                                    let e261 = {
                                                                                                        let l258 = *base
                                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<*mut u8>();
                                                                                                        let l259 = *base
                                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<usize>();
                                                                                                        let len260 = l259;
                                                                                                        let bytes260 = _rt::Vec::from_raw_parts(
                                                                                                            l258.cast(),
                                                                                                            len260,
                                                                                                            len260,
                                                                                                        );
                                                                                                        _rt::string_lift(bytes260)
                                                                                                    };
                                                                                                    V261::String(e261)
                                                                                                }
                                                                                            };
                                                                                            super::super::super::golem::api::context::Attribute {
                                                                                                key: _rt::string_lift(bytes256),
                                                                                                value: v261,
                                                                                            }
                                                                                        };
                                                                                        result262.push(e262);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base262,
                                                                                        len262 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let l263 = i32::from(
                                                                                        *base
                                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    LocalSpanData {
                                                                                        span_id: _rt::string_lift(bytes243),
                                                                                        start: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                                            seconds: l244 as u64,
                                                                                            nanoseconds: l245 as u32,
                                                                                        },
                                                                                        parent: match l246 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l247 = *base
                                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<*mut u8>();
                                                                                                    let l248 = *base
                                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<usize>();
                                                                                                    let len249 = l248;
                                                                                                    let bytes249 = _rt::Vec::from_raw_parts(
                                                                                                        l247.cast(),
                                                                                                        len249,
                                                                                                        len249,
                                                                                                    );
                                                                                                    _rt::string_lift(bytes249)
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        linked_context: match l250 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l251 = *base
                                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i64>();
                                                                                                    l251 as u64
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        attributes: result262,
                                                                                        inherited: _rt::bool_lift(l263 as u8),
                                                                                    }
                                                                                };
                                                                                SpanData::LocalSpan(e267)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e267 = {
                                                                                    let l264 = *base.add(8).cast::<*mut u8>();
                                                                                    let l265 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len266 = l265;
                                                                                    let bytes266 = _rt::Vec::from_raw_parts(
                                                                                        l264.cast(),
                                                                                        len266,
                                                                                        len266,
                                                                                    );
                                                                                    ExternalSpanData {
                                                                                        span_id: _rt::string_lift(bytes266),
                                                                                    }
                                                                                };
                                                                                SpanData::ExternalSpan(e267)
                                                                            }
                                                                        };
                                                                        v267
                                                                    };
                                                                    result268.push(e268);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base268,
                                                                    len268 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                result268
                                                            };
                                                            result269.push(e269);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base269,
                                                            len269 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l168 as u64,
                                                                nanoseconds: l169 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes172),
                                                            request: result223,
                                                            idempotency_key: _rt::string_lift(bytes226),
                                                            trace_id: _rt::string_lift(bytes229),
                                                            trace_states: result235,
                                                            invocation_context: result269,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e584)
                                                }
                                                3 => {
                                                    let e584 = {
                                                        let l270 = *base.add(16).cast::<i64>();
                                                        let l271 = *base.add(24).cast::<i32>();
                                                        let l272 = i32::from(*base.add(32).cast::<u8>());
                                                        let l321 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l270 as u64,
                                                                nanoseconds: l271 as u32,
                                                            },
                                                            response: match l272 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l273 = *base
                                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l274 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base320 = l273;
                                                                        let len320 = l274;
                                                                        let mut result320 = _rt::Vec::with_capacity(len320);
                                                                        for i in 0..len320 {
                                                                            let base = base320
                                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e320 = {
                                                                                let l275 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::golem::rpc::types::WitNode as V319;
                                                                                let v319 = match l275 {
                                                                                    0 => {
                                                                                        let e319 = {
                                                                                            let l276 = *base.add(8).cast::<*mut u8>();
                                                                                            let l277 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len278 = l277;
                                                                                            _rt::Vec::from_raw_parts(l276.cast(), len278, len278)
                                                                                        };
                                                                                        V319::RecordValue(e319)
                                                                                    }
                                                                                    1 => {
                                                                                        let e319 = {
                                                                                            let l279 = *base.add(8).cast::<i32>();
                                                                                            let l280 = i32::from(*base.add(12).cast::<u8>());
                                                                                            (
                                                                                                l279 as u32,
                                                                                                match l280 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l281 = *base.add(16).cast::<i32>();
                                                                                                            l281
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            )
                                                                                        };
                                                                                        V319::VariantValue(e319)
                                                                                    }
                                                                                    2 => {
                                                                                        let e319 = {
                                                                                            let l282 = *base.add(8).cast::<i32>();
                                                                                            l282 as u32
                                                                                        };
                                                                                        V319::EnumValue(e319)
                                                                                    }
                                                                                    3 => {
                                                                                        let e319 = {
                                                                                            let l283 = *base.add(8).cast::<*mut u8>();
                                                                                            let l284 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base286 = l283;
                                                                                            let len286 = l284;
                                                                                            let mut result286 = _rt::Vec::with_capacity(len286);
                                                                                            for i in 0..len286 {
                                                                                                let base = base286.add(i * 1);
                                                                                                let e286 = {
                                                                                                    let l285 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    _rt::bool_lift(l285 as u8)
                                                                                                };
                                                                                                result286.push(e286);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base286, len286 * 1, 1);
                                                                                            result286
                                                                                        };
                                                                                        V319::FlagsValue(e319)
                                                                                    }
                                                                                    4 => {
                                                                                        let e319 = {
                                                                                            let l287 = *base.add(8).cast::<*mut u8>();
                                                                                            let l288 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len289 = l288;
                                                                                            _rt::Vec::from_raw_parts(l287.cast(), len289, len289)
                                                                                        };
                                                                                        V319::TupleValue(e319)
                                                                                    }
                                                                                    5 => {
                                                                                        let e319 = {
                                                                                            let l290 = *base.add(8).cast::<*mut u8>();
                                                                                            let l291 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len292 = l291;
                                                                                            _rt::Vec::from_raw_parts(l290.cast(), len292, len292)
                                                                                        };
                                                                                        V319::ListValue(e319)
                                                                                    }
                                                                                    6 => {
                                                                                        let e319 = {
                                                                                            let l293 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l293 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l294 = *base.add(12).cast::<i32>();
                                                                                                        l294
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V319::OptionValue(e319)
                                                                                    }
                                                                                    7 => {
                                                                                        let e319 = {
                                                                                            let l295 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l295 {
                                                                                                0 => {
                                                                                                    let e = {
                                                                                                        let l296 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l296 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l297 = *base.add(16).cast::<i32>();
                                                                                                                    l297
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Ok(e)
                                                                                                }
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l298 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l298 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l299 = *base.add(16).cast::<i32>();
                                                                                                                    l299
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Err(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V319::ResultValue(e319)
                                                                                    }
                                                                                    8 => {
                                                                                        let e319 = {
                                                                                            let l300 = i32::from(*base.add(8).cast::<u8>());
                                                                                            l300 as u8
                                                                                        };
                                                                                        V319::PrimU8(e319)
                                                                                    }
                                                                                    9 => {
                                                                                        let e319 = {
                                                                                            let l301 = i32::from(*base.add(8).cast::<u16>());
                                                                                            l301 as u16
                                                                                        };
                                                                                        V319::PrimU16(e319)
                                                                                    }
                                                                                    10 => {
                                                                                        let e319 = {
                                                                                            let l302 = *base.add(8).cast::<i32>();
                                                                                            l302 as u32
                                                                                        };
                                                                                        V319::PrimU32(e319)
                                                                                    }
                                                                                    11 => {
                                                                                        let e319 = {
                                                                                            let l303 = *base.add(8).cast::<i64>();
                                                                                            l303 as u64
                                                                                        };
                                                                                        V319::PrimU64(e319)
                                                                                    }
                                                                                    12 => {
                                                                                        let e319 = {
                                                                                            let l304 = i32::from(*base.add(8).cast::<i8>());
                                                                                            l304 as i8
                                                                                        };
                                                                                        V319::PrimS8(e319)
                                                                                    }
                                                                                    13 => {
                                                                                        let e319 = {
                                                                                            let l305 = i32::from(*base.add(8).cast::<i16>());
                                                                                            l305 as i16
                                                                                        };
                                                                                        V319::PrimS16(e319)
                                                                                    }
                                                                                    14 => {
                                                                                        let e319 = {
                                                                                            let l306 = *base.add(8).cast::<i32>();
                                                                                            l306
                                                                                        };
                                                                                        V319::PrimS32(e319)
                                                                                    }
                                                                                    15 => {
                                                                                        let e319 = {
                                                                                            let l307 = *base.add(8).cast::<i64>();
                                                                                            l307
                                                                                        };
                                                                                        V319::PrimS64(e319)
                                                                                    }
                                                                                    16 => {
                                                                                        let e319 = {
                                                                                            let l308 = *base.add(8).cast::<f32>();
                                                                                            l308
                                                                                        };
                                                                                        V319::PrimFloat32(e319)
                                                                                    }
                                                                                    17 => {
                                                                                        let e319 = {
                                                                                            let l309 = *base.add(8).cast::<f64>();
                                                                                            l309
                                                                                        };
                                                                                        V319::PrimFloat64(e319)
                                                                                    }
                                                                                    18 => {
                                                                                        let e319 = {
                                                                                            let l310 = *base.add(8).cast::<i32>();
                                                                                            _rt::char_lift(l310 as u32)
                                                                                        };
                                                                                        V319::PrimChar(e319)
                                                                                    }
                                                                                    19 => {
                                                                                        let e319 = {
                                                                                            let l311 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l311 as u8)
                                                                                        };
                                                                                        V319::PrimBool(e319)
                                                                                    }
                                                                                    20 => {
                                                                                        let e319 = {
                                                                                            let l312 = *base.add(8).cast::<*mut u8>();
                                                                                            let l313 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len314 = l313;
                                                                                            let bytes314 = _rt::Vec::from_raw_parts(
                                                                                                l312.cast(),
                                                                                                len314,
                                                                                                len314,
                                                                                            );
                                                                                            _rt::string_lift(bytes314)
                                                                                        };
                                                                                        V319::PrimString(e319)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                        let e319 = {
                                                                                            let l315 = *base.add(8).cast::<*mut u8>();
                                                                                            let l316 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len317 = l316;
                                                                                            let bytes317 = _rt::Vec::from_raw_parts(
                                                                                                l315.cast(),
                                                                                                len317,
                                                                                                len317,
                                                                                            );
                                                                                            let l318 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            (
                                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                                    value: _rt::string_lift(bytes317),
                                                                                                },
                                                                                                l318 as u64,
                                                                                            )
                                                                                        };
                                                                                        V319::Handle(e319)
                                                                                    }
                                                                                };
                                                                                v319
                                                                            };
                                                                            result320.push(e320);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base320,
                                                                            len320 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        super::super::super::golem::rpc::types::WitValue {
                                                                            nodes: result320,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            consumed_fuel: l321,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e584)
                                                }
                                                4 => {
                                                    let e584 = {
                                                        let l322 = *base.add(16).cast::<i64>();
                                                        let l323 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l322 as u64,
                                                            nanoseconds: l323 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e584)
                                                }
                                                5 => {
                                                    let e584 = {
                                                        let l324 = *base.add(16).cast::<i64>();
                                                        let l325 = *base.add(24).cast::<i32>();
                                                        let l326 = *base.add(32).cast::<*mut u8>();
                                                        let l327 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len328 = l327;
                                                        let bytes328 = _rt::Vec::from_raw_parts(
                                                            l326.cast(),
                                                            len328,
                                                            len328,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l324 as u64,
                                                                nanoseconds: l325 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes328),
                                                        }
                                                    };
                                                    OplogEntry::Error(e584)
                                                }
                                                6 => {
                                                    let e584 = {
                                                        let l329 = *base.add(16).cast::<i64>();
                                                        let l330 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l329 as u64,
                                                            nanoseconds: l330 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e584)
                                                }
                                                7 => {
                                                    let e584 = {
                                                        let l331 = *base.add(16).cast::<i64>();
                                                        let l332 = *base.add(24).cast::<i32>();
                                                        let l333 = *base.add(32).cast::<i64>();
                                                        let l334 = *base.add(40).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l331 as u64,
                                                                nanoseconds: l332 as u32,
                                                            },
                                                            start: l333 as u64,
                                                            end: l334 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e584)
                                                }
                                                8 => {
                                                    let e584 = {
                                                        let l335 = *base.add(16).cast::<i64>();
                                                        let l336 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l335 as u64,
                                                            nanoseconds: l336 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e584)
                                                }
                                                9 => {
                                                    let e584 = {
                                                        let l337 = *base.add(16).cast::<i64>();
                                                        let l338 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l337 as u64,
                                                            nanoseconds: l338 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e584)
                                                }
                                                10 => {
                                                    let e584 = {
                                                        let l339 = *base.add(16).cast::<i64>();
                                                        let l340 = *base.add(24).cast::<i32>();
                                                        let l341 = *base.add(32).cast::<i32>();
                                                        let l342 = *base.add(40).cast::<i64>();
                                                        let l343 = *base.add(48).cast::<i64>();
                                                        let l344 = *base.add(56).cast::<f64>();
                                                        let l345 = i32::from(*base.add(64).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l339 as u64,
                                                                nanoseconds: l340 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l341 as u32,
                                                                min_delay: l342 as u64,
                                                                max_delay: l343 as u64,
                                                                multiplier: l344,
                                                                max_jitter_factor: match l345 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l346 = *base.add(72).cast::<f64>();
                                                                            l346
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e584)
                                                }
                                                11 => {
                                                    let e584 = {
                                                        let l347 = *base.add(16).cast::<i64>();
                                                        let l348 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l347 as u64,
                                                            nanoseconds: l348 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e584)
                                                }
                                                12 => {
                                                    let e584 = {
                                                        let l349 = *base.add(16).cast::<i64>();
                                                        let l350 = *base.add(24).cast::<i32>();
                                                        let l351 = *base.add(32).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l349 as u64,
                                                                nanoseconds: l350 as u32,
                                                            },
                                                            begin_index: l351 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e584)
                                                }
                                                13 => {
                                                    let e584 = {
                                                        let l352 = *base.add(16).cast::<i64>();
                                                        let l353 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l352 as u64,
                                                            nanoseconds: l353 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e584)
                                                }
                                                14 => {
                                                    let e584 = {
                                                        let l354 = *base.add(16).cast::<i64>();
                                                        let l355 = *base.add(24).cast::<i32>();
                                                        let l356 = *base.add(32).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l354 as u64,
                                                                nanoseconds: l355 as u32,
                                                            },
                                                            begin_index: l356 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e584)
                                                }
                                                15 => {
                                                    let e584 = {
                                                        let l357 = *base.add(16).cast::<i64>();
                                                        let l358 = *base.add(24).cast::<i32>();
                                                        let l359 = i32::from(*base.add(32).cast::<u8>());
                                                        let v419 = match l359 {
                                                            0 => {
                                                                let e419 = {
                                                                    let l360 = *base.add(40).cast::<*mut u8>();
                                                                    let l361 = *base
                                                                        .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len362 = l361;
                                                                    let bytes362 = _rt::Vec::from_raw_parts(
                                                                        l360.cast(),
                                                                        len362,
                                                                        len362,
                                                                    );
                                                                    let l363 = *base
                                                                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l364 = *base
                                                                        .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len365 = l364;
                                                                    let bytes365 = _rt::Vec::from_raw_parts(
                                                                        l363.cast(),
                                                                        len365,
                                                                        len365,
                                                                    );
                                                                    let l366 = i32::from(
                                                                        *base
                                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes362),
                                                                        function_name: _rt::string_lift(bytes365),
                                                                        input: match l366 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l367 = *base
                                                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l368 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base417 = l367;
                                                                                    let len417 = l368;
                                                                                    let mut result417 = _rt::Vec::with_capacity(len417);
                                                                                    for i in 0..len417 {
                                                                                        let base = base417
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e417 = {
                                                                                            let l369 = *base.add(0).cast::<*mut u8>();
                                                                                            let l370 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base416 = l369;
                                                                                            let len416 = l370;
                                                                                            let mut result416 = _rt::Vec::with_capacity(len416);
                                                                                            for i in 0..len416 {
                                                                                                let base = base416
                                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                                let e416 = {
                                                                                                    let l371 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V415;
                                                                                                    let v415 = match l371 {
                                                                                                        0 => {
                                                                                                            let e415 = {
                                                                                                                let l372 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l373 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len374 = l373;
                                                                                                                _rt::Vec::from_raw_parts(l372.cast(), len374, len374)
                                                                                                            };
                                                                                                            V415::RecordValue(e415)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e415 = {
                                                                                                                let l375 = *base.add(8).cast::<i32>();
                                                                                                                let l376 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l375 as u32,
                                                                                                                    match l376 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l377 = *base.add(16).cast::<i32>();
                                                                                                                                l377
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V415::VariantValue(e415)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e415 = {
                                                                                                                let l378 = *base.add(8).cast::<i32>();
                                                                                                                l378 as u32
                                                                                                            };
                                                                                                            V415::EnumValue(e415)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e415 = {
                                                                                                                let l379 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l380 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let base382 = l379;
                                                                                                                let len382 = l380;
                                                                                                                let mut result382 = _rt::Vec::with_capacity(len382);
                                                                                                                for i in 0..len382 {
                                                                                                                    let base = base382.add(i * 1);
                                                                                                                    let e382 = {
                                                                                                                        let l381 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l381 as u8)
                                                                                                                    };
                                                                                                                    result382.push(e382);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base382, len382 * 1, 1);
                                                                                                                result382
                                                                                                            };
                                                                                                            V415::FlagsValue(e415)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e415 = {
                                                                                                                let l383 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l384 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len385 = l384;
                                                                                                                _rt::Vec::from_raw_parts(l383.cast(), len385, len385)
                                                                                                            };
                                                                                                            V415::TupleValue(e415)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e415 = {
                                                                                                                let l386 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l387 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len388 = l387;
                                                                                                                _rt::Vec::from_raw_parts(l386.cast(), len388, len388)
                                                                                                            };
                                                                                                            V415::ListValue(e415)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e415 = {
                                                                                                                let l389 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l389 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l390 = *base.add(12).cast::<i32>();
                                                                                                                            l390
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V415::OptionValue(e415)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e415 = {
                                                                                                                let l391 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l391 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l392 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l392 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l393 = *base.add(16).cast::<i32>();
                                                                                                                                        l393
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l394 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l394 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l395 = *base.add(16).cast::<i32>();
                                                                                                                                        l395
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V415::ResultValue(e415)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e415 = {
                                                                                                                let l396 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l396 as u8
                                                                                                            };
                                                                                                            V415::PrimU8(e415)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e415 = {
                                                                                                                let l397 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l397 as u16
                                                                                                            };
                                                                                                            V415::PrimU16(e415)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e415 = {
                                                                                                                let l398 = *base.add(8).cast::<i32>();
                                                                                                                l398 as u32
                                                                                                            };
                                                                                                            V415::PrimU32(e415)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e415 = {
                                                                                                                let l399 = *base.add(8).cast::<i64>();
                                                                                                                l399 as u64
                                                                                                            };
                                                                                                            V415::PrimU64(e415)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e415 = {
                                                                                                                let l400 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l400 as i8
                                                                                                            };
                                                                                                            V415::PrimS8(e415)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e415 = {
                                                                                                                let l401 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l401 as i16
                                                                                                            };
                                                                                                            V415::PrimS16(e415)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e415 = {
                                                                                                                let l402 = *base.add(8).cast::<i32>();
                                                                                                                l402
                                                                                                            };
                                                                                                            V415::PrimS32(e415)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e415 = {
                                                                                                                let l403 = *base.add(8).cast::<i64>();
                                                                                                                l403
                                                                                                            };
                                                                                                            V415::PrimS64(e415)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e415 = {
                                                                                                                let l404 = *base.add(8).cast::<f32>();
                                                                                                                l404
                                                                                                            };
                                                                                                            V415::PrimFloat32(e415)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e415 = {
                                                                                                                let l405 = *base.add(8).cast::<f64>();
                                                                                                                l405
                                                                                                            };
                                                                                                            V415::PrimFloat64(e415)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e415 = {
                                                                                                                let l406 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l406 as u32)
                                                                                                            };
                                                                                                            V415::PrimChar(e415)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e415 = {
                                                                                                                let l407 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l407 as u8)
                                                                                                            };
                                                                                                            V415::PrimBool(e415)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e415 = {
                                                                                                                let l408 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l409 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len410 = l409;
                                                                                                                let bytes410 = _rt::Vec::from_raw_parts(
                                                                                                                    l408.cast(),
                                                                                                                    len410,
                                                                                                                    len410,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes410)
                                                                                                            };
                                                                                                            V415::PrimString(e415)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e415 = {
                                                                                                                let l411 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l412 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len413 = l412;
                                                                                                                let bytes413 = _rt::Vec::from_raw_parts(
                                                                                                                    l411.cast(),
                                                                                                                    len413,
                                                                                                                    len413,
                                                                                                                );
                                                                                                                let l414 = *base
                                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes413),
                                                                                                                    },
                                                                                                                    l414 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V415::Handle(e415)
                                                                                                        }
                                                                                                    };
                                                                                                    v415
                                                                                                };
                                                                                                result416.push(e416);
                                                                                            }
                                                                                            _rt::cabi_dealloc(
                                                                                                base416,
                                                                                                len416 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                                8,
                                                                                            );
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result416,
                                                                                            }
                                                                                        };
                                                                                        result417.push(e417);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base417,
                                                                                        len417 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    result417
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                WorkerInvocation::ExportedFunction(e419)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e419 = {
                                                                    let l418 = *base.add(40).cast::<i64>();
                                                                    l418 as u64
                                                                };
                                                                WorkerInvocation::ManualUpdate(e419)
                                                            }
                                                        };
                                                        PendingWorkerInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l357 as u64,
                                                                nanoseconds: l358 as u32,
                                                            },
                                                            invocation: v419,
                                                        }
                                                    };
                                                    OplogEntry::PendingWorkerInvocation(e584)
                                                }
                                                16 => {
                                                    let e584 = {
                                                        let l420 = *base.add(16).cast::<i64>();
                                                        let l421 = *base.add(24).cast::<i32>();
                                                        let l422 = *base.add(32).cast::<i64>();
                                                        let l423 = i32::from(*base.add(40).cast::<u8>());
                                                        let v427 = match l423 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e427 = {
                                                                    let l424 = *base
                                                                        .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l425 = *base
                                                                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len426 = l425;
                                                                    _rt::Vec::from_raw_parts(l424.cast(), len426, len426)
                                                                };
                                                                UpdateDescription::SnapshotBased(e427)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l420 as u64,
                                                                nanoseconds: l421 as u32,
                                                            },
                                                            target_version: l422 as u64,
                                                            update_description: v427,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e584)
                                                }
                                                17 => {
                                                    let e584 = {
                                                        let l428 = *base.add(16).cast::<i64>();
                                                        let l429 = *base.add(24).cast::<i32>();
                                                        let l430 = *base.add(32).cast::<i64>();
                                                        let l431 = *base.add(40).cast::<i64>();
                                                        let l432 = *base.add(48).cast::<*mut u8>();
                                                        let l433 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base451 = l432;
                                                        let len451 = l433;
                                                        let mut result451 = _rt::Vec::with_capacity(len451);
                                                        for i in 0..len451 {
                                                            let base = base451
                                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                                            let e451 = {
                                                                let l434 = *base.add(0).cast::<i64>();
                                                                let l435 = *base.add(8).cast::<i64>();
                                                                let l436 = *base.add(16).cast::<*mut u8>();
                                                                let l437 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len438 = l437;
                                                                let bytes438 = _rt::Vec::from_raw_parts(
                                                                    l436.cast(),
                                                                    len438,
                                                                    len438,
                                                                );
                                                                let l439 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l440 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len441 = l440;
                                                                let bytes441 = _rt::Vec::from_raw_parts(
                                                                    l439.cast(),
                                                                    len441,
                                                                    len441,
                                                                );
                                                                let l442 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l443 = *base
                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base450 = l442;
                                                                let len450 = l443;
                                                                let mut result450 = _rt::Vec::with_capacity(len450);
                                                                for i in 0..len450 {
                                                                    let base = base450
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e450 = {
                                                                        let l444 = *base.add(0).cast::<*mut u8>();
                                                                        let l445 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len446 = l445;
                                                                        let bytes446 = _rt::Vec::from_raw_parts(
                                                                            l444.cast(),
                                                                            len446,
                                                                            len446,
                                                                        );
                                                                        let l447 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l448 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len449 = l448;
                                                                        let bytes449 = _rt::Vec::from_raw_parts(
                                                                            l447.cast(),
                                                                            len449,
                                                                            len449,
                                                                        );
                                                                        (_rt::string_lift(bytes446), _rt::string_lift(bytes449))
                                                                    };
                                                                    result450.push(e450);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base450,
                                                                    len450 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l434 as u64,
                                                                        low_bits: l435 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes438),
                                                                    version: _rt::string_lift(bytes441),
                                                                    parameters: result450,
                                                                }
                                                            };
                                                            result451.push(e451);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base451,
                                                            len451 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l428 as u64,
                                                                nanoseconds: l429 as u32,
                                                            },
                                                            target_version: l430 as u64,
                                                            new_component_size: l431 as u64,
                                                            new_active_plugins: result451,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e584)
                                                }
                                                18 => {
                                                    let e584 = {
                                                        let l452 = *base.add(16).cast::<i64>();
                                                        let l453 = *base.add(24).cast::<i32>();
                                                        let l454 = *base.add(32).cast::<i64>();
                                                        let l455 = i32::from(*base.add(40).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l452 as u64,
                                                                nanoseconds: l453 as u32,
                                                            },
                                                            target_version: l454 as u64,
                                                            details: match l455 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l456 = *base
                                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l457 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len458 = l457;
                                                                        let bytes458 = _rt::Vec::from_raw_parts(
                                                                            l456.cast(),
                                                                            len458,
                                                                            len458,
                                                                        );
                                                                        _rt::string_lift(bytes458)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e584)
                                                }
                                                19 => {
                                                    let e584 = {
                                                        let l459 = *base.add(16).cast::<i64>();
                                                        let l460 = *base.add(24).cast::<i32>();
                                                        let l461 = *base.add(32).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l459 as u64,
                                                                nanoseconds: l460 as u32,
                                                            },
                                                            delta: l461 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e584)
                                                }
                                                20 => {
                                                    let e584 = {
                                                        let l462 = *base.add(16).cast::<i64>();
                                                        let l463 = *base.add(24).cast::<i32>();
                                                        let l464 = *base.add(32).cast::<i64>();
                                                        let l465 = *base.add(40).cast::<*mut u8>();
                                                        let l466 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len467 = l466;
                                                        let bytes467 = _rt::Vec::from_raw_parts(
                                                            l465.cast(),
                                                            len467,
                                                            len467,
                                                        );
                                                        let l468 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l469 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len470 = l469;
                                                        let bytes470 = _rt::Vec::from_raw_parts(
                                                            l468.cast(),
                                                            len470,
                                                            len470,
                                                        );
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l462 as u64,
                                                                nanoseconds: l463 as u32,
                                                            },
                                                            resource_id: l464 as u64,
                                                            name: _rt::string_lift(bytes467),
                                                            owner: _rt::string_lift(bytes470),
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e584)
                                                }
                                                21 => {
                                                    let e584 = {
                                                        let l471 = *base.add(16).cast::<i64>();
                                                        let l472 = *base.add(24).cast::<i32>();
                                                        let l473 = *base.add(32).cast::<i64>();
                                                        let l474 = *base.add(40).cast::<*mut u8>();
                                                        let l475 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len476 = l475;
                                                        let bytes476 = _rt::Vec::from_raw_parts(
                                                            l474.cast(),
                                                            len476,
                                                            len476,
                                                        );
                                                        let l477 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l478 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len479 = l478;
                                                        let bytes479 = _rt::Vec::from_raw_parts(
                                                            l477.cast(),
                                                            len479,
                                                            len479,
                                                        );
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l471 as u64,
                                                                nanoseconds: l472 as u32,
                                                            },
                                                            resource_id: l473 as u64,
                                                            name: _rt::string_lift(bytes476),
                                                            owner: _rt::string_lift(bytes479),
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e584)
                                                }
                                                22 => {
                                                    let e584 = {
                                                        let l480 = *base.add(16).cast::<i64>();
                                                        let l481 = *base.add(24).cast::<i32>();
                                                        let l482 = i32::from(*base.add(32).cast::<u8>());
                                                        let l483 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l484 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len485 = l484;
                                                        let bytes485 = _rt::Vec::from_raw_parts(
                                                            l483.cast(),
                                                            len485,
                                                            len485,
                                                        );
                                                        let l486 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l487 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len488 = l487;
                                                        let bytes488 = _rt::Vec::from_raw_parts(
                                                            l486.cast(),
                                                            len488,
                                                            len488,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l480 as u64,
                                                                nanoseconds: l481 as u32,
                                                            },
                                                            level: LogLevel::_lift(l482 as u8),
                                                            context: _rt::string_lift(bytes485),
                                                            message: _rt::string_lift(bytes488),
                                                        }
                                                    };
                                                    OplogEntry::Log(e584)
                                                }
                                                23 => {
                                                    let e584 = {
                                                        let l489 = *base.add(16).cast::<i64>();
                                                        let l490 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l489 as u64,
                                                            nanoseconds: l490 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e584)
                                                }
                                                24 => {
                                                    let e584 = {
                                                        let l491 = *base.add(16).cast::<i64>();
                                                        let l492 = *base.add(24).cast::<i32>();
                                                        let l493 = *base.add(32).cast::<i64>();
                                                        let l494 = *base.add(40).cast::<i64>();
                                                        let l495 = *base.add(48).cast::<*mut u8>();
                                                        let l496 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len497 = l496;
                                                        let bytes497 = _rt::Vec::from_raw_parts(
                                                            l495.cast(),
                                                            len497,
                                                            len497,
                                                        );
                                                        let l498 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l499 = *base
                                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len500 = l499;
                                                        let bytes500 = _rt::Vec::from_raw_parts(
                                                            l498.cast(),
                                                            len500,
                                                            len500,
                                                        );
                                                        let l501 = *base
                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l502 = *base
                                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base509 = l501;
                                                        let len509 = l502;
                                                        let mut result509 = _rt::Vec::with_capacity(len509);
                                                        for i in 0..len509 {
                                                            let base = base509
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e509 = {
                                                                let l503 = *base.add(0).cast::<*mut u8>();
                                                                let l504 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len505 = l504;
                                                                let bytes505 = _rt::Vec::from_raw_parts(
                                                                    l503.cast(),
                                                                    len505,
                                                                    len505,
                                                                );
                                                                let l506 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l507 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len508 = l507;
                                                                let bytes508 = _rt::Vec::from_raw_parts(
                                                                    l506.cast(),
                                                                    len508,
                                                                    len508,
                                                                );
                                                                (_rt::string_lift(bytes505), _rt::string_lift(bytes508))
                                                            };
                                                            result509.push(e509);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base509,
                                                            len509 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l491 as u64,
                                                                nanoseconds: l492 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l493 as u64,
                                                                    low_bits: l494 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes497),
                                                                version: _rt::string_lift(bytes500),
                                                                parameters: result509,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e584)
                                                }
                                                25 => {
                                                    let e584 = {
                                                        let l510 = *base.add(16).cast::<i64>();
                                                        let l511 = *base.add(24).cast::<i32>();
                                                        let l512 = *base.add(32).cast::<i64>();
                                                        let l513 = *base.add(40).cast::<i64>();
                                                        let l514 = *base.add(48).cast::<*mut u8>();
                                                        let l515 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len516 = l515;
                                                        let bytes516 = _rt::Vec::from_raw_parts(
                                                            l514.cast(),
                                                            len516,
                                                            len516,
                                                        );
                                                        let l517 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l518 = *base
                                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len519 = l518;
                                                        let bytes519 = _rt::Vec::from_raw_parts(
                                                            l517.cast(),
                                                            len519,
                                                            len519,
                                                        );
                                                        let l520 = *base
                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l521 = *base
                                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base528 = l520;
                                                        let len528 = l521;
                                                        let mut result528 = _rt::Vec::with_capacity(len528);
                                                        for i in 0..len528 {
                                                            let base = base528
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e528 = {
                                                                let l522 = *base.add(0).cast::<*mut u8>();
                                                                let l523 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len524 = l523;
                                                                let bytes524 = _rt::Vec::from_raw_parts(
                                                                    l522.cast(),
                                                                    len524,
                                                                    len524,
                                                                );
                                                                let l525 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l526 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len527 = l526;
                                                                let bytes527 = _rt::Vec::from_raw_parts(
                                                                    l525.cast(),
                                                                    len527,
                                                                    len527,
                                                                );
                                                                (_rt::string_lift(bytes524), _rt::string_lift(bytes527))
                                                            };
                                                            result528.push(e528);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base528,
                                                            len528 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l510 as u64,
                                                                nanoseconds: l511 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l512 as u64,
                                                                    low_bits: l513 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes516),
                                                                version: _rt::string_lift(bytes519),
                                                                parameters: result528,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e584)
                                                }
                                                26 => {
                                                    let e584 = {
                                                        let l529 = *base.add(16).cast::<i64>();
                                                        let l530 = *base.add(24).cast::<i32>();
                                                        let l531 = *base.add(32).cast::<i64>();
                                                        let l532 = *base.add(40).cast::<i64>();
                                                        RevertParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l529 as u64,
                                                                nanoseconds: l530 as u32,
                                                            },
                                                            start: l531 as u64,
                                                            end: l532 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Revert(e584)
                                                }
                                                27 => {
                                                    let e584 = {
                                                        let l533 = *base.add(16).cast::<i64>();
                                                        let l534 = *base.add(24).cast::<i32>();
                                                        let l535 = *base.add(32).cast::<*mut u8>();
                                                        let l536 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len537 = l536;
                                                        let bytes537 = _rt::Vec::from_raw_parts(
                                                            l535.cast(),
                                                            len537,
                                                            len537,
                                                        );
                                                        CancelInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l533 as u64,
                                                                nanoseconds: l534 as u32,
                                                            },
                                                            idempotency_key: _rt::string_lift(bytes537),
                                                        }
                                                    };
                                                    OplogEntry::CancelInvocation(e584)
                                                }
                                                28 => {
                                                    let e584 = {
                                                        let l538 = *base.add(16).cast::<i64>();
                                                        let l539 = *base.add(24).cast::<i32>();
                                                        let l540 = *base.add(32).cast::<*mut u8>();
                                                        let l541 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len542 = l541;
                                                        let bytes542 = _rt::Vec::from_raw_parts(
                                                            l540.cast(),
                                                            len542,
                                                            len542,
                                                        );
                                                        let l543 = i32::from(
                                                            *base
                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l547 = i32::from(
                                                            *base
                                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l551 = *base
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l552 = *base
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base561 = l551;
                                                        let len561 = l552;
                                                        let mut result561 = _rt::Vec::with_capacity(len561);
                                                        for i in 0..len561 {
                                                            let base = base561
                                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                            let e561 = {
                                                                let l553 = *base.add(0).cast::<*mut u8>();
                                                                let l554 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len555 = l554;
                                                                let bytes555 = _rt::Vec::from_raw_parts(
                                                                    l553.cast(),
                                                                    len555,
                                                                    len555,
                                                                );
                                                                let l556 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::api::context::AttributeValue as V560;
                                                                let v560 = match l556 {
                                                                    n => {
                                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                        let e560 = {
                                                                            let l557 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l558 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len559 = l558;
                                                                            let bytes559 = _rt::Vec::from_raw_parts(
                                                                                l557.cast(),
                                                                                len559,
                                                                                len559,
                                                                            );
                                                                            _rt::string_lift(bytes559)
                                                                        };
                                                                        V560::String(e560)
                                                                    }
                                                                };
                                                                super::super::super::golem::api::context::Attribute {
                                                                    key: _rt::string_lift(bytes555),
                                                                    value: v560,
                                                                }
                                                            };
                                                            result561.push(e561);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base561,
                                                            len561 * (5 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        StartSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l538 as u64,
                                                                nanoseconds: l539 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes542),
                                                            parent: match l543 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l544 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l545 = *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len546 = l545;
                                                                        let bytes546 = _rt::Vec::from_raw_parts(
                                                                            l544.cast(),
                                                                            len546,
                                                                            len546,
                                                                        );
                                                                        _rt::string_lift(bytes546)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            linked_context: match l547 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l548 = *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l549 = *base
                                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len550 = l549;
                                                                        let bytes550 = _rt::Vec::from_raw_parts(
                                                                            l548.cast(),
                                                                            len550,
                                                                            len550,
                                                                        );
                                                                        _rt::string_lift(bytes550)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            attributes: result561,
                                                        }
                                                    };
                                                    OplogEntry::StartSpan(e584)
                                                }
                                                29 => {
                                                    let e584 = {
                                                        let l562 = *base.add(16).cast::<i64>();
                                                        let l563 = *base.add(24).cast::<i32>();
                                                        let l564 = *base.add(32).cast::<*mut u8>();
                                                        let l565 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len566 = l565;
                                                        let bytes566 = _rt::Vec::from_raw_parts(
                                                            l564.cast(),
                                                            len566,
                                                            len566,
                                                        );
                                                        FinishSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l562 as u64,
                                                                nanoseconds: l563 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes566),
                                                        }
                                                    };
                                                    OplogEntry::FinishSpan(e584)
                                                }
                                                30 => {
                                                    let e584 = {
                                                        let l567 = *base.add(16).cast::<i64>();
                                                        let l568 = *base.add(24).cast::<i32>();
                                                        let l569 = *base.add(32).cast::<*mut u8>();
                                                        let l570 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len571 = l570;
                                                        let bytes571 = _rt::Vec::from_raw_parts(
                                                            l569.cast(),
                                                            len571,
                                                            len571,
                                                        );
                                                        let l572 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l573 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len574 = l573;
                                                        let bytes574 = _rt::Vec::from_raw_parts(
                                                            l572.cast(),
                                                            len574,
                                                            len574,
                                                        );
                                                        let l575 = i32::from(
                                                            *base
                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        use super::super::super::golem::api::context::AttributeValue as V579;
                                                        let v579 = match l575 {
                                                            n => {
                                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                let e579 = {
                                                                    let l576 = *base
                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l577 = *base
                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len578 = l577;
                                                                    let bytes578 = _rt::Vec::from_raw_parts(
                                                                        l576.cast(),
                                                                        len578,
                                                                        len578,
                                                                    );
                                                                    _rt::string_lift(bytes578)
                                                                };
                                                                V579::String(e579)
                                                            }
                                                        };
                                                        SetSpanAttributeParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l567 as u64,
                                                                nanoseconds: l568 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes571),
                                                            key: _rt::string_lift(bytes574),
                                                            value: v579,
                                                        }
                                                    };
                                                    OplogEntry::SetSpanAttribute(e584)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 31, "invalid enum discriminant");
                                                    let e584 = {
                                                        let l580 = *base.add(16).cast::<i64>();
                                                        let l581 = *base.add(24).cast::<i32>();
                                                        let l582 = i32::from(*base.add(32).cast::<u8>());
                                                        use super::super::super::golem::api::host::PersistenceLevel as V583;
                                                        let v583 = match l582 {
                                                            0 => V583::PersistNothing,
                                                            1 => V583::PersistRemoteSideEffects,
                                                            n => {
                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                V583::Smart
                                                            }
                                                        };
                                                        ChangePersistenceLevelParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l580 as u64,
                                                                nanoseconds: l581 as u32,
                                                            },
                                                            persistence_level: v583,
                                                        }
                                                    };
                                                    OplogEntry::ChangePersistenceLevel(e584)
                                                }
                                            };
                                            (l5 as u64, v584)
                                        };
                                        result585.push(e585);
                                    }
                                    _rt::cabi_dealloc(
                                        base585,
                                        len585 * (112 + 12 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result585
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result586
                    }
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem worker
            #[derive(Clone)]
            pub struct WorkerId {
                pub component_id: ComponentId,
                pub worker_name: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId")
                        .field("component-id", &self.component_id)
                        .field("worker-name", &self.worker_name)
                        .finish()
                }
            }
            pub type NodeIndex = i32;
            pub type ResourceId = u64;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResourceMode {
                Owned,
                Borrowed,
            }
            impl ::core::fmt::Debug for ResourceMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceMode::Owned => {
                            f.debug_tuple("ResourceMode::Owned").finish()
                        }
                        ResourceMode::Borrowed => {
                            f.debug_tuple("ResourceMode::Borrowed").finish()
                        }
                    }
                }
            }
            impl ResourceMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResourceMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResourceMode::Owned,
                        1 => ResourceMode::Borrowed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub enum WitTypeNode {
                RecordType(_rt::Vec<(_rt::String, NodeIndex)>),
                VariantType(_rt::Vec<(_rt::String, Option<NodeIndex>)>),
                EnumType(_rt::Vec<_rt::String>),
                FlagsType(_rt::Vec<_rt::String>),
                TupleType(_rt::Vec<NodeIndex>),
                ListType(NodeIndex),
                OptionType(NodeIndex),
                ResultType((Option<NodeIndex>, Option<NodeIndex>)),
                PrimU8Type,
                PrimU16Type,
                PrimU32Type,
                PrimU64Type,
                PrimS8Type,
                PrimS16Type,
                PrimS32Type,
                PrimS64Type,
                PrimF32Type,
                PrimF64Type,
                PrimCharType,
                PrimBoolType,
                PrimStringType,
                HandleType((ResourceId, ResourceMode)),
            }
            impl ::core::fmt::Debug for WitTypeNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitTypeNode::RecordType(e) => {
                            f.debug_tuple("WitTypeNode::RecordType").field(e).finish()
                        }
                        WitTypeNode::VariantType(e) => {
                            f.debug_tuple("WitTypeNode::VariantType").field(e).finish()
                        }
                        WitTypeNode::EnumType(e) => {
                            f.debug_tuple("WitTypeNode::EnumType").field(e).finish()
                        }
                        WitTypeNode::FlagsType(e) => {
                            f.debug_tuple("WitTypeNode::FlagsType").field(e).finish()
                        }
                        WitTypeNode::TupleType(e) => {
                            f.debug_tuple("WitTypeNode::TupleType").field(e).finish()
                        }
                        WitTypeNode::ListType(e) => {
                            f.debug_tuple("WitTypeNode::ListType").field(e).finish()
                        }
                        WitTypeNode::OptionType(e) => {
                            f.debug_tuple("WitTypeNode::OptionType").field(e).finish()
                        }
                        WitTypeNode::ResultType(e) => {
                            f.debug_tuple("WitTypeNode::ResultType").field(e).finish()
                        }
                        WitTypeNode::PrimU8Type => {
                            f.debug_tuple("WitTypeNode::PrimU8Type").finish()
                        }
                        WitTypeNode::PrimU16Type => {
                            f.debug_tuple("WitTypeNode::PrimU16Type").finish()
                        }
                        WitTypeNode::PrimU32Type => {
                            f.debug_tuple("WitTypeNode::PrimU32Type").finish()
                        }
                        WitTypeNode::PrimU64Type => {
                            f.debug_tuple("WitTypeNode::PrimU64Type").finish()
                        }
                        WitTypeNode::PrimS8Type => {
                            f.debug_tuple("WitTypeNode::PrimS8Type").finish()
                        }
                        WitTypeNode::PrimS16Type => {
                            f.debug_tuple("WitTypeNode::PrimS16Type").finish()
                        }
                        WitTypeNode::PrimS32Type => {
                            f.debug_tuple("WitTypeNode::PrimS32Type").finish()
                        }
                        WitTypeNode::PrimS64Type => {
                            f.debug_tuple("WitTypeNode::PrimS64Type").finish()
                        }
                        WitTypeNode::PrimF32Type => {
                            f.debug_tuple("WitTypeNode::PrimF32Type").finish()
                        }
                        WitTypeNode::PrimF64Type => {
                            f.debug_tuple("WitTypeNode::PrimF64Type").finish()
                        }
                        WitTypeNode::PrimCharType => {
                            f.debug_tuple("WitTypeNode::PrimCharType").finish()
                        }
                        WitTypeNode::PrimBoolType => {
                            f.debug_tuple("WitTypeNode::PrimBoolType").finish()
                        }
                        WitTypeNode::PrimStringType => {
                            f.debug_tuple("WitTypeNode::PrimStringType").finish()
                        }
                        WitTypeNode::HandleType(e) => {
                            f.debug_tuple("WitTypeNode::HandleType").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct NamedWitTypeNode {
                pub name: Option<_rt::String>,
                pub owner: Option<_rt::String>,
                pub type_: WitTypeNode,
            }
            impl ::core::fmt::Debug for NamedWitTypeNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("NamedWitTypeNode")
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .field("type", &self.type_)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WitType {
                pub nodes: _rt::Vec<NamedWitTypeNode>,
            }
            impl ::core::fmt::Debug for WitType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitType").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct ValueAndType {
                pub value: WitValue,
                pub typ: WitType,
            }
            impl ::core::fmt::Debug for ValueAndType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ValueAndType")
                        .field("value", &self.value)
                        .field("typ", &self.typ)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CancellationToken {
                handle: _rt::Resource<CancellationToken>,
            }
            impl CancellationToken {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CancellationToken {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]cancellation-token"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Parses a UUID from a string
            pub fn parse_uuid(uuid: &str) -> Result<Uuid, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = uuid;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "parse-uuid"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result9 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                Uuid {
                                    high_bits: l4 as u64,
                                    low_bits: l5 as u64,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(8).cast::<*mut u8>();
                                let l7 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Converts a UUID to a string
            pub fn uuid_to_string(uuid: Uuid) -> _rt::String {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Uuid { high_bits: high_bits0, low_bits: low_bits0 } = uuid;
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "uuid-to-string"]
                        fn wit_import2(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i64(high_bits0),
                            _rt::as_i64(low_bits0),
                            ptr1,
                        )
                    };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let result6 = _rt::string_lift(bytes5);
                    result6
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId) -> Self {
                    unsafe {
                        let WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let ComponentId { uuid: uuid1 } = component_id0;
                        let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import4(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                            )
                        };
                        unsafe { WasmRpc::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result78 = match l15 {
                            0 => {
                                let e = {
                                    let l16 = *ptr13
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *ptr13
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base63 = l16;
                                    let len63 = l17;
                                    let mut result63 = _rt::Vec::with_capacity(len63);
                                    for i in 0..len63 {
                                        let base = base63
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e63 = {
                                            let l18 = i32::from(*base.add(0).cast::<u8>());
                                            let v62 = match l18 {
                                                0 => {
                                                    let e62 = {
                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                        let l20 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len21 = l20;
                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                    };
                                                    WitNode::RecordValue(e62)
                                                }
                                                1 => {
                                                    let e62 = {
                                                        let l22 = *base.add(8).cast::<i32>();
                                                        let l23 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l22 as u32,
                                                            match l23 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l24 = *base.add(16).cast::<i32>();
                                                                        l24
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e62)
                                                }
                                                2 => {
                                                    let e62 = {
                                                        let l25 = *base.add(8).cast::<i32>();
                                                        l25 as u32
                                                    };
                                                    WitNode::EnumValue(e62)
                                                }
                                                3 => {
                                                    let e62 = {
                                                        let l26 = *base.add(8).cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l26;
                                                        let len29 = l27;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29.add(i * 1);
                                                            let e29 = {
                                                                let l28 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l28 as u8)
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(base29, len29 * 1, 1);
                                                        result29
                                                    };
                                                    WitNode::FlagsValue(e62)
                                                }
                                                4 => {
                                                    let e62 = {
                                                        let l30 = *base.add(8).cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        _rt::Vec::from_raw_parts(l30.cast(), len32, len32)
                                                    };
                                                    WitNode::TupleValue(e62)
                                                }
                                                5 => {
                                                    let e62 = {
                                                        let l33 = *base.add(8).cast::<*mut u8>();
                                                        let l34 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len35 = l34;
                                                        _rt::Vec::from_raw_parts(l33.cast(), len35, len35)
                                                    };
                                                    WitNode::ListValue(e62)
                                                }
                                                6 => {
                                                    let e62 = {
                                                        let l36 = i32::from(*base.add(8).cast::<u8>());
                                                        match l36 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l37 = *base.add(12).cast::<i32>();
                                                                    l37
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e62)
                                                }
                                                7 => {
                                                    let e62 = {
                                                        let l38 = i32::from(*base.add(8).cast::<u8>());
                                                        match l38 {
                                                            0 => {
                                                                let e = {
                                                                    let l39 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l39 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l40 = *base.add(16).cast::<i32>();
                                                                                l40
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l41 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l42 = *base.add(16).cast::<i32>();
                                                                                l42
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e62)
                                                }
                                                8 => {
                                                    let e62 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u8>());
                                                        l43 as u8
                                                    };
                                                    WitNode::PrimU8(e62)
                                                }
                                                9 => {
                                                    let e62 = {
                                                        let l44 = i32::from(*base.add(8).cast::<u16>());
                                                        l44 as u16
                                                    };
                                                    WitNode::PrimU16(e62)
                                                }
                                                10 => {
                                                    let e62 = {
                                                        let l45 = *base.add(8).cast::<i32>();
                                                        l45 as u32
                                                    };
                                                    WitNode::PrimU32(e62)
                                                }
                                                11 => {
                                                    let e62 = {
                                                        let l46 = *base.add(8).cast::<i64>();
                                                        l46 as u64
                                                    };
                                                    WitNode::PrimU64(e62)
                                                }
                                                12 => {
                                                    let e62 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i8>());
                                                        l47 as i8
                                                    };
                                                    WitNode::PrimS8(e62)
                                                }
                                                13 => {
                                                    let e62 = {
                                                        let l48 = i32::from(*base.add(8).cast::<i16>());
                                                        l48 as i16
                                                    };
                                                    WitNode::PrimS16(e62)
                                                }
                                                14 => {
                                                    let e62 = {
                                                        let l49 = *base.add(8).cast::<i32>();
                                                        l49
                                                    };
                                                    WitNode::PrimS32(e62)
                                                }
                                                15 => {
                                                    let e62 = {
                                                        let l50 = *base.add(8).cast::<i64>();
                                                        l50
                                                    };
                                                    WitNode::PrimS64(e62)
                                                }
                                                16 => {
                                                    let e62 = {
                                                        let l51 = *base.add(8).cast::<f32>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat32(e62)
                                                }
                                                17 => {
                                                    let e62 = {
                                                        let l52 = *base.add(8).cast::<f64>();
                                                        l52
                                                    };
                                                    WitNode::PrimFloat64(e62)
                                                }
                                                18 => {
                                                    let e62 = {
                                                        let l53 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l53 as u32)
                                                    };
                                                    WitNode::PrimChar(e62)
                                                }
                                                19 => {
                                                    let e62 = {
                                                        let l54 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l54 as u8)
                                                    };
                                                    WitNode::PrimBool(e62)
                                                }
                                                20 => {
                                                    let e62 = {
                                                        let l55 = *base.add(8).cast::<*mut u8>();
                                                        let l56 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );
                                                        _rt::string_lift(bytes57)
                                                    };
                                                    WitNode::PrimString(e62)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e62 = {
                                                        let l58 = *base.add(8).cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len60 = l59;
                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                            l58.cast(),
                                                            len60,
                                                            len60,
                                                        );
                                                        let l61 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes60),
                                                            },
                                                            l61 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e62)
                                                }
                                            };
                                            v62
                                        };
                                        result63.push(e63);
                                    }
                                    _rt::cabi_dealloc(
                                        base63,
                                        len63 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    WitValue { nodes: result63 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l64 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v77 = match l64 {
                                        0 => {
                                            let e77 = {
                                                let l65 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l66 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            RpcError::ProtocolError(e77)
                                        }
                                        1 => {
                                            let e77 = {
                                                let l68 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l69 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            RpcError::Denied(e77)
                                        }
                                        2 => {
                                            let e77 = {
                                                let l71 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l72 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            RpcError::NotFound(e77)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e77 = {
                                                let l74 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            RpcError::RemoteInternalError(e77)
                                        }
                                    };
                                    v77
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result78
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result30 = match l15 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v29 = match l16 {
                                        0 => {
                                            let e29 = {
                                                let l17 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            RpcError::ProtocolError(e29)
                                        }
                                        1 => {
                                            let e29 = {
                                                let l20 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            RpcError::Denied(e29)
                                        }
                                        2 => {
                                            let e29 = {
                                                let l23 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l24 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            RpcError::NotFound(e29)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e29 = {
                                                let l26 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l27 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            RpcError::RemoteInternalError(e29)
                                        }
                                    };
                                    v29
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result30
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import13(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import13(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import13(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                            )
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { FutureInvokeResult::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later
                pub fn schedule_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> () {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later. Call cancel on the returned resource to cancel the invocation before the scheduled time.
                pub fn schedule_cancelable_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> CancellationToken {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-cancelable-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { CancellationToken::from_handle(ret as u32) }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 5 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 5
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result66 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    match l3 {
                                        0 => {
                                            let e = {
                                                let l4 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base51 = l4;
                                                let len51 = l5;
                                                let mut result51 = _rt::Vec::with_capacity(len51);
                                                for i in 0..len51 {
                                                    let base = base51
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e51 = {
                                                        let l6 = i32::from(*base.add(0).cast::<u8>());
                                                        let v50 = match l6 {
                                                            0 => {
                                                                let e50 = {
                                                                    let l7 = *base.add(8).cast::<*mut u8>();
                                                                    let l8 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len9 = l8;
                                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                                                };
                                                                WitNode::RecordValue(e50)
                                                            }
                                                            1 => {
                                                                let e50 = {
                                                                    let l10 = *base.add(8).cast::<i32>();
                                                                    let l11 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l10 as u32,
                                                                        match l11 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l12 = *base.add(16).cast::<i32>();
                                                                                    l12
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e50)
                                                            }
                                                            2 => {
                                                                let e50 = {
                                                                    let l13 = *base.add(8).cast::<i32>();
                                                                    l13 as u32
                                                                };
                                                                WitNode::EnumValue(e50)
                                                            }
                                                            3 => {
                                                                let e50 = {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base17 = l14;
                                                                    let len17 = l15;
                                                                    let mut result17 = _rt::Vec::with_capacity(len17);
                                                                    for i in 0..len17 {
                                                                        let base = base17.add(i * 1);
                                                                        let e17 = {
                                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l16 as u8)
                                                                        };
                                                                        result17.push(e17);
                                                                    }
                                                                    _rt::cabi_dealloc(base17, len17 * 1, 1);
                                                                    result17
                                                                };
                                                                WitNode::FlagsValue(e50)
                                                            }
                                                            4 => {
                                                                let e50 = {
                                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                                    let l19 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len20 = l19;
                                                                    _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                                };
                                                                WitNode::TupleValue(e50)
                                                            }
                                                            5 => {
                                                                let e50 = {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len23 = l22;
                                                                    _rt::Vec::from_raw_parts(l21.cast(), len23, len23)
                                                                };
                                                                WitNode::ListValue(e50)
                                                            }
                                                            6 => {
                                                                let e50 = {
                                                                    let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l24 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l25 = *base.add(12).cast::<i32>();
                                                                                l25
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e50)
                                                            }
                                                            7 => {
                                                                let e50 = {
                                                                    let l26 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l26 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l27 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l28 = *base.add(16).cast::<i32>();
                                                                                            l28
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l29 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l29 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l30 = *base.add(16).cast::<i32>();
                                                                                            l30
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e50)
                                                            }
                                                            8 => {
                                                                let e50 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u8>());
                                                                    l31 as u8
                                                                };
                                                                WitNode::PrimU8(e50)
                                                            }
                                                            9 => {
                                                                let e50 = {
                                                                    let l32 = i32::from(*base.add(8).cast::<u16>());
                                                                    l32 as u16
                                                                };
                                                                WitNode::PrimU16(e50)
                                                            }
                                                            10 => {
                                                                let e50 = {
                                                                    let l33 = *base.add(8).cast::<i32>();
                                                                    l33 as u32
                                                                };
                                                                WitNode::PrimU32(e50)
                                                            }
                                                            11 => {
                                                                let e50 = {
                                                                    let l34 = *base.add(8).cast::<i64>();
                                                                    l34 as u64
                                                                };
                                                                WitNode::PrimU64(e50)
                                                            }
                                                            12 => {
                                                                let e50 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i8>());
                                                                    l35 as i8
                                                                };
                                                                WitNode::PrimS8(e50)
                                                            }
                                                            13 => {
                                                                let e50 = {
                                                                    let l36 = i32::from(*base.add(8).cast::<i16>());
                                                                    l36 as i16
                                                                };
                                                                WitNode::PrimS16(e50)
                                                            }
                                                            14 => {
                                                                let e50 = {
                                                                    let l37 = *base.add(8).cast::<i32>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS32(e50)
                                                            }
                                                            15 => {
                                                                let e50 = {
                                                                    let l38 = *base.add(8).cast::<i64>();
                                                                    l38
                                                                };
                                                                WitNode::PrimS64(e50)
                                                            }
                                                            16 => {
                                                                let e50 = {
                                                                    let l39 = *base.add(8).cast::<f32>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat32(e50)
                                                            }
                                                            17 => {
                                                                let e50 = {
                                                                    let l40 = *base.add(8).cast::<f64>();
                                                                    l40
                                                                };
                                                                WitNode::PrimFloat64(e50)
                                                            }
                                                            18 => {
                                                                let e50 = {
                                                                    let l41 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l41 as u32)
                                                                };
                                                                WitNode::PrimChar(e50)
                                                            }
                                                            19 => {
                                                                let e50 = {
                                                                    let l42 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l42 as u8)
                                                                };
                                                                WitNode::PrimBool(e50)
                                                            }
                                                            20 => {
                                                                let e50 = {
                                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                                    let l44 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len45 = l44;
                                                                    let bytes45 = _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );
                                                                    _rt::string_lift(bytes45)
                                                                };
                                                                WitNode::PrimString(e50)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e50 = {
                                                                    let l46 = *base.add(8).cast::<*mut u8>();
                                                                    let l47 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len48 = l47;
                                                                    let bytes48 = _rt::Vec::from_raw_parts(
                                                                        l46.cast(),
                                                                        len48,
                                                                        len48,
                                                                    );
                                                                    let l49 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes48),
                                                                        },
                                                                        l49 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e50)
                                                            }
                                                        };
                                                        v50
                                                    };
                                                    result51.push(e51);
                                                }
                                                _rt::cabi_dealloc(
                                                    base51,
                                                    len51 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                WitValue { nodes: result51 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l52 = i32::from(
                                                    *ptr0
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let v65 = match l52 {
                                                    0 => {
                                                        let e65 = {
                                                            let l53 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l54 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len55 = l54;
                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                l53.cast(),
                                                                len55,
                                                                len55,
                                                            );
                                                            _rt::string_lift(bytes55)
                                                        };
                                                        RpcError::ProtocolError(e65)
                                                    }
                                                    1 => {
                                                        let e65 = {
                                                            let l56 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len58 = l57;
                                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                                l56.cast(),
                                                                len58,
                                                                len58,
                                                            );
                                                            _rt::string_lift(bytes58)
                                                        };
                                                        RpcError::Denied(e65)
                                                    }
                                                    2 => {
                                                        let e65 = {
                                                            let l59 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l60 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        RpcError::NotFound(e65)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e65 = {
                                                            let l62 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l63 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len64 = l63;
                                                            let bytes64 = _rt::Vec::from_raw_parts(
                                                                l62.cast(),
                                                                len64,
                                                                len64,
                                                            );
                                                            _rt::string_lift(bytes64)
                                                        };
                                                        RpcError::RemoteInternalError(e65)
                                                    }
                                                };
                                                v65
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result66
                    }
                }
            }
            impl CancellationToken {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cancel(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]cancellation-token.cancel"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_value(vnt: &ValueAndType) -> WitValue {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec29 = nodes12;
                    let len29 = vec29.len();
                    let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec29.len() * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result29 = if layout29.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout29);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec29.into_iter().enumerate() {
                        let base = result29
                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                        {
                            let NamedWitTypeNode {
                                name: name13,
                                owner: owner13,
                                type_: type_13,
                            } = e;
                            match name13 {
                                Some(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match owner13 {
                                Some(e) => {
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec15 = e;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match type_13 {
                                WitTypeNode::RecordType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(t16_1);
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec21 = e;
                                    let len21 = vec21.len();
                                    let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec21.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result21 = if layout21.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout21);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec21.into_iter().enumerate() {
                                        let base = result21
                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t19_0, t19_1) = e;
                                            let vec20 = t19_0;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len20;
                                            *base.add(0).cast::<*mut u8>() = ptr20.cast_mut();
                                            match t19_1 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result21;
                                    cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec23 = e;
                                    let len23 = vec23.len();
                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec23.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result23 = if layout23.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout23);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec23.into_iter().enumerate() {
                                        let base = result23
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec22 = e;
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base.add(0).cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len23;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result23;
                                    cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec25 = e;
                                    let len25 = vec25.len();
                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec25.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result25 = if layout25.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout25);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec25.into_iter().enumerate() {
                                        let base = result25
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec24 = e;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base.add(0).cast::<*mut u8>() = ptr24.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len25;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result25;
                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec26 = e;
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let (t27_0, t27_1) = e;
                                    match t27_0 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t27_1 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (21i32) as u8;
                                    let (t28_0, t28_1) = e;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t28_0);
                                    *base
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (t28_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr30 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "extract-value"]
                        fn wit_import31(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import31(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import31(result11, len11, result29, len29, ptr30) };
                    let l32 = *ptr30.add(0).cast::<*mut u8>();
                    let l33 = *ptr30
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base79 = l32;
                    let len79 = l33;
                    let mut result79 = _rt::Vec::with_capacity(len79);
                    for i in 0..len79 {
                        let base = base79
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        let e79 = {
                            let l34 = i32::from(*base.add(0).cast::<u8>());
                            let v78 = match l34 {
                                0 => {
                                    let e78 = {
                                        let l35 = *base.add(8).cast::<*mut u8>();
                                        let l36 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len37 = l36;
                                        _rt::Vec::from_raw_parts(l35.cast(), len37, len37)
                                    };
                                    WitNode::RecordValue(e78)
                                }
                                1 => {
                                    let e78 = {
                                        let l38 = *base.add(8).cast::<i32>();
                                        let l39 = i32::from(*base.add(12).cast::<u8>());
                                        (
                                            l38 as u32,
                                            match l39 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l40 = *base.add(16).cast::<i32>();
                                                        l40
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitNode::VariantValue(e78)
                                }
                                2 => {
                                    let e78 = {
                                        let l41 = *base.add(8).cast::<i32>();
                                        l41 as u32
                                    };
                                    WitNode::EnumValue(e78)
                                }
                                3 => {
                                    let e78 = {
                                        let l42 = *base.add(8).cast::<*mut u8>();
                                        let l43 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base45 = l42;
                                        let len45 = l43;
                                        let mut result45 = _rt::Vec::with_capacity(len45);
                                        for i in 0..len45 {
                                            let base = base45.add(i * 1);
                                            let e45 = {
                                                let l44 = i32::from(*base.add(0).cast::<u8>());
                                                _rt::bool_lift(l44 as u8)
                                            };
                                            result45.push(e45);
                                        }
                                        _rt::cabi_dealloc(base45, len45 * 1, 1);
                                        result45
                                    };
                                    WitNode::FlagsValue(e78)
                                }
                                4 => {
                                    let e78 = {
                                        let l46 = *base.add(8).cast::<*mut u8>();
                                        let l47 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len48 = l47;
                                        _rt::Vec::from_raw_parts(l46.cast(), len48, len48)
                                    };
                                    WitNode::TupleValue(e78)
                                }
                                5 => {
                                    let e78 = {
                                        let l49 = *base.add(8).cast::<*mut u8>();
                                        let l50 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len51 = l50;
                                        _rt::Vec::from_raw_parts(l49.cast(), len51, len51)
                                    };
                                    WitNode::ListValue(e78)
                                }
                                6 => {
                                    let e78 = {
                                        let l52 = i32::from(*base.add(8).cast::<u8>());
                                        match l52 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l53 = *base.add(12).cast::<i32>();
                                                    l53
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::OptionValue(e78)
                                }
                                7 => {
                                    let e78 = {
                                        let l54 = i32::from(*base.add(8).cast::<u8>());
                                        match l54 {
                                            0 => {
                                                let e = {
                                                    let l55 = i32::from(*base.add(12).cast::<u8>());
                                                    match l55 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l56 = *base.add(16).cast::<i32>();
                                                                l56
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Ok(e)
                                            }
                                            1 => {
                                                let e = {
                                                    let l57 = i32::from(*base.add(12).cast::<u8>());
                                                    match l57 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l58 = *base.add(16).cast::<i32>();
                                                                l58
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::ResultValue(e78)
                                }
                                8 => {
                                    let e78 = {
                                        let l59 = i32::from(*base.add(8).cast::<u8>());
                                        l59 as u8
                                    };
                                    WitNode::PrimU8(e78)
                                }
                                9 => {
                                    let e78 = {
                                        let l60 = i32::from(*base.add(8).cast::<u16>());
                                        l60 as u16
                                    };
                                    WitNode::PrimU16(e78)
                                }
                                10 => {
                                    let e78 = {
                                        let l61 = *base.add(8).cast::<i32>();
                                        l61 as u32
                                    };
                                    WitNode::PrimU32(e78)
                                }
                                11 => {
                                    let e78 = {
                                        let l62 = *base.add(8).cast::<i64>();
                                        l62 as u64
                                    };
                                    WitNode::PrimU64(e78)
                                }
                                12 => {
                                    let e78 = {
                                        let l63 = i32::from(*base.add(8).cast::<i8>());
                                        l63 as i8
                                    };
                                    WitNode::PrimS8(e78)
                                }
                                13 => {
                                    let e78 = {
                                        let l64 = i32::from(*base.add(8).cast::<i16>());
                                        l64 as i16
                                    };
                                    WitNode::PrimS16(e78)
                                }
                                14 => {
                                    let e78 = {
                                        let l65 = *base.add(8).cast::<i32>();
                                        l65
                                    };
                                    WitNode::PrimS32(e78)
                                }
                                15 => {
                                    let e78 = {
                                        let l66 = *base.add(8).cast::<i64>();
                                        l66
                                    };
                                    WitNode::PrimS64(e78)
                                }
                                16 => {
                                    let e78 = {
                                        let l67 = *base.add(8).cast::<f32>();
                                        l67
                                    };
                                    WitNode::PrimFloat32(e78)
                                }
                                17 => {
                                    let e78 = {
                                        let l68 = *base.add(8).cast::<f64>();
                                        l68
                                    };
                                    WitNode::PrimFloat64(e78)
                                }
                                18 => {
                                    let e78 = {
                                        let l69 = *base.add(8).cast::<i32>();
                                        _rt::char_lift(l69 as u32)
                                    };
                                    WitNode::PrimChar(e78)
                                }
                                19 => {
                                    let e78 = {
                                        let l70 = i32::from(*base.add(8).cast::<u8>());
                                        _rt::bool_lift(l70 as u8)
                                    };
                                    WitNode::PrimBool(e78)
                                }
                                20 => {
                                    let e78 = {
                                        let l71 = *base.add(8).cast::<*mut u8>();
                                        let l72 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len73 = l72;
                                        let bytes73 = _rt::Vec::from_raw_parts(
                                            l71.cast(),
                                            len73,
                                            len73,
                                        );
                                        _rt::string_lift(bytes73)
                                    };
                                    WitNode::PrimString(e78)
                                }
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e78 = {
                                        let l74 = *base.add(8).cast::<*mut u8>();
                                        let l75 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len76 = l75;
                                        let bytes76 = _rt::Vec::from_raw_parts(
                                            l74.cast(),
                                            len76,
                                            len76,
                                        );
                                        let l77 = *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        (
                                            Uri {
                                                value: _rt::string_lift(bytes76),
                                            },
                                            l77 as u64,
                                        )
                                    };
                                    WitNode::Handle(e78)
                                }
                            };
                            v78
                        };
                        result79.push(e79);
                    }
                    _rt::cabi_dealloc(
                        base79,
                        len79 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result80 = WitValue { nodes: result79 };
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout29.size() != 0 {
                        _rt::alloc::dealloc(result29.cast(), layout29);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result80
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_type(vnt: &ValueAndType) -> WitType {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec29 = nodes12;
                    let len29 = vec29.len();
                    let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec29.len() * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result29 = if layout29.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout29);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec29.into_iter().enumerate() {
                        let base = result29
                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                        {
                            let NamedWitTypeNode {
                                name: name13,
                                owner: owner13,
                                type_: type_13,
                            } = e;
                            match name13 {
                                Some(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match owner13 {
                                Some(e) => {
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec15 = e;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match type_13 {
                                WitTypeNode::RecordType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(t16_1);
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec21 = e;
                                    let len21 = vec21.len();
                                    let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec21.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result21 = if layout21.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout21);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec21.into_iter().enumerate() {
                                        let base = result21
                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t19_0, t19_1) = e;
                                            let vec20 = t19_0;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len20;
                                            *base.add(0).cast::<*mut u8>() = ptr20.cast_mut();
                                            match t19_1 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result21;
                                    cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec23 = e;
                                    let len23 = vec23.len();
                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec23.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result23 = if layout23.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout23);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec23.into_iter().enumerate() {
                                        let base = result23
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec22 = e;
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base.add(0).cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len23;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result23;
                                    cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec25 = e;
                                    let len25 = vec25.len();
                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec25.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result25 = if layout25.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout25);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec25.into_iter().enumerate() {
                                        let base = result25
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec24 = e;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base.add(0).cast::<*mut u8>() = ptr24.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len25;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result25;
                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec26 = e;
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let (t27_0, t27_1) = e;
                                    match t27_0 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t27_1 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (21i32) as u8;
                                    let (t28_0, t28_1) = e;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t28_0);
                                    *base
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (t28_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr30 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "extract-type"]
                        fn wit_import31(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import31(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import31(result11, len11, result29, len29, ptr30) };
                    let l32 = *ptr30.add(0).cast::<*mut u8>();
                    let l33 = *ptr30
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base82 = l32;
                    let len82 = l33;
                    let mut result82 = _rt::Vec::with_capacity(len82);
                    for i in 0..len82 {
                        let base = base82
                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                        let e82 = {
                            let l34 = i32::from(*base.add(0).cast::<u8>());
                            let l38 = i32::from(
                                *base
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l42 = i32::from(
                                *base
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let v81 = match l42 {
                                0 => {
                                    let e81 = {
                                        let l43 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l44 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base49 = l43;
                                        let len49 = l44;
                                        let mut result49 = _rt::Vec::with_capacity(len49);
                                        for i in 0..len49 {
                                            let base = base49
                                                .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                            let e49 = {
                                                let l45 = *base.add(0).cast::<*mut u8>();
                                                let l46 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                let l48 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                (_rt::string_lift(bytes47), l48)
                                            };
                                            result49.push(e49);
                                        }
                                        _rt::cabi_dealloc(
                                            base49,
                                            len49 * (3 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result49
                                    };
                                    WitTypeNode::RecordType(e81)
                                }
                                1 => {
                                    let e81 = {
                                        let l50 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l51 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base57 = l50;
                                        let len57 = l51;
                                        let mut result57 = _rt::Vec::with_capacity(len57);
                                        for i in 0..len57 {
                                            let base = base57
                                                .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e57 = {
                                                let l52 = *base.add(0).cast::<*mut u8>();
                                                let l53 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                let l55 = i32::from(
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                (
                                                    _rt::string_lift(bytes54),
                                                    match l55 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l56 = *base
                                                                    .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i32>();
                                                                l56
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                )
                                            };
                                            result57.push(e57);
                                        }
                                        _rt::cabi_dealloc(
                                            base57,
                                            len57 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result57
                                    };
                                    WitTypeNode::VariantType(e81)
                                }
                                2 => {
                                    let e81 = {
                                        let l58 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l59 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base63 = l58;
                                        let len63 = l59;
                                        let mut result63 = _rt::Vec::with_capacity(len63);
                                        for i in 0..len63 {
                                            let base = base63
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e63 = {
                                                let l60 = *base.add(0).cast::<*mut u8>();
                                                let l61 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            result63.push(e63);
                                        }
                                        _rt::cabi_dealloc(
                                            base63,
                                            len63 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result63
                                    };
                                    WitTypeNode::EnumType(e81)
                                }
                                3 => {
                                    let e81 = {
                                        let l64 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l65 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base69 = l64;
                                        let len69 = l65;
                                        let mut result69 = _rt::Vec::with_capacity(len69);
                                        for i in 0..len69 {
                                            let base = base69
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e69 = {
                                                let l66 = *base.add(0).cast::<*mut u8>();
                                                let l67 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                _rt::string_lift(bytes68)
                                            };
                                            result69.push(e69);
                                        }
                                        _rt::cabi_dealloc(
                                            base69,
                                            len69 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result69
                                    };
                                    WitTypeNode::FlagsType(e81)
                                }
                                4 => {
                                    let e81 = {
                                        let l70 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l71 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len72 = l71;
                                        _rt::Vec::from_raw_parts(l70.cast(), len72, len72)
                                    };
                                    WitTypeNode::TupleType(e81)
                                }
                                5 => {
                                    let e81 = {
                                        let l73 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        l73
                                    };
                                    WitTypeNode::ListType(e81)
                                }
                                6 => {
                                    let e81 = {
                                        let l74 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        l74
                                    };
                                    WitTypeNode::OptionType(e81)
                                }
                                7 => {
                                    let e81 = {
                                        let l75 = i32::from(
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l77 = i32::from(
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        (
                                            match l75 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l76 = *base
                                                            .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i32>();
                                                        l76
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            match l77 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l78 = *base
                                                            .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i32>();
                                                        l78
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitTypeNode::ResultType(e81)
                                }
                                8 => WitTypeNode::PrimU8Type,
                                9 => WitTypeNode::PrimU16Type,
                                10 => WitTypeNode::PrimU32Type,
                                11 => WitTypeNode::PrimU64Type,
                                12 => WitTypeNode::PrimS8Type,
                                13 => WitTypeNode::PrimS16Type,
                                14 => WitTypeNode::PrimS32Type,
                                15 => WitTypeNode::PrimS64Type,
                                16 => WitTypeNode::PrimF32Type,
                                17 => WitTypeNode::PrimF64Type,
                                18 => WitTypeNode::PrimCharType,
                                19 => WitTypeNode::PrimBoolType,
                                20 => WitTypeNode::PrimStringType,
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e81 = {
                                        let l79 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l80 = i32::from(
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        (l79 as u64, ResourceMode::_lift(l80 as u8))
                                    };
                                    WitTypeNode::HandleType(e81)
                                }
                            };
                            NamedWitTypeNode {
                                name: match l34 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l35 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l36 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len37 = l36;
                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                l35.cast(),
                                                len37,
                                                len37,
                                            );
                                            _rt::string_lift(bytes37)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                owner: match l38 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l39 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l40 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len41 = l40;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                l39.cast(),
                                                len41,
                                                len41,
                                            );
                                            _rt::string_lift(bytes41)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                type_: v81,
                            }
                        };
                        result82.push(e82);
                    }
                    _rt::cabi_dealloc(
                        base82,
                        len82 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result83 = WitType { nodes: result82 };
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout29.size() != 0 {
                        _rt::alloc::dealloc(result29.cast(), layout29);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result83
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
        }
        /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
        /// time.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A monotonic clock is a clock which has an unspecified initial value, and
        /// successive reads of the clock will produce non-decreasing values.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// has occurred.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` that will resolve after the specified duration has
            /// elapsed from the time this function is invoked.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` represents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// This function traps if either:
            /// - the list is empty, or:
            /// - the list contains more elements than can be indexed with a `u32` value.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being ready for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod api {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod oplog_processor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AccountId = super::super::super::super::golem::api::host::AccountId;
                pub type OplogIndex = super::super::super::super::golem::api::host::OplogIndex;
                pub type WorkerMetadata = super::super::super::super::golem::api::host::WorkerMetadata;
                pub type OplogEntry = super::super::super::super::golem::api::oplog::OplogEntry;
                pub type ComponentId = super::super::super::super::golem::rpc::types::ComponentId;
                pub type WorkerId = super::super::super::super::golem::rpc::types::WorkerId;
                #[derive(Clone)]
                pub struct AccountInfo {
                    pub account_id: AccountId,
                }
                impl ::core::fmt::Debug for AccountInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AccountInfo")
                            .field("account-id", &self.account_id)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_process_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l4 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base11 = l3;
                    let len11 = l4;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e11 = {
                            let l5 = *base.add(0).cast::<*mut u8>();
                            let l6 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l9 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(
                                l8.cast(),
                                len10,
                                len10,
                            );
                            (_rt::string_lift(bytes7), _rt::string_lift(bytes10))
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(
                        base11,
                        len11 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l12 = *arg0
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l13 = *arg0
                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l14 = *arg0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l15 = *arg0
                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l16 = *arg0
                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l17 = *arg0
                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len18 = l17;
                    let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                    let l19 = *arg0
                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l20 = *arg0
                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l21 = *arg0
                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l22 = *arg0
                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len23 = l22;
                    let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);
                    let l24 = *arg0
                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l25 = *arg0
                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base29 = l24;
                    let len29 = l25;
                    let mut result29 = _rt::Vec::with_capacity(len29);
                    for i in 0..len29 {
                        let base = base29
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e29 = {
                            let l26 = *base.add(0).cast::<*mut u8>();
                            let l27 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len28 = l27;
                            let bytes28 = _rt::Vec::from_raw_parts(
                                l26.cast(),
                                len28,
                                len28,
                            );
                            _rt::string_lift(bytes28)
                        };
                        result29.push(e29);
                    }
                    _rt::cabi_dealloc(
                        base29,
                        len29 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l30 = *arg0
                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l31 = *arg0
                        .add(48 + 11 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base38 = l30;
                    let len38 = l31;
                    let mut result38 = _rt::Vec::with_capacity(len38);
                    for i in 0..len38 {
                        let base = base38
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e38 = {
                            let l32 = *base.add(0).cast::<*mut u8>();
                            let l33 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len34 = l33;
                            let bytes34 = _rt::Vec::from_raw_parts(
                                l32.cast(),
                                len34,
                                len34,
                            );
                            let l35 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l36 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len37 = l36;
                            let bytes37 = _rt::Vec::from_raw_parts(
                                l35.cast(),
                                len37,
                                len37,
                            );
                            (_rt::string_lift(bytes34), _rt::string_lift(bytes37))
                        };
                        result38.push(e38);
                    }
                    _rt::cabi_dealloc(
                        base38,
                        len38 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l39 = *arg0
                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l40 = *arg0
                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base47 = l39;
                    let len47 = l40;
                    let mut result47 = _rt::Vec::with_capacity(len47);
                    for i in 0..len47 {
                        let base = base47
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e47 = {
                            let l41 = *base.add(0).cast::<*mut u8>();
                            let l42 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len43 = l42;
                            let bytes43 = _rt::Vec::from_raw_parts(
                                l41.cast(),
                                len43,
                                len43,
                            );
                            let l44 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l45 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len46 = l45;
                            let bytes46 = _rt::Vec::from_raw_parts(
                                l44.cast(),
                                len46,
                                len46,
                            );
                            (_rt::string_lift(bytes43), _rt::string_lift(bytes46))
                        };
                        result47.push(e47);
                    }
                    _rt::cabi_dealloc(
                        base47,
                        len47 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l48 = i32::from(
                        *arg0
                            .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l49 = *arg0
                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l50 = *arg0
                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l51 = *arg0
                        .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l52 = *arg0
                        .add(80 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l53 = *arg0
                        .add(80 + 15 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base633 = l52;
                    let len633 = l53;
                    let mut result633 = _rt::Vec::with_capacity(len633);
                    for i in 0..len633 {
                        let base = base633
                            .add(i * (104 + 12 * ::core::mem::size_of::<*const u8>()));
                        let e633 = {
                            let l54 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::golem::api::oplog::OplogEntry as V632;
                            let v632 = match l54 {
                                0 => {
                                    let e632 = {
                                        let l55 = *base.add(8).cast::<i64>();
                                        let l56 = *base.add(16).cast::<i32>();
                                        let l57 = *base.add(24).cast::<i64>();
                                        let l58 = *base.add(32).cast::<i64>();
                                        let l59 = *base.add(40).cast::<*mut u8>();
                                        let l60 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len61 = l60;
                                        let bytes61 = _rt::Vec::from_raw_parts(
                                            l59.cast(),
                                            len61,
                                            len61,
                                        );
                                        let l62 = *base
                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l63 = *base
                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l64 = *base
                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base68 = l63;
                                        let len68 = l64;
                                        let mut result68 = _rt::Vec::with_capacity(len68);
                                        for i in 0..len68 {
                                            let base = base68
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e68 = {
                                                let l65 = *base.add(0).cast::<*mut u8>();
                                                let l66 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            result68.push(e68);
                                        }
                                        _rt::cabi_dealloc(
                                            base68,
                                            len68 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l69 = *base
                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l70 = *base
                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base77 = l69;
                                        let len77 = l70;
                                        let mut result77 = _rt::Vec::with_capacity(len77);
                                        for i in 0..len77 {
                                            let base = base77
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e77 = {
                                                let l71 = *base.add(0).cast::<*mut u8>();
                                                let l72 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                let l74 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                (_rt::string_lift(bytes73), _rt::string_lift(bytes76))
                                            };
                                            result77.push(e77);
                                        }
                                        _rt::cabi_dealloc(
                                            base77,
                                            len77 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l78 = *base
                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l79 = *base
                                            .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len80 = l79;
                                        let bytes80 = _rt::Vec::from_raw_parts(
                                            l78.cast(),
                                            len80,
                                            len80,
                                        );
                                        let l81 = *base
                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l82 = *base
                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l83 = i32::from(
                                            *base
                                                .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l89 = *base
                                            .add(88 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l90 = *base
                                            .add(96 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l91 = *base
                                            .add(104 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l92 = *base
                                            .add(104 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base110 = l91;
                                        let len110 = l92;
                                        let mut result110 = _rt::Vec::with_capacity(len110);
                                        for i in 0..len110 {
                                            let base = base110
                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                            let e110 = {
                                                let l93 = *base.add(0).cast::<i64>();
                                                let l94 = *base.add(8).cast::<i64>();
                                                let l95 = *base.add(16).cast::<*mut u8>();
                                                let l96 = *base
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len97 = l96;
                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                    l95.cast(),
                                                    len97,
                                                    len97,
                                                );
                                                let l98 = *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l99 = *base
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );
                                                let l101 = *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l102 = *base
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base109 = l101;
                                                let len109 = l102;
                                                let mut result109 = _rt::Vec::with_capacity(len109);
                                                for i in 0..len109 {
                                                    let base = base109
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e109 = {
                                                        let l103 = *base.add(0).cast::<*mut u8>();
                                                        let l104 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len105 = l104;
                                                        let bytes105 = _rt::Vec::from_raw_parts(
                                                            l103.cast(),
                                                            len105,
                                                            len105,
                                                        );
                                                        let l106 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l107 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len108 = l107;
                                                        let bytes108 = _rt::Vec::from_raw_parts(
                                                            l106.cast(),
                                                            len108,
                                                            len108,
                                                        );
                                                        (_rt::string_lift(bytes105), _rt::string_lift(bytes108))
                                                    };
                                                    result109.push(e109);
                                                }
                                                _rt::cabi_dealloc(
                                                    base109,
                                                    len109 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    installation_id: super::super::super::super::golem::rpc::types::Uuid {
                                                        high_bits: l93 as u64,
                                                        low_bits: l94 as u64,
                                                    },
                                                    name: _rt::string_lift(bytes97),
                                                    version: _rt::string_lift(bytes100),
                                                    parameters: result109,
                                                }
                                            };
                                            result110.push(e110);
                                        }
                                        _rt::cabi_dealloc(
                                            base110,
                                            len110 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        super::super::super::super::golem::api::oplog::CreateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l55 as u64,
                                                nanoseconds: l56 as u32,
                                            },
                                            worker_id: super::super::super::super::golem::rpc::types::WorkerId {
                                                component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                                    uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                        high_bits: l57 as u64,
                                                        low_bits: l58 as u64,
                                                    },
                                                },
                                                worker_name: _rt::string_lift(bytes61),
                                            },
                                            component_version: l62 as u64,
                                            args: result68,
                                            env: result77,
                                            created_by: super::super::super::super::golem::api::host::AccountId {
                                                value: _rt::string_lift(bytes80),
                                            },
                                            project_id: super::super::super::super::golem::api::host::ProjectId {
                                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                    high_bits: l81 as u64,
                                                    low_bits: l82 as u64,
                                                },
                                            },
                                            parent: match l83 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l84 = *base
                                                            .add(72 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l85 = *base
                                                            .add(80 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l86 = *base
                                                            .add(88 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l87 = *base
                                                            .add(88 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len88 = l87;
                                                        let bytes88 = _rt::Vec::from_raw_parts(
                                                            l86.cast(),
                                                            len88,
                                                            len88,
                                                        );
                                                        super::super::super::super::golem::rpc::types::WorkerId {
                                                            component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l84 as u64,
                                                                    low_bits: l85 as u64,
                                                                },
                                                            },
                                                            worker_name: _rt::string_lift(bytes88),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            component_size: l89 as u64,
                                            initial_total_linear_memory_size: l90 as u64,
                                            initial_active_plugins: result110,
                                        }
                                    };
                                    V632::Create(e632)
                                }
                                1 => {
                                    let e632 = {
                                        let l111 = *base.add(8).cast::<i64>();
                                        let l112 = *base.add(16).cast::<i32>();
                                        let l113 = *base.add(24).cast::<*mut u8>();
                                        let l114 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len115 = l114;
                                        let bytes115 = _rt::Vec::from_raw_parts(
                                            l113.cast(),
                                            len115,
                                            len115,
                                        );
                                        let l116 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l117 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base163 = l116;
                                        let len163 = l117;
                                        let mut result163 = _rt::Vec::with_capacity(len163);
                                        for i in 0..len163 {
                                            let base = base163
                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e163 = {
                                                let l118 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V162;
                                                let v162 = match l118 {
                                                    0 => {
                                                        let e162 = {
                                                            let l119 = *base.add(8).cast::<*mut u8>();
                                                            let l120 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len121 = l120;
                                                            _rt::Vec::from_raw_parts(l119.cast(), len121, len121)
                                                        };
                                                        V162::RecordValue(e162)
                                                    }
                                                    1 => {
                                                        let e162 = {
                                                            let l122 = *base.add(8).cast::<i32>();
                                                            let l123 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l122 as u32,
                                                                match l123 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l124 = *base.add(16).cast::<i32>();
                                                                            l124
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V162::VariantValue(e162)
                                                    }
                                                    2 => {
                                                        let e162 = {
                                                            let l125 = *base.add(8).cast::<i32>();
                                                            l125 as u32
                                                        };
                                                        V162::EnumValue(e162)
                                                    }
                                                    3 => {
                                                        let e162 = {
                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                            let l127 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base129 = l126;
                                                            let len129 = l127;
                                                            let mut result129 = _rt::Vec::with_capacity(len129);
                                                            for i in 0..len129 {
                                                                let base = base129.add(i * 1);
                                                                let e129 = {
                                                                    let l128 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l128 as u8)
                                                                };
                                                                result129.push(e129);
                                                            }
                                                            _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                            result129
                                                        };
                                                        V162::FlagsValue(e162)
                                                    }
                                                    4 => {
                                                        let e162 = {
                                                            let l130 = *base.add(8).cast::<*mut u8>();
                                                            let l131 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len132 = l131;
                                                            _rt::Vec::from_raw_parts(l130.cast(), len132, len132)
                                                        };
                                                        V162::TupleValue(e162)
                                                    }
                                                    5 => {
                                                        let e162 = {
                                                            let l133 = *base.add(8).cast::<*mut u8>();
                                                            let l134 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len135 = l134;
                                                            _rt::Vec::from_raw_parts(l133.cast(), len135, len135)
                                                        };
                                                        V162::ListValue(e162)
                                                    }
                                                    6 => {
                                                        let e162 = {
                                                            let l136 = i32::from(*base.add(8).cast::<u8>());
                                                            match l136 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l137 = *base.add(12).cast::<i32>();
                                                                        l137
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V162::OptionValue(e162)
                                                    }
                                                    7 => {
                                                        let e162 = {
                                                            let l138 = i32::from(*base.add(8).cast::<u8>());
                                                            match l138 {
                                                                0 => {
                                                                    let e = {
                                                                        let l139 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l139 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l140 = *base.add(16).cast::<i32>();
                                                                                    l140
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l141 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l141 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l142 = *base.add(16).cast::<i32>();
                                                                                    l142
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V162::ResultValue(e162)
                                                    }
                                                    8 => {
                                                        let e162 = {
                                                            let l143 = i32::from(*base.add(8).cast::<u8>());
                                                            l143 as u8
                                                        };
                                                        V162::PrimU8(e162)
                                                    }
                                                    9 => {
                                                        let e162 = {
                                                            let l144 = i32::from(*base.add(8).cast::<u16>());
                                                            l144 as u16
                                                        };
                                                        V162::PrimU16(e162)
                                                    }
                                                    10 => {
                                                        let e162 = {
                                                            let l145 = *base.add(8).cast::<i32>();
                                                            l145 as u32
                                                        };
                                                        V162::PrimU32(e162)
                                                    }
                                                    11 => {
                                                        let e162 = {
                                                            let l146 = *base.add(8).cast::<i64>();
                                                            l146 as u64
                                                        };
                                                        V162::PrimU64(e162)
                                                    }
                                                    12 => {
                                                        let e162 = {
                                                            let l147 = i32::from(*base.add(8).cast::<i8>());
                                                            l147 as i8
                                                        };
                                                        V162::PrimS8(e162)
                                                    }
                                                    13 => {
                                                        let e162 = {
                                                            let l148 = i32::from(*base.add(8).cast::<i16>());
                                                            l148 as i16
                                                        };
                                                        V162::PrimS16(e162)
                                                    }
                                                    14 => {
                                                        let e162 = {
                                                            let l149 = *base.add(8).cast::<i32>();
                                                            l149
                                                        };
                                                        V162::PrimS32(e162)
                                                    }
                                                    15 => {
                                                        let e162 = {
                                                            let l150 = *base.add(8).cast::<i64>();
                                                            l150
                                                        };
                                                        V162::PrimS64(e162)
                                                    }
                                                    16 => {
                                                        let e162 = {
                                                            let l151 = *base.add(8).cast::<f32>();
                                                            l151
                                                        };
                                                        V162::PrimFloat32(e162)
                                                    }
                                                    17 => {
                                                        let e162 = {
                                                            let l152 = *base.add(8).cast::<f64>();
                                                            l152
                                                        };
                                                        V162::PrimFloat64(e162)
                                                    }
                                                    18 => {
                                                        let e162 = {
                                                            let l153 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l153 as u32)
                                                        };
                                                        V162::PrimChar(e162)
                                                    }
                                                    19 => {
                                                        let e162 = {
                                                            let l154 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l154 as u8)
                                                        };
                                                        V162::PrimBool(e162)
                                                    }
                                                    20 => {
                                                        let e162 = {
                                                            let l155 = *base.add(8).cast::<*mut u8>();
                                                            let l156 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len157 = l156;
                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                l155.cast(),
                                                                len157,
                                                                len157,
                                                            );
                                                            _rt::string_lift(bytes157)
                                                        };
                                                        V162::PrimString(e162)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e162 = {
                                                            let l158 = *base.add(8).cast::<*mut u8>();
                                                            let l159 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len160 = l159;
                                                            let bytes160 = _rt::Vec::from_raw_parts(
                                                                l158.cast(),
                                                                len160,
                                                                len160,
                                                            );
                                                            let l161 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes160),
                                                                },
                                                                l161 as u64,
                                                            )
                                                        };
                                                        V162::Handle(e162)
                                                    }
                                                };
                                                v162
                                            };
                                            result163.push(e163);
                                        }
                                        _rt::cabi_dealloc(
                                            base163,
                                            len163 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let l164 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l165 = *base
                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base211 = l164;
                                        let len211 = l165;
                                        let mut result211 = _rt::Vec::with_capacity(len211);
                                        for i in 0..len211 {
                                            let base = base211
                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e211 = {
                                                let l166 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V210;
                                                let v210 = match l166 {
                                                    0 => {
                                                        let e210 = {
                                                            let l167 = *base.add(8).cast::<*mut u8>();
                                                            let l168 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len169 = l168;
                                                            _rt::Vec::from_raw_parts(l167.cast(), len169, len169)
                                                        };
                                                        V210::RecordValue(e210)
                                                    }
                                                    1 => {
                                                        let e210 = {
                                                            let l170 = *base.add(8).cast::<i32>();
                                                            let l171 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l170 as u32,
                                                                match l171 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l172 = *base.add(16).cast::<i32>();
                                                                            l172
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V210::VariantValue(e210)
                                                    }
                                                    2 => {
                                                        let e210 = {
                                                            let l173 = *base.add(8).cast::<i32>();
                                                            l173 as u32
                                                        };
                                                        V210::EnumValue(e210)
                                                    }
                                                    3 => {
                                                        let e210 = {
                                                            let l174 = *base.add(8).cast::<*mut u8>();
                                                            let l175 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base177 = l174;
                                                            let len177 = l175;
                                                            let mut result177 = _rt::Vec::with_capacity(len177);
                                                            for i in 0..len177 {
                                                                let base = base177.add(i * 1);
                                                                let e177 = {
                                                                    let l176 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l176 as u8)
                                                                };
                                                                result177.push(e177);
                                                            }
                                                            _rt::cabi_dealloc(base177, len177 * 1, 1);
                                                            result177
                                                        };
                                                        V210::FlagsValue(e210)
                                                    }
                                                    4 => {
                                                        let e210 = {
                                                            let l178 = *base.add(8).cast::<*mut u8>();
                                                            let l179 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len180 = l179;
                                                            _rt::Vec::from_raw_parts(l178.cast(), len180, len180)
                                                        };
                                                        V210::TupleValue(e210)
                                                    }
                                                    5 => {
                                                        let e210 = {
                                                            let l181 = *base.add(8).cast::<*mut u8>();
                                                            let l182 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len183 = l182;
                                                            _rt::Vec::from_raw_parts(l181.cast(), len183, len183)
                                                        };
                                                        V210::ListValue(e210)
                                                    }
                                                    6 => {
                                                        let e210 = {
                                                            let l184 = i32::from(*base.add(8).cast::<u8>());
                                                            match l184 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l185 = *base.add(12).cast::<i32>();
                                                                        l185
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V210::OptionValue(e210)
                                                    }
                                                    7 => {
                                                        let e210 = {
                                                            let l186 = i32::from(*base.add(8).cast::<u8>());
                                                            match l186 {
                                                                0 => {
                                                                    let e = {
                                                                        let l187 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l187 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l188 = *base.add(16).cast::<i32>();
                                                                                    l188
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l189 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l189 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l190 = *base.add(16).cast::<i32>();
                                                                                    l190
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V210::ResultValue(e210)
                                                    }
                                                    8 => {
                                                        let e210 = {
                                                            let l191 = i32::from(*base.add(8).cast::<u8>());
                                                            l191 as u8
                                                        };
                                                        V210::PrimU8(e210)
                                                    }
                                                    9 => {
                                                        let e210 = {
                                                            let l192 = i32::from(*base.add(8).cast::<u16>());
                                                            l192 as u16
                                                        };
                                                        V210::PrimU16(e210)
                                                    }
                                                    10 => {
                                                        let e210 = {
                                                            let l193 = *base.add(8).cast::<i32>();
                                                            l193 as u32
                                                        };
                                                        V210::PrimU32(e210)
                                                    }
                                                    11 => {
                                                        let e210 = {
                                                            let l194 = *base.add(8).cast::<i64>();
                                                            l194 as u64
                                                        };
                                                        V210::PrimU64(e210)
                                                    }
                                                    12 => {
                                                        let e210 = {
                                                            let l195 = i32::from(*base.add(8).cast::<i8>());
                                                            l195 as i8
                                                        };
                                                        V210::PrimS8(e210)
                                                    }
                                                    13 => {
                                                        let e210 = {
                                                            let l196 = i32::from(*base.add(8).cast::<i16>());
                                                            l196 as i16
                                                        };
                                                        V210::PrimS16(e210)
                                                    }
                                                    14 => {
                                                        let e210 = {
                                                            let l197 = *base.add(8).cast::<i32>();
                                                            l197
                                                        };
                                                        V210::PrimS32(e210)
                                                    }
                                                    15 => {
                                                        let e210 = {
                                                            let l198 = *base.add(8).cast::<i64>();
                                                            l198
                                                        };
                                                        V210::PrimS64(e210)
                                                    }
                                                    16 => {
                                                        let e210 = {
                                                            let l199 = *base.add(8).cast::<f32>();
                                                            l199
                                                        };
                                                        V210::PrimFloat32(e210)
                                                    }
                                                    17 => {
                                                        let e210 = {
                                                            let l200 = *base.add(8).cast::<f64>();
                                                            l200
                                                        };
                                                        V210::PrimFloat64(e210)
                                                    }
                                                    18 => {
                                                        let e210 = {
                                                            let l201 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l201 as u32)
                                                        };
                                                        V210::PrimChar(e210)
                                                    }
                                                    19 => {
                                                        let e210 = {
                                                            let l202 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l202 as u8)
                                                        };
                                                        V210::PrimBool(e210)
                                                    }
                                                    20 => {
                                                        let e210 = {
                                                            let l203 = *base.add(8).cast::<*mut u8>();
                                                            let l204 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len205 = l204;
                                                            let bytes205 = _rt::Vec::from_raw_parts(
                                                                l203.cast(),
                                                                len205,
                                                                len205,
                                                            );
                                                            _rt::string_lift(bytes205)
                                                        };
                                                        V210::PrimString(e210)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e210 = {
                                                            let l206 = *base.add(8).cast::<*mut u8>();
                                                            let l207 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len208 = l207;
                                                            let bytes208 = _rt::Vec::from_raw_parts(
                                                                l206.cast(),
                                                                len208,
                                                                len208,
                                                            );
                                                            let l209 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes208),
                                                                },
                                                                l209 as u64,
                                                            )
                                                        };
                                                        V210::Handle(e210)
                                                    }
                                                };
                                                v210
                                            };
                                            result211.push(e211);
                                        }
                                        _rt::cabi_dealloc(
                                            base211,
                                            len211 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let l212 = i32::from(
                                            *base
                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::api::oplog::WrappedFunctionType as V215;
                                        let v215 = match l212 {
                                            0 => V215::ReadLocal,
                                            1 => V215::WriteLocal,
                                            2 => V215::ReadRemote,
                                            3 => V215::WriteRemote,
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e215 = {
                                                    let l213 = i32::from(
                                                        *base
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l213 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l214 = *base
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i64>();
                                                                l214 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                V215::WriteRemoteBatched(e215)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::ImportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l111 as u64,
                                                nanoseconds: l112 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes115),
                                            request: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result163,
                                            },
                                            response: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result211,
                                            },
                                            wrapped_function_type: v215,
                                        }
                                    };
                                    V632::ImportedFunctionInvoked(e632)
                                }
                                2 => {
                                    let e632 = {
                                        let l216 = *base.add(8).cast::<i64>();
                                        let l217 = *base.add(16).cast::<i32>();
                                        let l218 = *base.add(24).cast::<*mut u8>();
                                        let l219 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len220 = l219;
                                        let bytes220 = _rt::Vec::from_raw_parts(
                                            l218.cast(),
                                            len220,
                                            len220,
                                        );
                                        let l221 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l222 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base271 = l221;
                                        let len271 = l222;
                                        let mut result271 = _rt::Vec::with_capacity(len271);
                                        for i in 0..len271 {
                                            let base = base271
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e271 = {
                                                let l223 = *base.add(0).cast::<*mut u8>();
                                                let l224 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base270 = l223;
                                                let len270 = l224;
                                                let mut result270 = _rt::Vec::with_capacity(len270);
                                                for i in 0..len270 {
                                                    let base = base270
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e270 = {
                                                        let l225 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::rpc::types::WitNode as V269;
                                                        let v269 = match l225 {
                                                            0 => {
                                                                let e269 = {
                                                                    let l226 = *base.add(8).cast::<*mut u8>();
                                                                    let l227 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len228 = l227;
                                                                    _rt::Vec::from_raw_parts(l226.cast(), len228, len228)
                                                                };
                                                                V269::RecordValue(e269)
                                                            }
                                                            1 => {
                                                                let e269 = {
                                                                    let l229 = *base.add(8).cast::<i32>();
                                                                    let l230 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l229 as u32,
                                                                        match l230 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l231 = *base.add(16).cast::<i32>();
                                                                                    l231
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                V269::VariantValue(e269)
                                                            }
                                                            2 => {
                                                                let e269 = {
                                                                    let l232 = *base.add(8).cast::<i32>();
                                                                    l232 as u32
                                                                };
                                                                V269::EnumValue(e269)
                                                            }
                                                            3 => {
                                                                let e269 = {
                                                                    let l233 = *base.add(8).cast::<*mut u8>();
                                                                    let l234 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base236 = l233;
                                                                    let len236 = l234;
                                                                    let mut result236 = _rt::Vec::with_capacity(len236);
                                                                    for i in 0..len236 {
                                                                        let base = base236.add(i * 1);
                                                                        let e236 = {
                                                                            let l235 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l235 as u8)
                                                                        };
                                                                        result236.push(e236);
                                                                    }
                                                                    _rt::cabi_dealloc(base236, len236 * 1, 1);
                                                                    result236
                                                                };
                                                                V269::FlagsValue(e269)
                                                            }
                                                            4 => {
                                                                let e269 = {
                                                                    let l237 = *base.add(8).cast::<*mut u8>();
                                                                    let l238 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len239 = l238;
                                                                    _rt::Vec::from_raw_parts(l237.cast(), len239, len239)
                                                                };
                                                                V269::TupleValue(e269)
                                                            }
                                                            5 => {
                                                                let e269 = {
                                                                    let l240 = *base.add(8).cast::<*mut u8>();
                                                                    let l241 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len242 = l241;
                                                                    _rt::Vec::from_raw_parts(l240.cast(), len242, len242)
                                                                };
                                                                V269::ListValue(e269)
                                                            }
                                                            6 => {
                                                                let e269 = {
                                                                    let l243 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l243 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l244 = *base.add(12).cast::<i32>();
                                                                                l244
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V269::OptionValue(e269)
                                                            }
                                                            7 => {
                                                                let e269 = {
                                                                    let l245 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l245 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l246 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l246 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l247 = *base.add(16).cast::<i32>();
                                                                                            l247
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l248 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l248 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l249 = *base.add(16).cast::<i32>();
                                                                                            l249
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V269::ResultValue(e269)
                                                            }
                                                            8 => {
                                                                let e269 = {
                                                                    let l250 = i32::from(*base.add(8).cast::<u8>());
                                                                    l250 as u8
                                                                };
                                                                V269::PrimU8(e269)
                                                            }
                                                            9 => {
                                                                let e269 = {
                                                                    let l251 = i32::from(*base.add(8).cast::<u16>());
                                                                    l251 as u16
                                                                };
                                                                V269::PrimU16(e269)
                                                            }
                                                            10 => {
                                                                let e269 = {
                                                                    let l252 = *base.add(8).cast::<i32>();
                                                                    l252 as u32
                                                                };
                                                                V269::PrimU32(e269)
                                                            }
                                                            11 => {
                                                                let e269 = {
                                                                    let l253 = *base.add(8).cast::<i64>();
                                                                    l253 as u64
                                                                };
                                                                V269::PrimU64(e269)
                                                            }
                                                            12 => {
                                                                let e269 = {
                                                                    let l254 = i32::from(*base.add(8).cast::<i8>());
                                                                    l254 as i8
                                                                };
                                                                V269::PrimS8(e269)
                                                            }
                                                            13 => {
                                                                let e269 = {
                                                                    let l255 = i32::from(*base.add(8).cast::<i16>());
                                                                    l255 as i16
                                                                };
                                                                V269::PrimS16(e269)
                                                            }
                                                            14 => {
                                                                let e269 = {
                                                                    let l256 = *base.add(8).cast::<i32>();
                                                                    l256
                                                                };
                                                                V269::PrimS32(e269)
                                                            }
                                                            15 => {
                                                                let e269 = {
                                                                    let l257 = *base.add(8).cast::<i64>();
                                                                    l257
                                                                };
                                                                V269::PrimS64(e269)
                                                            }
                                                            16 => {
                                                                let e269 = {
                                                                    let l258 = *base.add(8).cast::<f32>();
                                                                    l258
                                                                };
                                                                V269::PrimFloat32(e269)
                                                            }
                                                            17 => {
                                                                let e269 = {
                                                                    let l259 = *base.add(8).cast::<f64>();
                                                                    l259
                                                                };
                                                                V269::PrimFloat64(e269)
                                                            }
                                                            18 => {
                                                                let e269 = {
                                                                    let l260 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l260 as u32)
                                                                };
                                                                V269::PrimChar(e269)
                                                            }
                                                            19 => {
                                                                let e269 = {
                                                                    let l261 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l261 as u8)
                                                                };
                                                                V269::PrimBool(e269)
                                                            }
                                                            20 => {
                                                                let e269 = {
                                                                    let l262 = *base.add(8).cast::<*mut u8>();
                                                                    let l263 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len264 = l263;
                                                                    let bytes264 = _rt::Vec::from_raw_parts(
                                                                        l262.cast(),
                                                                        len264,
                                                                        len264,
                                                                    );
                                                                    _rt::string_lift(bytes264)
                                                                };
                                                                V269::PrimString(e269)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e269 = {
                                                                    let l265 = *base.add(8).cast::<*mut u8>();
                                                                    let l266 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len267 = l266;
                                                                    let bytes267 = _rt::Vec::from_raw_parts(
                                                                        l265.cast(),
                                                                        len267,
                                                                        len267,
                                                                    );
                                                                    let l268 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        super::super::super::super::golem::rpc::types::Uri {
                                                                            value: _rt::string_lift(bytes267),
                                                                        },
                                                                        l268 as u64,
                                                                    )
                                                                };
                                                                V269::Handle(e269)
                                                            }
                                                        };
                                                        v269
                                                    };
                                                    result270.push(e270);
                                                }
                                                _rt::cabi_dealloc(
                                                    base270,
                                                    len270 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                super::super::super::super::golem::rpc::types::WitValue {
                                                    nodes: result270,
                                                }
                                            };
                                            result271.push(e271);
                                        }
                                        _rt::cabi_dealloc(
                                            base271,
                                            len271 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l272 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l273 = *base
                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len274 = l273;
                                        let bytes274 = _rt::Vec::from_raw_parts(
                                            l272.cast(),
                                            len274,
                                            len274,
                                        );
                                        let l275 = *base
                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l276 = *base
                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len277 = l276;
                                        let bytes277 = _rt::Vec::from_raw_parts(
                                            l275.cast(),
                                            len277,
                                            len277,
                                        );
                                        let l278 = *base
                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l279 = *base
                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base283 = l278;
                                        let len283 = l279;
                                        let mut result283 = _rt::Vec::with_capacity(len283);
                                        for i in 0..len283 {
                                            let base = base283
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e283 = {
                                                let l280 = *base.add(0).cast::<*mut u8>();
                                                let l281 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len282 = l281;
                                                let bytes282 = _rt::Vec::from_raw_parts(
                                                    l280.cast(),
                                                    len282,
                                                    len282,
                                                );
                                                _rt::string_lift(bytes282)
                                            };
                                            result283.push(e283);
                                        }
                                        _rt::cabi_dealloc(
                                            base283,
                                            len283 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l284 = *base
                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l285 = *base
                                            .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base317 = l284;
                                        let len317 = l285;
                                        let mut result317 = _rt::Vec::with_capacity(len317);
                                        for i in 0..len317 {
                                            let base = base317
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e317 = {
                                                let l286 = *base.add(0).cast::<*mut u8>();
                                                let l287 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base316 = l286;
                                                let len316 = l287;
                                                let mut result316 = _rt::Vec::with_capacity(len316);
                                                for i in 0..len316 {
                                                    let base = base316
                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                    let e316 = {
                                                        let l288 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::api::oplog::SpanData as V315;
                                                        let v315 = match l288 {
                                                            0 => {
                                                                let e315 = {
                                                                    let l289 = *base.add(8).cast::<*mut u8>();
                                                                    let l290 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len291 = l290;
                                                                    let bytes291 = _rt::Vec::from_raw_parts(
                                                                        l289.cast(),
                                                                        len291,
                                                                        len291,
                                                                    );
                                                                    let l292 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    let l293 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    let l294 = i32::from(
                                                                        *base
                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l298 = i32::from(
                                                                        *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l300 = *base
                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l301 = *base
                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base310 = l300;
                                                                    let len310 = l301;
                                                                    let mut result310 = _rt::Vec::with_capacity(len310);
                                                                    for i in 0..len310 {
                                                                        let base = base310
                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                        let e310 = {
                                                                            let l302 = *base.add(0).cast::<*mut u8>();
                                                                            let l303 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len304 = l303;
                                                                            let bytes304 = _rt::Vec::from_raw_parts(
                                                                                l302.cast(),
                                                                                len304,
                                                                                len304,
                                                                            );
                                                                            let l305 = i32::from(
                                                                                *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            use super::super::super::super::golem::api::context::AttributeValue as V309;
                                                                            let v309 = match l305 {
                                                                                n => {
                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                    let e309 = {
                                                                                        let l306 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l307 = *base
                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len308 = l307;
                                                                                        let bytes308 = _rt::Vec::from_raw_parts(
                                                                                            l306.cast(),
                                                                                            len308,
                                                                                            len308,
                                                                                        );
                                                                                        _rt::string_lift(bytes308)
                                                                                    };
                                                                                    V309::String(e309)
                                                                                }
                                                                            };
                                                                            super::super::super::super::golem::api::context::Attribute {
                                                                                key: _rt::string_lift(bytes304),
                                                                                value: v309,
                                                                            }
                                                                        };
                                                                        result310.push(e310);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base310,
                                                                        len310 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let l311 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::super::golem::api::oplog::LocalSpanData {
                                                                        span_id: _rt::string_lift(bytes291),
                                                                        start: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                            seconds: l292 as u64,
                                                                            nanoseconds: l293 as u32,
                                                                        },
                                                                        parent: match l294 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l295 = *base
                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l296 = *base
                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len297 = l296;
                                                                                    let bytes297 = _rt::Vec::from_raw_parts(
                                                                                        l295.cast(),
                                                                                        len297,
                                                                                        len297,
                                                                                    );
                                                                                    _rt::string_lift(bytes297)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        linked_context: match l298 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l299 = *base
                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    l299 as u64
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        attributes: result310,
                                                                        inherited: _rt::bool_lift(l311 as u8),
                                                                    }
                                                                };
                                                                V315::LocalSpan(e315)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e315 = {
                                                                    let l312 = *base.add(8).cast::<*mut u8>();
                                                                    let l313 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len314 = l313;
                                                                    let bytes314 = _rt::Vec::from_raw_parts(
                                                                        l312.cast(),
                                                                        len314,
                                                                        len314,
                                                                    );
                                                                    super::super::super::super::golem::api::oplog::ExternalSpanData {
                                                                        span_id: _rt::string_lift(bytes314),
                                                                    }
                                                                };
                                                                V315::ExternalSpan(e315)
                                                            }
                                                        };
                                                        v315
                                                    };
                                                    result316.push(e316);
                                                }
                                                _rt::cabi_dealloc(
                                                    base316,
                                                    len316 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                result316
                                            };
                                            result317.push(e317);
                                        }
                                        _rt::cabi_dealloc(
                                            base317,
                                            len317 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::ExportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l216 as u64,
                                                nanoseconds: l217 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes220),
                                            request: result271,
                                            idempotency_key: _rt::string_lift(bytes274),
                                            trace_id: _rt::string_lift(bytes277),
                                            trace_states: result283,
                                            invocation_context: result317,
                                        }
                                    };
                                    V632::ExportedFunctionInvoked(e632)
                                }
                                3 => {
                                    let e632 = {
                                        let l318 = *base.add(8).cast::<i64>();
                                        let l319 = *base.add(16).cast::<i32>();
                                        let l320 = i32::from(*base.add(24).cast::<u8>());
                                        let l369 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        super::super::super::super::golem::api::oplog::ExportedFunctionCompletedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l318 as u64,
                                                nanoseconds: l319 as u32,
                                            },
                                            response: match l320 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l321 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l322 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base368 = l321;
                                                        let len368 = l322;
                                                        let mut result368 = _rt::Vec::with_capacity(len368);
                                                        for i in 0..len368 {
                                                            let base = base368
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e368 = {
                                                                let l323 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::rpc::types::WitNode as V367;
                                                                let v367 = match l323 {
                                                                    0 => {
                                                                        let e367 = {
                                                                            let l324 = *base.add(8).cast::<*mut u8>();
                                                                            let l325 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len326 = l325;
                                                                            _rt::Vec::from_raw_parts(l324.cast(), len326, len326)
                                                                        };
                                                                        V367::RecordValue(e367)
                                                                    }
                                                                    1 => {
                                                                        let e367 = {
                                                                            let l327 = *base.add(8).cast::<i32>();
                                                                            let l328 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l327 as u32,
                                                                                match l328 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l329 = *base.add(16).cast::<i32>();
                                                                                            l329
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V367::VariantValue(e367)
                                                                    }
                                                                    2 => {
                                                                        let e367 = {
                                                                            let l330 = *base.add(8).cast::<i32>();
                                                                            l330 as u32
                                                                        };
                                                                        V367::EnumValue(e367)
                                                                    }
                                                                    3 => {
                                                                        let e367 = {
                                                                            let l331 = *base.add(8).cast::<*mut u8>();
                                                                            let l332 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base334 = l331;
                                                                            let len334 = l332;
                                                                            let mut result334 = _rt::Vec::with_capacity(len334);
                                                                            for i in 0..len334 {
                                                                                let base = base334.add(i * 1);
                                                                                let e334 = {
                                                                                    let l333 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l333 as u8)
                                                                                };
                                                                                result334.push(e334);
                                                                            }
                                                                            _rt::cabi_dealloc(base334, len334 * 1, 1);
                                                                            result334
                                                                        };
                                                                        V367::FlagsValue(e367)
                                                                    }
                                                                    4 => {
                                                                        let e367 = {
                                                                            let l335 = *base.add(8).cast::<*mut u8>();
                                                                            let l336 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len337 = l336;
                                                                            _rt::Vec::from_raw_parts(l335.cast(), len337, len337)
                                                                        };
                                                                        V367::TupleValue(e367)
                                                                    }
                                                                    5 => {
                                                                        let e367 = {
                                                                            let l338 = *base.add(8).cast::<*mut u8>();
                                                                            let l339 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len340 = l339;
                                                                            _rt::Vec::from_raw_parts(l338.cast(), len340, len340)
                                                                        };
                                                                        V367::ListValue(e367)
                                                                    }
                                                                    6 => {
                                                                        let e367 = {
                                                                            let l341 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l341 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l342 = *base.add(12).cast::<i32>();
                                                                                        l342
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V367::OptionValue(e367)
                                                                    }
                                                                    7 => {
                                                                        let e367 = {
                                                                            let l343 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l343 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l344 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l344 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l345 = *base.add(16).cast::<i32>();
                                                                                                    l345
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l346 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l346 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l347 = *base.add(16).cast::<i32>();
                                                                                                    l347
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V367::ResultValue(e367)
                                                                    }
                                                                    8 => {
                                                                        let e367 = {
                                                                            let l348 = i32::from(*base.add(8).cast::<u8>());
                                                                            l348 as u8
                                                                        };
                                                                        V367::PrimU8(e367)
                                                                    }
                                                                    9 => {
                                                                        let e367 = {
                                                                            let l349 = i32::from(*base.add(8).cast::<u16>());
                                                                            l349 as u16
                                                                        };
                                                                        V367::PrimU16(e367)
                                                                    }
                                                                    10 => {
                                                                        let e367 = {
                                                                            let l350 = *base.add(8).cast::<i32>();
                                                                            l350 as u32
                                                                        };
                                                                        V367::PrimU32(e367)
                                                                    }
                                                                    11 => {
                                                                        let e367 = {
                                                                            let l351 = *base.add(8).cast::<i64>();
                                                                            l351 as u64
                                                                        };
                                                                        V367::PrimU64(e367)
                                                                    }
                                                                    12 => {
                                                                        let e367 = {
                                                                            let l352 = i32::from(*base.add(8).cast::<i8>());
                                                                            l352 as i8
                                                                        };
                                                                        V367::PrimS8(e367)
                                                                    }
                                                                    13 => {
                                                                        let e367 = {
                                                                            let l353 = i32::from(*base.add(8).cast::<i16>());
                                                                            l353 as i16
                                                                        };
                                                                        V367::PrimS16(e367)
                                                                    }
                                                                    14 => {
                                                                        let e367 = {
                                                                            let l354 = *base.add(8).cast::<i32>();
                                                                            l354
                                                                        };
                                                                        V367::PrimS32(e367)
                                                                    }
                                                                    15 => {
                                                                        let e367 = {
                                                                            let l355 = *base.add(8).cast::<i64>();
                                                                            l355
                                                                        };
                                                                        V367::PrimS64(e367)
                                                                    }
                                                                    16 => {
                                                                        let e367 = {
                                                                            let l356 = *base.add(8).cast::<f32>();
                                                                            l356
                                                                        };
                                                                        V367::PrimFloat32(e367)
                                                                    }
                                                                    17 => {
                                                                        let e367 = {
                                                                            let l357 = *base.add(8).cast::<f64>();
                                                                            l357
                                                                        };
                                                                        V367::PrimFloat64(e367)
                                                                    }
                                                                    18 => {
                                                                        let e367 = {
                                                                            let l358 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l358 as u32)
                                                                        };
                                                                        V367::PrimChar(e367)
                                                                    }
                                                                    19 => {
                                                                        let e367 = {
                                                                            let l359 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l359 as u8)
                                                                        };
                                                                        V367::PrimBool(e367)
                                                                    }
                                                                    20 => {
                                                                        let e367 = {
                                                                            let l360 = *base.add(8).cast::<*mut u8>();
                                                                            let l361 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len362 = l361;
                                                                            let bytes362 = _rt::Vec::from_raw_parts(
                                                                                l360.cast(),
                                                                                len362,
                                                                                len362,
                                                                            );
                                                                            _rt::string_lift(bytes362)
                                                                        };
                                                                        V367::PrimString(e367)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e367 = {
                                                                            let l363 = *base.add(8).cast::<*mut u8>();
                                                                            let l364 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len365 = l364;
                                                                            let bytes365 = _rt::Vec::from_raw_parts(
                                                                                l363.cast(),
                                                                                len365,
                                                                                len365,
                                                                            );
                                                                            let l366 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes365),
                                                                                },
                                                                                l366 as u64,
                                                                            )
                                                                        };
                                                                        V367::Handle(e367)
                                                                    }
                                                                };
                                                                v367
                                                            };
                                                            result368.push(e368);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base368,
                                                            len368 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        super::super::super::super::golem::rpc::types::WitValue {
                                                            nodes: result368,
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            consumed_fuel: l369,
                                        }
                                    };
                                    V632::ExportedFunctionCompleted(e632)
                                }
                                4 => {
                                    let e632 = {
                                        let l370 = *base.add(8).cast::<i64>();
                                        let l371 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l370 as u64,
                                            nanoseconds: l371 as u32,
                                        }
                                    };
                                    V632::Suspend(e632)
                                }
                                5 => {
                                    let e632 = {
                                        let l372 = *base.add(8).cast::<i64>();
                                        let l373 = *base.add(16).cast::<i32>();
                                        let l374 = *base.add(24).cast::<*mut u8>();
                                        let l375 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len376 = l375;
                                        let bytes376 = _rt::Vec::from_raw_parts(
                                            l374.cast(),
                                            len376,
                                            len376,
                                        );
                                        super::super::super::super::golem::api::oplog::ErrorParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l372 as u64,
                                                nanoseconds: l373 as u32,
                                            },
                                            error: _rt::string_lift(bytes376),
                                        }
                                    };
                                    V632::Error(e632)
                                }
                                6 => {
                                    let e632 = {
                                        let l377 = *base.add(8).cast::<i64>();
                                        let l378 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l377 as u64,
                                            nanoseconds: l378 as u32,
                                        }
                                    };
                                    V632::NoOp(e632)
                                }
                                7 => {
                                    let e632 = {
                                        let l379 = *base.add(8).cast::<i64>();
                                        let l380 = *base.add(16).cast::<i32>();
                                        let l381 = *base.add(24).cast::<i64>();
                                        let l382 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::JumpParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l379 as u64,
                                                nanoseconds: l380 as u32,
                                            },
                                            start: l381 as u64,
                                            end: l382 as u64,
                                        }
                                    };
                                    V632::Jump(e632)
                                }
                                8 => {
                                    let e632 = {
                                        let l383 = *base.add(8).cast::<i64>();
                                        let l384 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l383 as u64,
                                            nanoseconds: l384 as u32,
                                        }
                                    };
                                    V632::Interrupted(e632)
                                }
                                9 => {
                                    let e632 = {
                                        let l385 = *base.add(8).cast::<i64>();
                                        let l386 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l385 as u64,
                                            nanoseconds: l386 as u32,
                                        }
                                    };
                                    V632::Exited(e632)
                                }
                                10 => {
                                    let e632 = {
                                        let l387 = *base.add(8).cast::<i64>();
                                        let l388 = *base.add(16).cast::<i32>();
                                        let l389 = *base.add(24).cast::<i32>();
                                        let l390 = *base.add(32).cast::<i64>();
                                        let l391 = *base.add(40).cast::<i64>();
                                        let l392 = *base.add(48).cast::<f64>();
                                        let l393 = i32::from(*base.add(56).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::ChangeRetryPolicyParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l387 as u64,
                                                nanoseconds: l388 as u32,
                                            },
                                            retry_policy: super::super::super::super::golem::api::host::RetryPolicy {
                                                max_attempts: l389 as u32,
                                                min_delay: l390 as u64,
                                                max_delay: l391 as u64,
                                                multiplier: l392,
                                                max_jitter_factor: match l393 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l394 = *base.add(64).cast::<f64>();
                                                            l394
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                        }
                                    };
                                    V632::ChangeRetryPolicy(e632)
                                }
                                11 => {
                                    let e632 = {
                                        let l395 = *base.add(8).cast::<i64>();
                                        let l396 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l395 as u64,
                                            nanoseconds: l396 as u32,
                                        }
                                    };
                                    V632::BeginAtomicRegion(e632)
                                }
                                12 => {
                                    let e632 = {
                                        let l397 = *base.add(8).cast::<i64>();
                                        let l398 = *base.add(16).cast::<i32>();
                                        let l399 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndAtomicRegionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l397 as u64,
                                                nanoseconds: l398 as u32,
                                            },
                                            begin_index: l399 as u64,
                                        }
                                    };
                                    V632::EndAtomicRegion(e632)
                                }
                                13 => {
                                    let e632 = {
                                        let l400 = *base.add(8).cast::<i64>();
                                        let l401 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l400 as u64,
                                            nanoseconds: l401 as u32,
                                        }
                                    };
                                    V632::BeginRemoteWrite(e632)
                                }
                                14 => {
                                    let e632 = {
                                        let l402 = *base.add(8).cast::<i64>();
                                        let l403 = *base.add(16).cast::<i32>();
                                        let l404 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndRemoteWriteParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l402 as u64,
                                                nanoseconds: l403 as u32,
                                            },
                                            begin_index: l404 as u64,
                                        }
                                    };
                                    V632::EndRemoteWrite(e632)
                                }
                                15 => {
                                    let e632 = {
                                        let l405 = *base.add(8).cast::<i64>();
                                        let l406 = *base.add(16).cast::<i32>();
                                        let l407 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::WorkerInvocation as V467;
                                        let v467 = match l407 {
                                            0 => {
                                                let e467 = {
                                                    let l408 = *base.add(32).cast::<*mut u8>();
                                                    let l409 = *base
                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len410 = l409;
                                                    let bytes410 = _rt::Vec::from_raw_parts(
                                                        l408.cast(),
                                                        len410,
                                                        len410,
                                                    );
                                                    let l411 = *base
                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l412 = *base
                                                        .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len413 = l412;
                                                    let bytes413 = _rt::Vec::from_raw_parts(
                                                        l411.cast(),
                                                        len413,
                                                        len413,
                                                    );
                                                    let l414 = i32::from(
                                                        *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::super::golem::api::oplog::ExportedFunctionInvocationParameters {
                                                        idempotency_key: _rt::string_lift(bytes410),
                                                        function_name: _rt::string_lift(bytes413),
                                                        input: match l414 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l415 = *base
                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l416 = *base
                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base465 = l415;
                                                                    let len465 = l416;
                                                                    let mut result465 = _rt::Vec::with_capacity(len465);
                                                                    for i in 0..len465 {
                                                                        let base = base465
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        let e465 = {
                                                                            let l417 = *base.add(0).cast::<*mut u8>();
                                                                            let l418 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base464 = l417;
                                                                            let len464 = l418;
                                                                            let mut result464 = _rt::Vec::with_capacity(len464);
                                                                            for i in 0..len464 {
                                                                                let base = base464
                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                let e464 = {
                                                                                    let l419 = i32::from(*base.add(0).cast::<u8>());
                                                                                    use super::super::super::super::golem::rpc::types::WitNode as V463;
                                                                                    let v463 = match l419 {
                                                                                        0 => {
                                                                                            let e463 = {
                                                                                                let l420 = *base.add(8).cast::<*mut u8>();
                                                                                                let l421 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len422 = l421;
                                                                                                _rt::Vec::from_raw_parts(l420.cast(), len422, len422)
                                                                                            };
                                                                                            V463::RecordValue(e463)
                                                                                        }
                                                                                        1 => {
                                                                                            let e463 = {
                                                                                                let l423 = *base.add(8).cast::<i32>();
                                                                                                let l424 = i32::from(*base.add(12).cast::<u8>());
                                                                                                (
                                                                                                    l423 as u32,
                                                                                                    match l424 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l425 = *base.add(16).cast::<i32>();
                                                                                                                l425
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                )
                                                                                            };
                                                                                            V463::VariantValue(e463)
                                                                                        }
                                                                                        2 => {
                                                                                            let e463 = {
                                                                                                let l426 = *base.add(8).cast::<i32>();
                                                                                                l426 as u32
                                                                                            };
                                                                                            V463::EnumValue(e463)
                                                                                        }
                                                                                        3 => {
                                                                                            let e463 = {
                                                                                                let l427 = *base.add(8).cast::<*mut u8>();
                                                                                                let l428 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let base430 = l427;
                                                                                                let len430 = l428;
                                                                                                let mut result430 = _rt::Vec::with_capacity(len430);
                                                                                                for i in 0..len430 {
                                                                                                    let base = base430.add(i * 1);
                                                                                                    let e430 = {
                                                                                                        let l429 = i32::from(*base.add(0).cast::<u8>());
                                                                                                        _rt::bool_lift(l429 as u8)
                                                                                                    };
                                                                                                    result430.push(e430);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base430, len430 * 1, 1);
                                                                                                result430
                                                                                            };
                                                                                            V463::FlagsValue(e463)
                                                                                        }
                                                                                        4 => {
                                                                                            let e463 = {
                                                                                                let l431 = *base.add(8).cast::<*mut u8>();
                                                                                                let l432 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len433 = l432;
                                                                                                _rt::Vec::from_raw_parts(l431.cast(), len433, len433)
                                                                                            };
                                                                                            V463::TupleValue(e463)
                                                                                        }
                                                                                        5 => {
                                                                                            let e463 = {
                                                                                                let l434 = *base.add(8).cast::<*mut u8>();
                                                                                                let l435 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len436 = l435;
                                                                                                _rt::Vec::from_raw_parts(l434.cast(), len436, len436)
                                                                                            };
                                                                                            V463::ListValue(e463)
                                                                                        }
                                                                                        6 => {
                                                                                            let e463 = {
                                                                                                let l437 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l437 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l438 = *base.add(12).cast::<i32>();
                                                                                                            l438
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V463::OptionValue(e463)
                                                                                        }
                                                                                        7 => {
                                                                                            let e463 = {
                                                                                                let l439 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l439 {
                                                                                                    0 => {
                                                                                                        let e = {
                                                                                                            let l440 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l440 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l441 = *base.add(16).cast::<i32>();
                                                                                                                        l441
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Ok(e)
                                                                                                    }
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l442 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l442 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l443 = *base.add(16).cast::<i32>();
                                                                                                                        l443
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Err(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V463::ResultValue(e463)
                                                                                        }
                                                                                        8 => {
                                                                                            let e463 = {
                                                                                                let l444 = i32::from(*base.add(8).cast::<u8>());
                                                                                                l444 as u8
                                                                                            };
                                                                                            V463::PrimU8(e463)
                                                                                        }
                                                                                        9 => {
                                                                                            let e463 = {
                                                                                                let l445 = i32::from(*base.add(8).cast::<u16>());
                                                                                                l445 as u16
                                                                                            };
                                                                                            V463::PrimU16(e463)
                                                                                        }
                                                                                        10 => {
                                                                                            let e463 = {
                                                                                                let l446 = *base.add(8).cast::<i32>();
                                                                                                l446 as u32
                                                                                            };
                                                                                            V463::PrimU32(e463)
                                                                                        }
                                                                                        11 => {
                                                                                            let e463 = {
                                                                                                let l447 = *base.add(8).cast::<i64>();
                                                                                                l447 as u64
                                                                                            };
                                                                                            V463::PrimU64(e463)
                                                                                        }
                                                                                        12 => {
                                                                                            let e463 = {
                                                                                                let l448 = i32::from(*base.add(8).cast::<i8>());
                                                                                                l448 as i8
                                                                                            };
                                                                                            V463::PrimS8(e463)
                                                                                        }
                                                                                        13 => {
                                                                                            let e463 = {
                                                                                                let l449 = i32::from(*base.add(8).cast::<i16>());
                                                                                                l449 as i16
                                                                                            };
                                                                                            V463::PrimS16(e463)
                                                                                        }
                                                                                        14 => {
                                                                                            let e463 = {
                                                                                                let l450 = *base.add(8).cast::<i32>();
                                                                                                l450
                                                                                            };
                                                                                            V463::PrimS32(e463)
                                                                                        }
                                                                                        15 => {
                                                                                            let e463 = {
                                                                                                let l451 = *base.add(8).cast::<i64>();
                                                                                                l451
                                                                                            };
                                                                                            V463::PrimS64(e463)
                                                                                        }
                                                                                        16 => {
                                                                                            let e463 = {
                                                                                                let l452 = *base.add(8).cast::<f32>();
                                                                                                l452
                                                                                            };
                                                                                            V463::PrimFloat32(e463)
                                                                                        }
                                                                                        17 => {
                                                                                            let e463 = {
                                                                                                let l453 = *base.add(8).cast::<f64>();
                                                                                                l453
                                                                                            };
                                                                                            V463::PrimFloat64(e463)
                                                                                        }
                                                                                        18 => {
                                                                                            let e463 = {
                                                                                                let l454 = *base.add(8).cast::<i32>();
                                                                                                _rt::char_lift(l454 as u32)
                                                                                            };
                                                                                            V463::PrimChar(e463)
                                                                                        }
                                                                                        19 => {
                                                                                            let e463 = {
                                                                                                let l455 = i32::from(*base.add(8).cast::<u8>());
                                                                                                _rt::bool_lift(l455 as u8)
                                                                                            };
                                                                                            V463::PrimBool(e463)
                                                                                        }
                                                                                        20 => {
                                                                                            let e463 = {
                                                                                                let l456 = *base.add(8).cast::<*mut u8>();
                                                                                                let l457 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len458 = l457;
                                                                                                let bytes458 = _rt::Vec::from_raw_parts(
                                                                                                    l456.cast(),
                                                                                                    len458,
                                                                                                    len458,
                                                                                                );
                                                                                                _rt::string_lift(bytes458)
                                                                                            };
                                                                                            V463::PrimString(e463)
                                                                                        }
                                                                                        n => {
                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                            let e463 = {
                                                                                                let l459 = *base.add(8).cast::<*mut u8>();
                                                                                                let l460 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len461 = l460;
                                                                                                let bytes461 = _rt::Vec::from_raw_parts(
                                                                                                    l459.cast(),
                                                                                                    len461,
                                                                                                    len461,
                                                                                                );
                                                                                                let l462 = *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<i64>();
                                                                                                (
                                                                                                    super::super::super::super::golem::rpc::types::Uri {
                                                                                                        value: _rt::string_lift(bytes461),
                                                                                                    },
                                                                                                    l462 as u64,
                                                                                                )
                                                                                            };
                                                                                            V463::Handle(e463)
                                                                                        }
                                                                                    };
                                                                                    v463
                                                                                };
                                                                                result464.push(e464);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base464,
                                                                                len464 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                8,
                                                                            );
                                                                            super::super::super::super::golem::rpc::types::WitValue {
                                                                                nodes: result464,
                                                                            }
                                                                        };
                                                                        result465.push(e465);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base465,
                                                                        len465 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result465
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V467::ExportedFunction(e467)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e467 = {
                                                    let l466 = *base.add(32).cast::<i64>();
                                                    l466 as u64
                                                };
                                                V467::ManualUpdate(e467)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingWorkerInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l405 as u64,
                                                nanoseconds: l406 as u32,
                                            },
                                            invocation: v467,
                                        }
                                    };
                                    V632::PendingWorkerInvocation(e632)
                                }
                                16 => {
                                    let e632 = {
                                        let l468 = *base.add(8).cast::<i64>();
                                        let l469 = *base.add(16).cast::<i32>();
                                        let l470 = *base.add(24).cast::<i64>();
                                        let l471 = i32::from(*base.add(32).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::UpdateDescription as V475;
                                        let v475 = match l471 {
                                            0 => V475::AutoUpdate,
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e475 = {
                                                    let l472 = *base
                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l473 = *base
                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len474 = l473;
                                                    _rt::Vec::from_raw_parts(l472.cast(), len474, len474)
                                                };
                                                V475::SnapshotBased(e475)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l468 as u64,
                                                nanoseconds: l469 as u32,
                                            },
                                            target_version: l470 as u64,
                                            update_description: v475,
                                        }
                                    };
                                    V632::PendingUpdate(e632)
                                }
                                17 => {
                                    let e632 = {
                                        let l476 = *base.add(8).cast::<i64>();
                                        let l477 = *base.add(16).cast::<i32>();
                                        let l478 = *base.add(24).cast::<i64>();
                                        let l479 = *base.add(32).cast::<i64>();
                                        let l480 = *base.add(40).cast::<*mut u8>();
                                        let l481 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base499 = l480;
                                        let len499 = l481;
                                        let mut result499 = _rt::Vec::with_capacity(len499);
                                        for i in 0..len499 {
                                            let base = base499
                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                            let e499 = {
                                                let l482 = *base.add(0).cast::<i64>();
                                                let l483 = *base.add(8).cast::<i64>();
                                                let l484 = *base.add(16).cast::<*mut u8>();
                                                let l485 = *base
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len486 = l485;
                                                let bytes486 = _rt::Vec::from_raw_parts(
                                                    l484.cast(),
                                                    len486,
                                                    len486,
                                                );
                                                let l487 = *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l488 = *base
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len489 = l488;
                                                let bytes489 = _rt::Vec::from_raw_parts(
                                                    l487.cast(),
                                                    len489,
                                                    len489,
                                                );
                                                let l490 = *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l491 = *base
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base498 = l490;
                                                let len498 = l491;
                                                let mut result498 = _rt::Vec::with_capacity(len498);
                                                for i in 0..len498 {
                                                    let base = base498
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e498 = {
                                                        let l492 = *base.add(0).cast::<*mut u8>();
                                                        let l493 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len494 = l493;
                                                        let bytes494 = _rt::Vec::from_raw_parts(
                                                            l492.cast(),
                                                            len494,
                                                            len494,
                                                        );
                                                        let l495 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l496 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len497 = l496;
                                                        let bytes497 = _rt::Vec::from_raw_parts(
                                                            l495.cast(),
                                                            len497,
                                                            len497,
                                                        );
                                                        (_rt::string_lift(bytes494), _rt::string_lift(bytes497))
                                                    };
                                                    result498.push(e498);
                                                }
                                                _rt::cabi_dealloc(
                                                    base498,
                                                    len498 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    installation_id: super::super::super::super::golem::rpc::types::Uuid {
                                                        high_bits: l482 as u64,
                                                        low_bits: l483 as u64,
                                                    },
                                                    name: _rt::string_lift(bytes486),
                                                    version: _rt::string_lift(bytes489),
                                                    parameters: result498,
                                                }
                                            };
                                            result499.push(e499);
                                        }
                                        _rt::cabi_dealloc(
                                            base499,
                                            len499 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        super::super::super::super::golem::api::oplog::SuccessfulUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l476 as u64,
                                                nanoseconds: l477 as u32,
                                            },
                                            target_version: l478 as u64,
                                            new_component_size: l479 as u64,
                                            new_active_plugins: result499,
                                        }
                                    };
                                    V632::SuccessfulUpdate(e632)
                                }
                                18 => {
                                    let e632 = {
                                        let l500 = *base.add(8).cast::<i64>();
                                        let l501 = *base.add(16).cast::<i32>();
                                        let l502 = *base.add(24).cast::<i64>();
                                        let l503 = i32::from(*base.add(32).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::FailedUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l500 as u64,
                                                nanoseconds: l501 as u32,
                                            },
                                            target_version: l502 as u64,
                                            details: match l503 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l504 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l505 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len506 = l505;
                                                        let bytes506 = _rt::Vec::from_raw_parts(
                                                            l504.cast(),
                                                            len506,
                                                            len506,
                                                        );
                                                        _rt::string_lift(bytes506)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V632::FailedUpdate(e632)
                                }
                                19 => {
                                    let e632 = {
                                        let l507 = *base.add(8).cast::<i64>();
                                        let l508 = *base.add(16).cast::<i32>();
                                        let l509 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::GrowMemoryParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l507 as u64,
                                                nanoseconds: l508 as u32,
                                            },
                                            delta: l509 as u64,
                                        }
                                    };
                                    V632::GrowMemory(e632)
                                }
                                20 => {
                                    let e632 = {
                                        let l510 = *base.add(8).cast::<i64>();
                                        let l511 = *base.add(16).cast::<i32>();
                                        let l512 = *base.add(24).cast::<i64>();
                                        let l513 = *base.add(32).cast::<*mut u8>();
                                        let l514 = *base
                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len515 = l514;
                                        let bytes515 = _rt::Vec::from_raw_parts(
                                            l513.cast(),
                                            len515,
                                            len515,
                                        );
                                        let l516 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l517 = *base
                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len518 = l517;
                                        let bytes518 = _rt::Vec::from_raw_parts(
                                            l516.cast(),
                                            len518,
                                            len518,
                                        );
                                        super::super::super::super::golem::api::oplog::CreateResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l510 as u64,
                                                nanoseconds: l511 as u32,
                                            },
                                            resource_id: l512 as u64,
                                            name: _rt::string_lift(bytes515),
                                            owner: _rt::string_lift(bytes518),
                                        }
                                    };
                                    V632::CreateResource(e632)
                                }
                                21 => {
                                    let e632 = {
                                        let l519 = *base.add(8).cast::<i64>();
                                        let l520 = *base.add(16).cast::<i32>();
                                        let l521 = *base.add(24).cast::<i64>();
                                        let l522 = *base.add(32).cast::<*mut u8>();
                                        let l523 = *base
                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len524 = l523;
                                        let bytes524 = _rt::Vec::from_raw_parts(
                                            l522.cast(),
                                            len524,
                                            len524,
                                        );
                                        let l525 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l526 = *base
                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len527 = l526;
                                        let bytes527 = _rt::Vec::from_raw_parts(
                                            l525.cast(),
                                            len527,
                                            len527,
                                        );
                                        super::super::super::super::golem::api::oplog::DropResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l519 as u64,
                                                nanoseconds: l520 as u32,
                                            },
                                            resource_id: l521 as u64,
                                            name: _rt::string_lift(bytes524),
                                            owner: _rt::string_lift(bytes527),
                                        }
                                    };
                                    V632::DropResource(e632)
                                }
                                22 => {
                                    let e632 = {
                                        let l528 = *base.add(8).cast::<i64>();
                                        let l529 = *base.add(16).cast::<i32>();
                                        let l530 = i32::from(*base.add(24).cast::<u8>());
                                        let l531 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l532 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len533 = l532;
                                        let bytes533 = _rt::Vec::from_raw_parts(
                                            l531.cast(),
                                            len533,
                                            len533,
                                        );
                                        let l534 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l535 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len536 = l535;
                                        let bytes536 = _rt::Vec::from_raw_parts(
                                            l534.cast(),
                                            len536,
                                            len536,
                                        );
                                        super::super::super::super::golem::api::oplog::LogParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l528 as u64,
                                                nanoseconds: l529 as u32,
                                            },
                                            level: super::super::super::super::golem::api::oplog::LogLevel::_lift(
                                                l530 as u8,
                                            ),
                                            context: _rt::string_lift(bytes533),
                                            message: _rt::string_lift(bytes536),
                                        }
                                    };
                                    V632::Log(e632)
                                }
                                23 => {
                                    let e632 = {
                                        let l537 = *base.add(8).cast::<i64>();
                                        let l538 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l537 as u64,
                                            nanoseconds: l538 as u32,
                                        }
                                    };
                                    V632::Restart(e632)
                                }
                                24 => {
                                    let e632 = {
                                        let l539 = *base.add(8).cast::<i64>();
                                        let l540 = *base.add(16).cast::<i32>();
                                        let l541 = *base.add(24).cast::<i64>();
                                        let l542 = *base.add(32).cast::<i64>();
                                        let l543 = *base.add(40).cast::<*mut u8>();
                                        let l544 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len545 = l544;
                                        let bytes545 = _rt::Vec::from_raw_parts(
                                            l543.cast(),
                                            len545,
                                            len545,
                                        );
                                        let l546 = *base
                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l547 = *base
                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len548 = l547;
                                        let bytes548 = _rt::Vec::from_raw_parts(
                                            l546.cast(),
                                            len548,
                                            len548,
                                        );
                                        let l549 = *base
                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l550 = *base
                                            .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base557 = l549;
                                        let len557 = l550;
                                        let mut result557 = _rt::Vec::with_capacity(len557);
                                        for i in 0..len557 {
                                            let base = base557
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e557 = {
                                                let l551 = *base.add(0).cast::<*mut u8>();
                                                let l552 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len553 = l552;
                                                let bytes553 = _rt::Vec::from_raw_parts(
                                                    l551.cast(),
                                                    len553,
                                                    len553,
                                                );
                                                let l554 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l555 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len556 = l555;
                                                let bytes556 = _rt::Vec::from_raw_parts(
                                                    l554.cast(),
                                                    len556,
                                                    len556,
                                                );
                                                (_rt::string_lift(bytes553), _rt::string_lift(bytes556))
                                            };
                                            result557.push(e557);
                                        }
                                        _rt::cabi_dealloc(
                                            base557,
                                            len557 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::ActivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l539 as u64,
                                                nanoseconds: l540 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                installation_id: super::super::super::super::golem::rpc::types::Uuid {
                                                    high_bits: l541 as u64,
                                                    low_bits: l542 as u64,
                                                },
                                                name: _rt::string_lift(bytes545),
                                                version: _rt::string_lift(bytes548),
                                                parameters: result557,
                                            },
                                        }
                                    };
                                    V632::ActivatePlugin(e632)
                                }
                                25 => {
                                    let e632 = {
                                        let l558 = *base.add(8).cast::<i64>();
                                        let l559 = *base.add(16).cast::<i32>();
                                        let l560 = *base.add(24).cast::<i64>();
                                        let l561 = *base.add(32).cast::<i64>();
                                        let l562 = *base.add(40).cast::<*mut u8>();
                                        let l563 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len564 = l563;
                                        let bytes564 = _rt::Vec::from_raw_parts(
                                            l562.cast(),
                                            len564,
                                            len564,
                                        );
                                        let l565 = *base
                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l566 = *base
                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len567 = l566;
                                        let bytes567 = _rt::Vec::from_raw_parts(
                                            l565.cast(),
                                            len567,
                                            len567,
                                        );
                                        let l568 = *base
                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l569 = *base
                                            .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base576 = l568;
                                        let len576 = l569;
                                        let mut result576 = _rt::Vec::with_capacity(len576);
                                        for i in 0..len576 {
                                            let base = base576
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e576 = {
                                                let l570 = *base.add(0).cast::<*mut u8>();
                                                let l571 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len572 = l571;
                                                let bytes572 = _rt::Vec::from_raw_parts(
                                                    l570.cast(),
                                                    len572,
                                                    len572,
                                                );
                                                let l573 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l574 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len575 = l574;
                                                let bytes575 = _rt::Vec::from_raw_parts(
                                                    l573.cast(),
                                                    len575,
                                                    len575,
                                                );
                                                (_rt::string_lift(bytes572), _rt::string_lift(bytes575))
                                            };
                                            result576.push(e576);
                                        }
                                        _rt::cabi_dealloc(
                                            base576,
                                            len576 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::DeactivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l558 as u64,
                                                nanoseconds: l559 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                installation_id: super::super::super::super::golem::rpc::types::Uuid {
                                                    high_bits: l560 as u64,
                                                    low_bits: l561 as u64,
                                                },
                                                name: _rt::string_lift(bytes564),
                                                version: _rt::string_lift(bytes567),
                                                parameters: result576,
                                            },
                                        }
                                    };
                                    V632::DeactivatePlugin(e632)
                                }
                                26 => {
                                    let e632 = {
                                        let l577 = *base.add(8).cast::<i64>();
                                        let l578 = *base.add(16).cast::<i32>();
                                        let l579 = *base.add(24).cast::<i64>();
                                        let l580 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RevertParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l577 as u64,
                                                nanoseconds: l578 as u32,
                                            },
                                            start: l579 as u64,
                                            end: l580 as u64,
                                        }
                                    };
                                    V632::Revert(e632)
                                }
                                27 => {
                                    let e632 = {
                                        let l581 = *base.add(8).cast::<i64>();
                                        let l582 = *base.add(16).cast::<i32>();
                                        let l583 = *base.add(24).cast::<*mut u8>();
                                        let l584 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len585 = l584;
                                        let bytes585 = _rt::Vec::from_raw_parts(
                                            l583.cast(),
                                            len585,
                                            len585,
                                        );
                                        super::super::super::super::golem::api::oplog::CancelInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l581 as u64,
                                                nanoseconds: l582 as u32,
                                            },
                                            idempotency_key: _rt::string_lift(bytes585),
                                        }
                                    };
                                    V632::CancelInvocation(e632)
                                }
                                28 => {
                                    let e632 = {
                                        let l586 = *base.add(8).cast::<i64>();
                                        let l587 = *base.add(16).cast::<i32>();
                                        let l588 = *base.add(24).cast::<*mut u8>();
                                        let l589 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len590 = l589;
                                        let bytes590 = _rt::Vec::from_raw_parts(
                                            l588.cast(),
                                            len590,
                                            len590,
                                        );
                                        let l591 = i32::from(
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l595 = i32::from(
                                            *base
                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l599 = *base
                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l600 = *base
                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base609 = l599;
                                        let len609 = l600;
                                        let mut result609 = _rt::Vec::with_capacity(len609);
                                        for i in 0..len609 {
                                            let base = base609
                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                            let e609 = {
                                                let l601 = *base.add(0).cast::<*mut u8>();
                                                let l602 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len603 = l602;
                                                let bytes603 = _rt::Vec::from_raw_parts(
                                                    l601.cast(),
                                                    len603,
                                                    len603,
                                                );
                                                let l604 = i32::from(
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                use super::super::super::super::golem::api::context::AttributeValue as V608;
                                                let v608 = match l604 {
                                                    n => {
                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                        let e608 = {
                                                            let l605 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l606 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len607 = l606;
                                                            let bytes607 = _rt::Vec::from_raw_parts(
                                                                l605.cast(),
                                                                len607,
                                                                len607,
                                                            );
                                                            _rt::string_lift(bytes607)
                                                        };
                                                        V608::String(e608)
                                                    }
                                                };
                                                super::super::super::super::golem::api::context::Attribute {
                                                    key: _rt::string_lift(bytes603),
                                                    value: v608,
                                                }
                                            };
                                            result609.push(e609);
                                        }
                                        _rt::cabi_dealloc(
                                            base609,
                                            len609 * (5 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::StartSpanParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l586 as u64,
                                                nanoseconds: l587 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes590),
                                            parent: match l591 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l592 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l593 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len594 = l593;
                                                        let bytes594 = _rt::Vec::from_raw_parts(
                                                            l592.cast(),
                                                            len594,
                                                            len594,
                                                        );
                                                        _rt::string_lift(bytes594)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            linked_context: match l595 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l596 = *base
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l597 = *base
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len598 = l597;
                                                        let bytes598 = _rt::Vec::from_raw_parts(
                                                            l596.cast(),
                                                            len598,
                                                            len598,
                                                        );
                                                        _rt::string_lift(bytes598)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            attributes: result609,
                                        }
                                    };
                                    V632::StartSpan(e632)
                                }
                                29 => {
                                    let e632 = {
                                        let l610 = *base.add(8).cast::<i64>();
                                        let l611 = *base.add(16).cast::<i32>();
                                        let l612 = *base.add(24).cast::<*mut u8>();
                                        let l613 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len614 = l613;
                                        let bytes614 = _rt::Vec::from_raw_parts(
                                            l612.cast(),
                                            len614,
                                            len614,
                                        );
                                        super::super::super::super::golem::api::oplog::FinishSpanParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l610 as u64,
                                                nanoseconds: l611 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes614),
                                        }
                                    };
                                    V632::FinishSpan(e632)
                                }
                                30 => {
                                    let e632 = {
                                        let l615 = *base.add(8).cast::<i64>();
                                        let l616 = *base.add(16).cast::<i32>();
                                        let l617 = *base.add(24).cast::<*mut u8>();
                                        let l618 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len619 = l618;
                                        let bytes619 = _rt::Vec::from_raw_parts(
                                            l617.cast(),
                                            len619,
                                            len619,
                                        );
                                        let l620 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l621 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len622 = l621;
                                        let bytes622 = _rt::Vec::from_raw_parts(
                                            l620.cast(),
                                            len622,
                                            len622,
                                        );
                                        let l623 = i32::from(
                                            *base
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::api::context::AttributeValue as V627;
                                        let v627 = match l623 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e627 = {
                                                    let l624 = *base
                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l625 = *base
                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len626 = l625;
                                                    let bytes626 = _rt::Vec::from_raw_parts(
                                                        l624.cast(),
                                                        len626,
                                                        len626,
                                                    );
                                                    _rt::string_lift(bytes626)
                                                };
                                                V627::String(e627)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::SetSpanAttributeParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l615 as u64,
                                                nanoseconds: l616 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes619),
                                            key: _rt::string_lift(bytes622),
                                            value: v627,
                                        }
                                    };
                                    V632::SetSpanAttribute(e632)
                                }
                                n => {
                                    debug_assert_eq!(n, 31, "invalid enum discriminant");
                                    let e632 = {
                                        let l628 = *base.add(8).cast::<i64>();
                                        let l629 = *base.add(16).cast::<i32>();
                                        let l630 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::super::golem::api::host::PersistenceLevel as V631;
                                        let v631 = match l630 {
                                            0 => V631::PersistNothing,
                                            1 => V631::PersistRemoteSideEffects,
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                V631::Smart
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::ChangePersistenceLevelParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l628 as u64,
                                                nanoseconds: l629 as u32,
                                            },
                                            persistence_level: v631,
                                        }
                                    };
                                    V632::ChangePersistenceLevel(e632)
                                }
                            };
                            v632
                        };
                        result633.push(e633);
                    }
                    _rt::cabi_dealloc(
                        base633,
                        len633 * (104 + 12 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result634 = T::process(
                        AccountInfo {
                            account_id: super::super::super::super::golem::api::host::AccountId {
                                value: _rt::string_lift(bytes2),
                            },
                        },
                        result11,
                        super::super::super::super::golem::rpc::types::ComponentId {
                            uuid: super::super::super::super::golem::rpc::types::Uuid {
                                high_bits: l12 as u64,
                                low_bits: l13 as u64,
                            },
                        },
                        super::super::super::super::golem::rpc::types::WorkerId {
                            component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l14 as u64,
                                    low_bits: l15 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes18),
                        },
                        super::super::super::super::golem::api::host::WorkerMetadata {
                            worker_id: super::super::super::super::golem::rpc::types::WorkerId {
                                component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l19 as u64,
                                        low_bits: l20 as u64,
                                    },
                                },
                                worker_name: _rt::string_lift(bytes23),
                            },
                            args: result29,
                            env: result38,
                            wasi_config_vars: result47,
                            status: super::super::super::super::golem::api::host::WorkerStatus::_lift(
                                l48 as u8,
                            ),
                            component_version: l49 as u64,
                            retry_count: l50 as u64,
                        },
                        l51 as u64,
                        result633,
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        80 + 16 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr635 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result634 {
                        Ok(_) => {
                            *ptr635.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr635.add(0).cast::<u8>() = (1i32) as u8;
                            let vec636 = (e.into_bytes()).into_boxed_slice();
                            let ptr636 = vec636.as_ptr().cast::<u8>();
                            let len636 = vec636.len();
                            ::core::mem::forget(vec636);
                            *ptr635
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len636;
                            *ptr635
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr636.cast_mut();
                        }
                    };
                    ptr635
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_process<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Called when one of the workers the plugin is activated on has written new entries to its oplog.
                    ///
                    /// There are no guarantees for the number of processors running at the same time, and different entries from the same worker
                    /// may be sent to different processor instances.
                    ///
                    /// The `account-info` parameters contains details of the account the installation belongs to.
                    /// The `config` parameter contains the configuration parameters for the plugin, as specified in the plugin installation
                    /// The `component-id` parameter contains the identifier of the component the plugin was installed to.
                    /// The `worker-id` parameter identifies the worker.
                    /// The `metadata` parameter contains the latest metadata of the worker.
                    /// The `first-entry-index` parameter contains the index of the first entry in the list of `entries`.
                    /// The `entries` parameter always contains at least one element.
                    fn process(
                        account_info: AccountInfo,
                        config: _rt::Vec<(_rt::String, _rt::String)>,
                        component_id: ComponentId,
                        worker_id: WorkerId,
                        metadata: WorkerMetadata,
                        first_entry_index: OplogIndex,
                        entries: _rt::Vec<OplogEntry>,
                    ) -> Result<(), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_api_oplog_processor_1_1_7_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:api/oplog-processor@1.1.7#process")] unsafe extern "C" fn
                        export_process(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_process_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:api/oplog-processor@1.1.7#process")] unsafe
                        extern "C" fn _post_return_process(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_process::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_api_oplog_processor_1_1_7_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 3 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 3
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
        pub mod component {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_invoked_functions_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_invoked_functions();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_invoked_functions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                pub trait Guest {
                    fn get_invoked_functions() -> _rt::Vec<_rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_component_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:component/api#get-invoked-functions")] unsafe extern "C"
                        fn export_get_invoked_functions() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_invoked_functions_cabi::<$ty >
                        () } } #[unsafe (export_name =
                        "cabi_post_golem:component/api#get-invoked-functions")] unsafe
                        extern "C" fn _post_return_get_invoked_functions(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_invoked_functions::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_component_api_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_oplog_processor_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::component::api::__export_golem_component_api_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::component::api);
        $($path_to_types_root)*::
        exports::golem::api::oplog_processor::__export_golem_api_oplog_processor_1_1_7_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::api::oplog_processor);
    };
}
#[doc(inline)]
pub(crate) use __export_oplog_processor_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:component:oplog-processor:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 10911] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x99T\x01A\x02\x01A(\x01\
B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\x01\
\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-cloc\
k@0.2.3\x05\0\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\
\x04\0\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[me\
thod]pollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04pol\
l\x01\x06\x03\0\x12wasi:io/poll@0.2.3\x05\x01\x02\x03\0\0\x08datetime\x02\x03\0\x01\
\x08pollable\x01BY\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\
\x03\x04\0\x08pollable\x03\0\x02\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uu\
id\x03\0\x04\x01r\x01\x04uuid\x05\x04\0\x0ccomponent-id\x03\0\x06\x01r\x02\x0cco\
mponent-id\x07\x0bworker-names\x04\0\x09worker-id\x03\0\x08\x01z\x04\0\x0anode-i\
ndex\x03\0\x0a\x01w\x04\0\x0bresource-id\x03\0\x0c\x01m\x02\x05owned\x08borrowed\
\x04\0\x0dresource-mode\x03\0\x0e\x01o\x02s\x0b\x01p\x10\x01k\x0b\x01o\x02s\x12\x01\
p\x13\x01ps\x01p\x0b\x01o\x02\x12\x12\x01o\x02\x0d\x0f\x01q\x16\x0brecord-type\x01\
\x11\0\x0cvariant-type\x01\x14\0\x09enum-type\x01\x15\0\x0aflags-type\x01\x15\0\x0a\
tuple-type\x01\x16\0\x09list-type\x01\x0b\0\x0boption-type\x01\x0b\0\x0bresult-t\
ype\x01\x17\0\x0cprim-u8-type\0\0\x0dprim-u16-type\0\0\x0dprim-u32-type\0\0\x0dp\
rim-u64-type\0\0\x0cprim-s8-type\0\0\x0dprim-s16-type\0\0\x0dprim-s32-type\0\0\x0d\
prim-s64-type\0\0\x0dprim-f32-type\0\0\x0dprim-f64-type\0\0\x0eprim-char-type\0\0\
\x0eprim-bool-type\0\0\x10prim-string-type\0\0\x0bhandle-type\x01\x18\0\x04\0\x0d\
wit-type-node\x03\0\x19\x01ks\x01r\x03\x04name\x1b\x05owner\x1b\x04type\x1a\x04\0\
\x13named-wit-type-node\x03\0\x1c\x01p\x1d\x01r\x01\x05nodes\x1e\x04\0\x08wit-ty\
pe\x03\0\x1f\x01r\x01\x05values\x04\0\x03uri\x03\0!\x01o\x02y\x12\x01p\x7f\x01j\x01\
\x12\x01\x12\x01o\x02\"w\x01q\x16\x0crecord-value\x01\x16\0\x0dvariant-value\x01\
#\0\x0aenum-value\x01y\0\x0bflags-value\x01$\0\x0btuple-value\x01\x16\0\x0alist-\
value\x01\x16\0\x0coption-value\x01\x12\0\x0cresult-value\x01%\0\x07prim-u8\x01}\
\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08\
prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0c\
prim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01\
s\0\x06handle\x01&\0\x04\0\x08wit-node\x03\0'\x01p(\x01r\x01\x05nodes)\x04\0\x09\
wit-value\x03\0*\x01r\x02\x05value+\x03typ\x20\x04\0\x0evalue-and-type\x03\0,\x01\
q\x04\x0eprotocol-error\x01s\0\x06denied\x01s\0\x09not-found\x01s\0\x15remote-in\
ternal-error\x01s\0\x04\0\x09rpc-error\x03\0.\x04\0\x08wasm-rpc\x03\x01\x04\0\x14\
future-invoke-result\x03\x01\x04\0\x12cancellation-token\x03\x01\x01i0\x01@\x01\x09\
worker-id\x09\03\x04\0\x15[constructor]wasm-rpc\x014\x01h0\x01p+\x01j\x01+\x01/\x01\
@\x03\x04self5\x0dfunction-names\x0ffunction-params6\07\x04\0![method]wasm-rpc.i\
nvoke-and-await\x018\x01j\0\x01/\x01@\x03\x04self5\x0dfunction-names\x0ffunction\
-params6\09\x04\0\x17[method]wasm-rpc.invoke\x01:\x01i1\x01@\x03\x04self5\x0dfun\
ction-names\x0ffunction-params6\0;\x04\0'[method]wasm-rpc.async-invoke-and-await\
\x01<\x01@\x04\x04self5\x0escheduled-time\x01\x0dfunction-names\x0ffunction-para\
ms6\x01\0\x04\0$[method]wasm-rpc.schedule-invocation\x01=\x01i2\x01@\x04\x04self\
5\x0escheduled-time\x01\x0dfunction-names\x0ffunction-params6\0>\x04\0/[method]w\
asm-rpc.schedule-cancelable-invocation\x01?\x01h1\x01i\x03\x01@\x01\x04self\xc0\0\
\0\xc1\0\x04\0&[method]future-invoke-result.subscribe\x01B\x01k7\x01@\x01\x04sel\
f\xc0\0\0\xc3\0\x04\0\x20[method]future-invoke-result.get\x01D\x01h2\x01@\x01\x04\
self\xc5\0\x01\0\x04\0![method]cancellation-token.cancel\x01F\x01j\x01\x05\x01s\x01\
@\x01\x04uuids\0\xc7\0\x04\0\x0aparse-uuid\x01H\x01@\x01\x04uuid\x05\0s\x04\0\x0e\
uuid-to-string\x01I\x01@\x01\x03vnt-\0+\x04\0\x0dextract-value\x01J\x01@\x01\x03\
vnt-\0\x20\x04\0\x0cextract-type\x01K\x03\0\x15golem:rpc/types@0.2.2\x05\x04\x01\
B\x0f\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\
\x01w\x04\0\x08duration\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\
\x04\0\x0aresolution\x01\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscr\
ibe-instant\x01\x09\x01@\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\
\x03\0!wasi:clocks/monotonic-clock@0.2.3\x05\x05\x02\x03\0\x03\x08duration\x02\x03\
\0\x02\x0ccomponent-id\x02\x03\0\x02\x04uuid\x02\x03\0\x02\x0evalue-and-type\x02\
\x03\0\x02\x09worker-id\x01B\x7f\x02\x03\x02\x01\x06\x04\0\x08duration\x03\0\0\x02\
\x03\x02\x01\x07\x04\0\x0ccomponent-id\x03\0\x02\x02\x03\x02\x01\x08\x04\0\x04uu\
id\x03\0\x04\x02\x03\x02\x01\x09\x04\0\x0evalue-and-type\x03\0\x06\x02\x03\x02\x01\
\x0a\x04\0\x09worker-id\x03\0\x08\x01w\x04\0\x0boplog-index\x03\0\x0a\x01r\x02\x09\
worker-id\x09\x09oplog-idx\x0b\x04\0\x0apromise-id\x03\0\x0c\x01w\x04\0\x11compo\
nent-version\x03\0\x0e\x01r\x01\x05values\x04\0\x0aaccount-id\x03\0\x10\x01r\x01\
\x04uuid\x05\x04\0\x0aproject-id\x03\0\x12\x01ku\x01r\x05\x0cmax-attemptsy\x09mi\
n-delay\x01\x09max-delay\x01\x0amultiplieru\x11max-jitter-factor\x14\x04\0\x0cre\
try-policy\x03\0\x15\x01q\x03\x0fpersist-nothing\0\0\x1bpersist-remote-side-effe\
cts\0\0\x05smart\0\0\x04\0\x11persistence-level\x03\0\x17\x01m\x02\x09automatic\x0e\
snapshot-based\x04\0\x0bupdate-mode\x03\0\x19\x01m\x06\x05equal\x09not-equal\x0d\
greater-equal\x07greater\x0aless-equal\x04less\x04\0\x11filter-comparator\x03\0\x1b\
\x01m\x05\x05equal\x09not-equal\x04like\x08not-like\x0bstarts-with\x04\0\x18stri\
ng-filter-comparator\x03\0\x1d\x01m\x07\x07running\x04idle\x09suspended\x0binter\
rupted\x08retrying\x06failed\x06exited\x04\0\x0dworker-status\x03\0\x1f\x01r\x02\
\x0acomparator\x1e\x05values\x04\0\x12worker-name-filter\x03\0!\x01r\x02\x0acomp\
arator\x1c\x05value\x20\x04\0\x14worker-status-filter\x03\0#\x01r\x02\x0acompara\
tor\x1c\x05valuew\x04\0\x15worker-version-filter\x03\0%\x01r\x02\x0acomparator\x1c\
\x05valuew\x04\0\x18worker-created-at-filter\x03\0'\x01r\x03\x04names\x0acompara\
tor\x1e\x05values\x04\0\x11worker-env-filter\x03\0)\x01r\x03\x04names\x0acompara\
tor\x1e\x05values\x04\0\x1eworker-wasi-config-vars-filter\x03\0+\x01q\x06\x04nam\
e\x01\"\0\x06status\x01$\0\x07version\x01&\0\x0acreated-at\x01(\0\x03env\x01*\0\x10\
wasi-config-vars\x01,\0\x04\0\x16worker-property-filter\x03\0-\x01p.\x01r\x01\x07\
filters/\x04\0\x11worker-all-filter\x03\00\x01p1\x01r\x01\x07filters2\x04\0\x11w\
orker-any-filter\x03\03\x01ps\x01o\x02ss\x01p6\x01r\x07\x09worker-id\x09\x04args\
5\x03env7\x10wasi-config-vars7\x06status\x20\x11component-versionw\x0bretry-coun\
tw\x04\0\x0fworker-metadata\x03\08\x04\0\x0bget-workers\x03\x01\x01q\x02\x15reve\
rt-to-oplog-index\x01\x0b\0\x17revert-last-invocations\x01w\0\x04\0\x14revert-wo\
rker-target\x03\0;\x01m\x02\x08original\x06forked\x04\0\x0bfork-result\x03\0=\x01\
k4\x01i:\x01@\x03\x0ccomponent-id\x03\x06filter?\x07precise\x7f\0\xc0\0\x04\0\x18\
[constructor]get-workers\x01A\x01h:\x01p9\x01k\xc3\0\x01@\x01\x04self\xc2\0\0\xc4\
\0\x04\0\x1c[method]get-workers.get-next\x01E\x01@\0\0\x0d\x04\0\x0ecreate-promi\
se\x01F\x01p}\x01@\x01\x0apromise-id\x0d\0\xc7\0\x04\0\x0dawait-promise\x01H\x01\
k\xc7\0\x01@\x01\x0apromise-id\x0d\0\xc9\0\x04\0\x0cpoll-promise\x01J\x01@\x02\x0a\
promise-id\x0d\x04data\xc7\0\0\x7f\x04\0\x10complete-promise\x01K\x01@\x01\x0apr\
omise-id\x0d\x01\0\x04\0\x0edelete-promise\x01L\x01@\0\0\x0b\x04\0\x0fget-oplog-\
index\x01M\x01@\x01\x09oplog-idx\x0b\x01\0\x04\0\x0fset-oplog-index\x01N\x01@\x01\
\x08replicas}\x01\0\x04\0\x0coplog-commit\x01O\x04\0\x14mark-begin-operation\x01\
M\x01@\x01\x05begin\x0b\x01\0\x04\0\x12mark-end-operation\x01P\x01@\0\0\x16\x04\0\
\x10get-retry-policy\x01Q\x01@\x01\x10new-retry-policy\x16\x01\0\x04\0\x10set-re\
try-policy\x01R\x01@\0\0\x18\x04\0\x1bget-oplog-persistence-level\x01S\x01@\x01\x15\
new-persistence-level\x18\x01\0\x04\0\x1bset-oplog-persistence-level\x01T\x01@\0\
\0\x7f\x04\0\x14get-idempotence-mode\x01U\x01@\x01\x0aidempotent\x7f\x01\0\x04\0\
\x14set-idempotence-mode\x01V\x01@\0\0\x05\x04\0\x18generate-idempotency-key\x01\
W\x01@\x03\x09worker-id\x09\x0etarget-version\x0f\x04mode\x1a\x01\0\x04\0\x0dupd\
ate-worker\x01X\x01@\0\09\x04\0\x11get-self-metadata\x01Y\x01k9\x01@\x01\x09work\
er-id\x09\0\xda\0\x04\0\x13get-worker-metadata\x01[\x01@\x03\x10source-worker-id\
\x09\x10target-worker-id\x09\x11oplog-idx-cut-off\x0b\x01\0\x04\0\x0bfork-worker\
\x01\\\x01@\x02\x09worker-id\x09\x0drevert-target<\x01\0\x04\0\x0drevert-worker\x01\
]\x01k\x03\x01@\x01\x13component-references\0\xde\0\x04\0\x14resolve-component-i\
d\x01_\x01k\x09\x01@\x02\x13component-references\x0bworker-names\0\xe0\0\x04\0\x11\
resolve-worker-id\x01a\x04\0\x18resolve-worker-id-strict\x01a\x01@\x01\x08new-na\
mes\0>\x04\0\x04fork\x01b\x03\0\x14golem:api/host@1.1.7\x05\x0b\x01B7\x02\x03\x02\
\x01\x02\x04\0\x08datetime\x03\0\0\x04\0\x04span\x03\x01\x04\0\x12invocation-con\
text\x03\x01\x01q\x01\x06string\x01s\0\x04\0\x0fattribute-value\x03\0\x04\x01r\x02\
\x03keys\x05value\x05\x04\0\x09attribute\x03\0\x06\x01p\x05\x01r\x02\x03keys\x06\
values\x08\x04\0\x0fattribute-chain\x03\0\x09\x01s\x04\0\x08trace-id\x03\0\x0b\x01\
s\x04\0\x07span-id\x03\0\x0d\x01h\x02\x01@\x01\x04self\x0f\0\x01\x04\0\x17[metho\
d]span.started-at\x01\x10\x01@\x03\x04self\x0f\x04names\x05value\x05\x01\0\x04\0\
\x1a[method]span.set-attribute\x01\x11\x01p\x07\x01@\x02\x04self\x0f\x0aattribut\
es\x12\x01\0\x04\0\x1b[method]span.set-attributes\x01\x13\x01@\x01\x04self\x0f\x01\
\0\x04\0\x13[method]span.finish\x01\x14\x01h\x03\x01@\x01\x04self\x15\0\x0c\x04\0\
#[method]invocation-context.trace-id\x01\x16\x01@\x01\x04self\x15\0\x0e\x04\0\"[\
method]invocation-context.span-id\x01\x17\x01i\x03\x01k\x18\x01@\x01\x04self\x15\
\0\x19\x04\0![method]invocation-context.parent\x01\x1a\x01k\x05\x01@\x03\x04self\
\x15\x03keys\x09inherited\x7f\0\x1b\x04\0([method]invocation-context.get-attribu\
te\x01\x1c\x01@\x02\x04self\x15\x09inherited\x7f\0\x12\x04\0)[method]invocation-\
context.get-attributes\x01\x1d\x01@\x02\x04self\x15\x03keys\0\x08\x04\0.[method]\
invocation-context.get-attribute-chain\x01\x1e\x01p\x0a\x01@\x01\x04self\x15\0\x1f\
\x04\0/[method]invocation-context.get-attribute-chains\x01\x20\x01o\x02ss\x01p!\x01\
@\x01\x04self\x15\0\"\x04\00[method]invocation-context.trace-context-headers\x01\
#\x01i\x02\x01@\x01\x04names\0$\x04\0\x0astart-span\x01%\x01@\0\0\x18\x04\0\x0fc\
urrent-context\x01&\x01@\x01\x05allow\x7f\0\x7f\x04\0&allow-forwarding-trace-con\
text-headers\x01'\x03\0\x17golem:api/context@1.1.7\x05\x0c\x02\x03\0\x02\x09wit-\
value\x02\x03\0\x04\x0aaccount-id\x02\x03\0\x04\x11component-version\x02\x03\0\x04\
\x0boplog-index\x02\x03\0\x04\x11persistence-level\x02\x03\0\x04\x0aproject-id\x02\
\x03\0\x04\x0cretry-policy\x02\x03\0\x04\x04uuid\x02\x03\0\x04\x09worker-id\x02\x03\
\0\x05\x09attribute\x02\x03\0\x05\x0fattribute-value\x02\x03\0\x05\x07span-id\x02\
\x03\0\x05\x08trace-id\x01B\x87\x01\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\
\x02\x03\x02\x01\x0d\x04\0\x09wit-value\x03\0\x02\x02\x03\x02\x01\x0e\x04\0\x0aa\
ccount-id\x03\0\x04\x02\x03\x02\x01\x0f\x04\0\x11component-version\x03\0\x06\x02\
\x03\x02\x01\x10\x04\0\x0boplog-index\x03\0\x08\x02\x03\x02\x01\x11\x04\0\x11per\
sistence-level\x03\0\x0a\x02\x03\x02\x01\x12\x04\0\x0aproject-id\x03\0\x0c\x02\x03\
\x02\x01\x13\x04\0\x0cretry-policy\x03\0\x0e\x02\x03\x02\x01\x14\x04\0\x04uuid\x03\
\0\x10\x02\x03\x02\x01\x15\x04\0\x09worker-id\x03\0\x12\x02\x03\x02\x01\x16\x04\0\
\x09attribute\x03\0\x14\x02\x03\x02\x01\x17\x04\0\x0fattribute-value\x03\0\x16\x02\
\x03\x02\x01\x18\x04\0\x07span-id\x03\0\x18\x02\x03\x02\x01\x19\x04\0\x08trace-i\
d\x03\0\x1a\x01k\x09\x01q\x05\x0aread-local\0\0\x0bwrite-local\0\0\x0bread-remot\
e\0\0\x0cwrite-remote\0\0\x14write-remote-batched\x01\x1c\0\x04\0\x15wrapped-fun\
ction-type\x03\0\x1d\x01o\x02ss\x01p\x1f\x01r\x04\x0finstallation-id\x11\x04name\
s\x07versions\x0aparameters\x20\x04\0\x1fplugin-installation-description\x03\0!\x01\
ps\x01k\x13\x01p\"\x01r\x0b\x09timestamp\x01\x09worker-id\x13\x11component-versi\
on\x07\x04args#\x03env\x20\x0acreated-by\x05\x0aproject-id\x0d\x06parent$\x0ecom\
ponent-sizew\x20initial-total-linear-memory-sizew\x16initial-active-plugins%\x04\
\0\x11create-parameters\x03\0&\x01r\x05\x09timestamp\x01\x0dfunction-names\x07re\
quest\x03\x08response\x03\x15wrapped-function-type\x1e\x04\0$imported-function-i\
nvoked-parameters\x03\0(\x01k\x19\x01kw\x01p\x15\x01r\x06\x07span-id\x19\x05star\
t\x01\x06parent*\x0elinked-context+\x0aattributes,\x09inherited\x7f\x04\0\x0floc\
al-span-data\x03\0-\x01r\x01\x07span-id\x19\x04\0\x12external-span-data\x03\0/\x01\
q\x02\x0alocal-span\x01.\0\x0dexternal-span\x010\0\x04\0\x09span-data\x03\01\x01\
p\x03\x01p2\x01p4\x01r\x07\x09timestamp\x01\x0dfunction-names\x07request3\x0fide\
mpotency-keys\x08trace-id\x1b\x0ctrace-states#\x12invocation-context5\x04\0$expo\
rted-function-invoked-parameters\x03\06\x01k\x03\x01r\x03\x09timestamp\x01\x08re\
sponse8\x0dconsumed-fuelx\x04\0&exported-function-completed-parameters\x03\09\x01\
r\x02\x09timestamp\x01\x05errors\x04\0\x10error-parameters\x03\0;\x01r\x03\x09ti\
mestamp\x01\x05start\x09\x03end\x09\x04\0\x0fjump-parameters\x03\0=\x01r\x02\x09\
timestamp\x01\x0cretry-policy\x0f\x04\0\x1echange-retry-policy-parameters\x03\0?\
\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\x1cend-atomic-region-paramet\
ers\x03\0A\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\x1bend-remote-writ\
e-parameters\x03\0C\x01k3\x01r\x03\x0fidempotency-keys\x0dfunction-names\x05inpu\
t\xc5\0\x04\0'exported-function-invocation-parameters\x03\0F\x01q\x02\x11exporte\
d-function\x01\xc7\0\0\x0dmanual-update\x01\x07\0\x04\0\x11worker-invocation\x03\
\0H\x01r\x02\x09timestamp\x01\x0ainvocation\xc9\0\x04\0$pending-worker-invocatio\
n-parameters\x03\0J\x01p}\x01q\x02\x0bauto-update\0\0\x0esnapshot-based\x01\xcc\0\
\0\x04\0\x12update-description\x03\0M\x01r\x03\x09timestamp\x01\x0etarget-versio\
n\x07\x12update-description\xce\0\x04\0\x19pending-update-parameters\x03\0O\x01r\
\x04\x09timestamp\x01\x0etarget-version\x07\x12new-component-sizew\x12new-active\
-plugins%\x04\0\x1csuccessful-update-parameters\x03\0Q\x01ks\x01r\x03\x09timesta\
mp\x01\x0etarget-version\x07\x07details\xd3\0\x04\0\x18failed-update-parameters\x03\
\0T\x01r\x02\x09timestamp\x01\x05deltaw\x04\0\x16grow-memory-parameters\x03\0V\x01\
w\x04\0\x12worker-resource-id\x03\0X\x01r\x04\x09timestamp\x01\x0bresource-id\xd9\
\0\x04names\x05owners\x04\0\x1acreate-resource-parameters\x03\0Z\x01r\x04\x09tim\
estamp\x01\x0bresource-id\xd9\0\x04names\x05owners\x04\0\x18drop-resource-parame\
ters\x03\0\\\x01m\x08\x06stdout\x06stderr\x05trace\x05debug\x04info\x04warn\x05e\
rror\x08critical\x04\0\x09log-level\x03\0^\x01r\x04\x09timestamp\x01\x05level\xdf\
\0\x07contexts\x07messages\x04\0\x0elog-parameters\x03\0`\x01r\x02\x09timestamp\x01\
\x06plugin\"\x04\0\x1aactivate-plugin-parameters\x03\0b\x01r\x02\x09timestamp\x01\
\x06plugin\"\x04\0\x1cdeactivate-plugin-parameters\x03\0d\x01r\x03\x09timestamp\x01\
\x05start\x09\x03end\x09\x04\0\x11revert-parameters\x03\0f\x01r\x02\x09timestamp\
\x01\x0fidempotency-keys\x04\0\x1ccancel-invocation-parameters\x03\0h\x01r\x05\x09\
timestamp\x01\x07span-id\x19\x06parent*\x0elinked-context*\x0aattributes,\x04\0\x15\
start-span-parameters\x03\0j\x01r\x02\x09timestamp\x01\x07span-id\x19\x04\0\x16f\
inish-span-parameters\x03\0l\x01r\x04\x09timestamp\x01\x07span-id\x19\x03keys\x05\
value\x17\x04\0\x1dset-span-attribute-parameters\x03\0n\x01r\x02\x09timestamp\x01\
\x11persistence-level\x0b\x04\0#change-persistence-level-parameters\x03\0p\x01q\x20\
\x06create\x01'\0\x19imported-function-invoked\x01)\0\x19exported-function-invok\
ed\x017\0\x1bexported-function-completed\x01:\0\x07suspend\x01\x01\0\x05error\x01\
<\0\x05no-op\x01\x01\0\x04jump\x01>\0\x0binterrupted\x01\x01\0\x06exited\x01\x01\
\0\x13change-retry-policy\x01\xc0\0\0\x13begin-atomic-region\x01\x01\0\x11end-at\
omic-region\x01\xc2\0\0\x12begin-remote-write\x01\x01\0\x10end-remote-write\x01\xc4\
\0\0\x19pending-worker-invocation\x01\xcb\0\0\x0epending-update\x01\xd0\0\0\x11s\
uccessful-update\x01\xd2\0\0\x0dfailed-update\x01\xd5\0\0\x0bgrow-memory\x01\xd7\
\0\0\x0fcreate-resource\x01\xdb\0\0\x0ddrop-resource\x01\xdd\0\0\x03log\x01\xe1\0\
\0\x07restart\x01\x01\0\x0factivate-plugin\x01\xe3\0\0\x11deactivate-plugin\x01\xe5\
\0\0\x06revert\x01\xe7\0\0\x11cancel-invocation\x01\xe9\0\0\x0astart-span\x01\xeb\
\0\0\x0bfinish-span\x01\xed\0\0\x12set-span-attribute\x01\xef\0\0\x18change-pers\
istence-level\x01\xf1\0\0\x04\0\x0boplog-entry\x03\0r\x04\0\x09get-oplog\x03\x01\
\x04\0\x0csearch-oplog\x03\x01\x01it\x01@\x02\x09worker-id\x13\x05start\x09\0\xf6\
\0\x04\0\x16[constructor]get-oplog\x01w\x01ht\x01p\xf3\0\x01k\xf9\0\x01@\x01\x04\
self\xf8\0\0\xfa\0\x04\0\x1a[method]get-oplog.get-next\x01{\x01iu\x01@\x02\x09wo\
rker-id\x13\x04texts\0\xfc\0\x04\0\x19[constructor]search-oplog\x01}\x01hu\x01o\x02\
\x09\xf3\0\x01p\xff\0\x01k\x80\x01\x01@\x01\x04self\xfe\0\0\x81\x01\x04\0\x1d[me\
thod]search-oplog.get-next\x01\x82\x01\x03\0\x15golem:api/oplog@1.1.7\x05\x1a\x01\
B\x03\x01ps\x01@\0\0\0\x04\0\x15get-invoked-functions\x01\x01\x04\0\x13golem:com\
ponent/api\x05\x1b\x02\x03\0\x04\x0fworker-metadata\x02\x03\0\x06\x0boplog-entry\
\x01B\x18\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\x0d\x04\0\
\x09wit-value\x03\0\x02\x02\x03\x02\x01\x0e\x04\0\x0aaccount-id\x03\0\x04\x02\x03\
\x02\x01\x10\x04\0\x0boplog-index\x03\0\x06\x02\x03\x02\x01\x1c\x04\0\x0fworker-\
metadata\x03\0\x08\x02\x03\x02\x01\x1d\x04\0\x0boplog-entry\x03\0\x0a\x02\x03\x02\
\x01\x07\x04\0\x0ccomponent-id\x03\0\x0c\x02\x03\x02\x01\x0a\x04\0\x09worker-id\x03\
\0\x0e\x01r\x01\x0aaccount-id\x05\x04\0\x0caccount-info\x03\0\x10\x01o\x02ss\x01\
p\x12\x01p\x0b\x01j\0\x01s\x01@\x07\x0caccount-info\x11\x06config\x13\x0ccompone\
nt-id\x0d\x09worker-id\x0f\x08metadata\x09\x11first-entry-index\x07\x07entries\x14\
\0\x15\x04\0\x07process\x01\x16\x04\0\x1fgolem:api/oplog-processor@1.1.7\x05\x1e\
\x04\0\x1fgolem:component/oplog-processor\x04\0\x0b\x15\x01\0\x0foplog-processor\
\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10\
wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
