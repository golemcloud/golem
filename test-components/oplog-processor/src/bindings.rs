// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod api {
        /// The Golem host API provides low level access to Golem specific features such as promises and control over
        /// the durability and transactional guarantees the executor provides.
        #[allow(dead_code, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            /// An index into the persistent log storing all performed operations of a worker
            pub type OplogIndex = u64;
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem worker
            #[derive(Clone)]
            pub struct WorkerId {
                pub component_id: ComponentId,
                pub worker_name: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId")
                        .field("component-id", &self.component_id)
                        .field("worker-name", &self.worker_name)
                        .finish()
                }
            }
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem workers can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub worker_id: WorkerId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("worker-id", &self.worker_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem Cloud account
            #[derive(Clone)]
            pub struct AccountId {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AccountId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AccountId").field("value", &self.value).finish()
                }
            }
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the worker becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for workers
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                                .finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update a worker to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the worker using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the worker's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => {
                            f.debug_tuple("UpdateMode::Automatic").finish()
                        }
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }
            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => {
                            f.debug_tuple("FilterComparator::Less").finish()
                        }
                    }
                }
            }
            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                    }
                }
            }
            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum WorkerStatus {
                /// The worker is running an invoked function
                Running,
                /// The worker is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the worker can no longer be used
                Failed,
                /// The worker exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for WorkerStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerStatus::Running => {
                            f.debug_tuple("WorkerStatus::Running").finish()
                        }
                        WorkerStatus::Idle => {
                            f.debug_tuple("WorkerStatus::Idle").finish()
                        }
                        WorkerStatus::Suspended => {
                            f.debug_tuple("WorkerStatus::Suspended").finish()
                        }
                        WorkerStatus::Interrupted => {
                            f.debug_tuple("WorkerStatus::Interrupted").finish()
                        }
                        WorkerStatus::Retrying => {
                            f.debug_tuple("WorkerStatus::Retrying").finish()
                        }
                        WorkerStatus::Failed => {
                            f.debug_tuple("WorkerStatus::Failed").finish()
                        }
                        WorkerStatus::Exited => {
                            f.debug_tuple("WorkerStatus::Exited").finish()
                        }
                    }
                }
            }
            impl WorkerStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WorkerStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WorkerStatus::Running,
                        1 => WorkerStatus::Idle,
                        2 => WorkerStatus::Suspended,
                        3 => WorkerStatus::Interrupted,
                        4 => WorkerStatus::Retrying,
                        5 => WorkerStatus::Failed,
                        6 => WorkerStatus::Exited,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerNameFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerStatusFilter {
                pub comparator: FilterComparator,
                pub value: WorkerStatus,
            }
            impl ::core::fmt::Debug for WorkerStatusFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerVersionFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerCreatedAtFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerEnvFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerPropertyFilter {
                Name(WorkerNameFilter),
                Status(WorkerStatusFilter),
                Version(WorkerVersionFilter),
                CreatedAt(WorkerCreatedAtFilter),
                Env(WorkerEnvFilter),
            }
            impl ::core::fmt::Debug for WorkerPropertyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerPropertyFilter::Name(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Name").field(e).finish()
                        }
                        WorkerPropertyFilter::Status(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Status")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Version(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Version")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("WorkerPropertyFilter::CreatedAt")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Env(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Env").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerAllFilter {
                pub filters: _rt::Vec<WorkerPropertyFilter>,
            }
            impl ::core::fmt::Debug for WorkerAllFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerAnyFilter {
                pub filters: _rt::Vec<WorkerAllFilter>,
            }
            impl ::core::fmt::Debug for WorkerAnyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerMetadata {
                pub worker_id: WorkerId,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub status: WorkerStatus,
                pub component_version: u64,
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for WorkerMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerMetadata")
                        .field("worker-id", &self.worker_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetWorkers {
                handle: _rt::Resource<GetWorkers>,
            }
            impl GetWorkers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetWorkers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]get-workers"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&WorkerAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let ComponentId { uuid: uuid0 } = component_id;
                        let Uuid { high_bits: high_bits1, low_bits: low_bits1 } = uuid0;
                        let (result14_0, result14_1, result14_2) = match filter {
                            Some(e) => {
                                let WorkerAnyFilter { filters: filters2 } = e;
                                let vec13 = filters2;
                                let len13 = vec13.len();
                                let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec13.len() * 8,
                                    4,
                                );
                                let result13 = if layout13.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout13);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec13.into_iter().enumerate() {
                                    let base = result13.add(i * 8);
                                    {
                                        let WorkerAllFilter { filters: filters3 } = e;
                                        let vec12 = filters3;
                                        let len12 = vec12.len();
                                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec12.len() * 32,
                                            8,
                                        );
                                        let result12 = if layout12.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout12);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec12.into_iter().enumerate() {
                                            let base = result12.add(i * 32);
                                            {
                                                match e {
                                                    WorkerPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let WorkerNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator4.clone() as i32)
                                                            as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base.add(16).cast::<usize>() = len5;
                                                        *base.add(12).cast::<*mut u8>() = ptr5.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let WorkerStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator6.clone() as i32)
                                                            as u8;
                                                        *base.add(9).cast::<u8>() = (value6.clone() as i32) as u8;
                                                    }
                                                    WorkerPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let WorkerVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator7.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value7);
                                                    }
                                                    WorkerPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let WorkerCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator8.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value8);
                                                    }
                                                    WorkerPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let WorkerEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base.add(12).cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        *base.add(16).cast::<u8>() = (comparator9.clone() as i32)
                                                            as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base.add(24).cast::<usize>() = len11;
                                                        *base.add(20).cast::<*mut u8>() = ptr11.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(4).cast::<usize>() = len12;
                                        *base.add(0).cast::<*mut u8>() = result12;
                                        cleanup_list.extend_from_slice(&[(result12, layout12)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result13, layout13)]);
                                (1i32, result13, len13)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]get-workers"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits1),
                            _rt::as_i64(low_bits1),
                            result14_0,
                            result14_1,
                            result14_2,
                            match &precise {
                                true => 1,
                                false => 0,
                            },
                        );
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        GetWorkers::from_handle(ret as u32)
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<WorkerMetadata>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.0")]
                        extern "C" {
                            #[link_name = "[method]get-workers.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base27 = l2;
                                    let len27 = l3;
                                    let mut result27 = _rt::Vec::with_capacity(len27);
                                    for i in 0..len27 {
                                        let base = base27.add(i * 64);
                                        let e27 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = *base.add(8).cast::<i64>();
                                            let l6 = *base.add(16).cast::<*mut u8>();
                                            let l7 = *base.add(20).cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                l6.cast(),
                                                len8,
                                                len8,
                                            );
                                            let l9 = *base.add(24).cast::<*mut u8>();
                                            let l10 = *base.add(28).cast::<usize>();
                                            let base14 = l9;
                                            let len14 = l10;
                                            let mut result14 = _rt::Vec::with_capacity(len14);
                                            for i in 0..len14 {
                                                let base = base14.add(i * 8);
                                                let e14 = {
                                                    let l11 = *base.add(0).cast::<*mut u8>();
                                                    let l12 = *base.add(4).cast::<usize>();
                                                    let len13 = l12;
                                                    let bytes13 = _rt::Vec::from_raw_parts(
                                                        l11.cast(),
                                                        len13,
                                                        len13,
                                                    );
                                                    _rt::string_lift(bytes13)
                                                };
                                                result14.push(e14);
                                            }
                                            _rt::cabi_dealloc(base14, len14 * 8, 4);
                                            let l15 = *base.add(32).cast::<*mut u8>();
                                            let l16 = *base.add(36).cast::<usize>();
                                            let base23 = l15;
                                            let len23 = l16;
                                            let mut result23 = _rt::Vec::with_capacity(len23);
                                            for i in 0..len23 {
                                                let base = base23.add(i * 16);
                                                let e23 = {
                                                    let l17 = *base.add(0).cast::<*mut u8>();
                                                    let l18 = *base.add(4).cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                    let l21 = *base.add(12).cast::<usize>();
                                                    let len22 = l21;
                                                    let bytes22 = _rt::Vec::from_raw_parts(
                                                        l20.cast(),
                                                        len22,
                                                        len22,
                                                    );
                                                    (_rt::string_lift(bytes19), _rt::string_lift(bytes22))
                                                };
                                                result23.push(e23);
                                            }
                                            _rt::cabi_dealloc(base23, len23 * 16, 4);
                                            let l24 = i32::from(*base.add(40).cast::<u8>());
                                            let l25 = *base.add(48).cast::<i64>();
                                            let l26 = *base.add(56).cast::<i64>();
                                            WorkerMetadata {
                                                worker_id: WorkerId {
                                                    component_id: ComponentId {
                                                        uuid: Uuid {
                                                            high_bits: l4 as u64,
                                                            low_bits: l5 as u64,
                                                        },
                                                    },
                                                    worker_name: _rt::string_lift(bytes8),
                                                },
                                                args: result14,
                                                env: result23,
                                                status: WorkerStatus::_lift(l24 as u8),
                                                component_version: l25 as u64,
                                                retry_count: l26 as u64,
                                            }
                                        };
                                        result27.push(e27);
                                    }
                                    _rt::cabi_dealloc(base27, len27 * 64, 8);
                                    result27
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                    let l4 = *ptr0.add(20).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *ptr0.add(24).cast::<i64>();
                    PromiseId {
                        worker_id: WorkerId {
                            component_id: ComponentId {
                                uuid: Uuid {
                                    high_bits: l1 as u64,
                                    low_bits: l2 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        oplog_idx: l6 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Suspends execution until the given promise gets completed, and returns the payload passed to
            /// the promise completion.
            pub fn await_promise(promise_id: &PromiseId) -> _rt::Vec<u8> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "await-promise"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5,
                    );
                    let l6 = *ptr5.add(0).cast::<*mut u8>();
                    let l7 = *ptr5.add(4).cast::<usize>();
                    let len8 = l7;
                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the worker that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5.cast_mut(),
                        len5,
                    );
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Deletes the given promise
            pub fn delete_promise(promise_id: &PromiseId) {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "delete-promise"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current worker travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(oplog_idx));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i32(&replicas));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(begin));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the worker
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i32>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<i64>();
                    let l4 = *ptr0.add(24).cast::<f64>();
                    let l5 = i32::from(*ptr0.add(32).cast::<u8>());
                    RetryPolicy {
                        max_attempts: l1 as u32,
                        min_delay: l2 as u64,
                        max_delay: l3 as u64,
                        multiplier: l4,
                        max_jitter_factor: match l5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l6 = *ptr0.add(40).cast::<f64>();
                                    l6
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the worker. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i32(max_attempts0),
                        _rt::as_i64(min_delay0),
                        _rt::as_i64(max_delay0),
                        _rt::as_f64(multiplier0),
                        result1_0,
                        result1_1,
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the worker's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    let v0 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v0
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the worker's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(new_persistence_level: PersistenceLevel) {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(result0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the worker in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(
                        match &idempotent {
                            true => 1,
                            false => 0,
                        },
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    Uuid {
                        high_bits: l1 as u64,
                        low_bits: l2 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given worker. The function returns immediately once the request has been processed,
            /// not waiting for the worker to get updated.
            pub fn update_worker(
                worker_id: &WorkerId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) {
                unsafe {
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "update-worker"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: i32) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        _rt::as_i64(target_version),
                        mode.clone() as i32,
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get current worker metadata
            pub fn get_self_metadata() -> WorkerMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 64]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                    let l4 = *ptr0.add(20).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *ptr0.add(24).cast::<*mut u8>();
                    let l7 = *ptr0.add(28).cast::<usize>();
                    let base11 = l6;
                    let len11 = l7;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11.add(i * 8);
                        let e11 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(
                                l8.cast(),
                                len10,
                                len10,
                            );
                            _rt::string_lift(bytes10)
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(base11, len11 * 8, 4);
                    let l12 = *ptr0.add(32).cast::<*mut u8>();
                    let l13 = *ptr0.add(36).cast::<usize>();
                    let base20 = l12;
                    let len20 = l13;
                    let mut result20 = _rt::Vec::with_capacity(len20);
                    for i in 0..len20 {
                        let base = base20.add(i * 16);
                        let e20 = {
                            let l14 = *base.add(0).cast::<*mut u8>();
                            let l15 = *base.add(4).cast::<usize>();
                            let len16 = l15;
                            let bytes16 = _rt::Vec::from_raw_parts(
                                l14.cast(),
                                len16,
                                len16,
                            );
                            let l17 = *base.add(8).cast::<*mut u8>();
                            let l18 = *base.add(12).cast::<usize>();
                            let len19 = l18;
                            let bytes19 = _rt::Vec::from_raw_parts(
                                l17.cast(),
                                len19,
                                len19,
                            );
                            (_rt::string_lift(bytes16), _rt::string_lift(bytes19))
                        };
                        result20.push(e20);
                    }
                    _rt::cabi_dealloc(base20, len20 * 16, 4);
                    let l21 = i32::from(*ptr0.add(40).cast::<u8>());
                    let l22 = *ptr0.add(48).cast::<i64>();
                    let l23 = *ptr0.add(56).cast::<i64>();
                    WorkerMetadata {
                        worker_id: WorkerId {
                            component_id: ComponentId {
                                uuid: Uuid {
                                    high_bits: l1 as u64,
                                    low_bits: l2 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        args: result11,
                        env: result20,
                        status: WorkerStatus::_lift(l21 as u8),
                        component_version: l22 as u64,
                        retry_count: l23 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get worker metadata
            pub fn get_worker_metadata(worker_id: &WorkerId) -> Option<WorkerMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 72]);
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.0")]
                    extern "C" {
                        #[link_name = "get-worker-metadata"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => None,
                        1 => {
                            let e = {
                                let l6 = *ptr4.add(8).cast::<i64>();
                                let l7 = *ptr4.add(16).cast::<i64>();
                                let l8 = *ptr4.add(24).cast::<*mut u8>();
                                let l9 = *ptr4.add(28).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                let l11 = *ptr4.add(32).cast::<*mut u8>();
                                let l12 = *ptr4.add(36).cast::<usize>();
                                let base16 = l11;
                                let len16 = l12;
                                let mut result16 = _rt::Vec::with_capacity(len16);
                                for i in 0..len16 {
                                    let base = base16.add(i * 8);
                                    let e16 = {
                                        let l13 = *base.add(0).cast::<*mut u8>();
                                        let l14 = *base.add(4).cast::<usize>();
                                        let len15 = l14;
                                        let bytes15 = _rt::Vec::from_raw_parts(
                                            l13.cast(),
                                            len15,
                                            len15,
                                        );
                                        _rt::string_lift(bytes15)
                                    };
                                    result16.push(e16);
                                }
                                _rt::cabi_dealloc(base16, len16 * 8, 4);
                                let l17 = *ptr4.add(40).cast::<*mut u8>();
                                let l18 = *ptr4.add(44).cast::<usize>();
                                let base25 = l17;
                                let len25 = l18;
                                let mut result25 = _rt::Vec::with_capacity(len25);
                                for i in 0..len25 {
                                    let base = base25.add(i * 16);
                                    let e25 = {
                                        let l19 = *base.add(0).cast::<*mut u8>();
                                        let l20 = *base.add(4).cast::<usize>();
                                        let len21 = l20;
                                        let bytes21 = _rt::Vec::from_raw_parts(
                                            l19.cast(),
                                            len21,
                                            len21,
                                        );
                                        let l22 = *base.add(8).cast::<*mut u8>();
                                        let l23 = *base.add(12).cast::<usize>();
                                        let len24 = l23;
                                        let bytes24 = _rt::Vec::from_raw_parts(
                                            l22.cast(),
                                            len24,
                                            len24,
                                        );
                                        (_rt::string_lift(bytes21), _rt::string_lift(bytes24))
                                    };
                                    result25.push(e25);
                                }
                                _rt::cabi_dealloc(base25, len25 * 16, 4);
                                let l26 = i32::from(*ptr4.add(48).cast::<u8>());
                                let l27 = *ptr4.add(56).cast::<i64>();
                                let l28 = *ptr4.add(64).cast::<i64>();
                                WorkerMetadata {
                                    worker_id: WorkerId {
                                        component_id: ComponentId {
                                            uuid: Uuid {
                                                high_bits: l6 as u64,
                                                low_bits: l7 as u64,
                                            },
                                        },
                                        worker_name: _rt::string_lift(bytes10),
                                    },
                                    args: result16,
                                    env: result25,
                                    status: WorkerStatus::_lift(l26 as u8),
                                    component_version: l27 as u64,
                                    retry_count: l28 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
        /// Host interface for enumerating and searching for worker oplogs
        #[allow(dead_code, clippy::all)]
        pub mod oplog {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type WitValue = super::super::super::golem::rpc::types::WitValue;
            pub type AccountId = super::super::super::golem::api::host::AccountId;
            pub type ComponentVersion = super::super::super::golem::api::host::ComponentVersion;
            pub type OplogIndex = super::super::super::golem::api::host::OplogIndex;
            pub type RetryPolicy = super::super::super::golem::api::host::RetryPolicy;
            pub type Uuid = super::super::super::golem::api::host::Uuid;
            pub type WorkerId = super::super::super::golem::api::host::WorkerId;
            #[derive(Clone, Copy)]
            pub enum WrappedFunctionType {
                /// The side-effect reads from the worker's local state (for example local file system,
                /// random generator, etc.)
                ReadLocal,
                /// The side-effect writes to the worker's local state (for example local file system)
                WriteLocal,
                /// The side-effect reads from external state (for example a key-value store)
                ReadRemote,
                /// The side-effect manipulates external state (for example an RPC call)
                WriteRemote,
                /// The side-effect manipulates external state through multiple invoked functions (for example
                /// a HTTP request where reading the response involves multiple host function calls)
                ///
                /// On the first invocation of the batch, the parameter should be `None` - this triggers
                /// writing a `BeginRemoteWrite` entry in the oplog. Followup invocations should contain
                /// this entry's index as the parameter. In batched remote writes it is the caller's responsibility
                /// to manually write an `EndRemoteWrite` entry (using `end_function`) when the operation is completed.
                WriteRemoteBatched(Option<OplogIndex>),
            }
            impl ::core::fmt::Debug for WrappedFunctionType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WrappedFunctionType::ReadLocal => {
                            f.debug_tuple("WrappedFunctionType::ReadLocal").finish()
                        }
                        WrappedFunctionType::WriteLocal => {
                            f.debug_tuple("WrappedFunctionType::WriteLocal").finish()
                        }
                        WrappedFunctionType::ReadRemote => {
                            f.debug_tuple("WrappedFunctionType::ReadRemote").finish()
                        }
                        WrappedFunctionType::WriteRemote => {
                            f.debug_tuple("WrappedFunctionType::WriteRemote").finish()
                        }
                        WrappedFunctionType::WriteRemoteBatched(e) => {
                            f.debug_tuple("WrappedFunctionType::WriteRemoteBatched")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PluginInstallationDescription {
                pub installation_id: Uuid,
                pub name: _rt::String,
                pub version: _rt::String,
                pub parameters: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for PluginInstallationDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PluginInstallationDescription")
                        .field("installation-id", &self.installation_id)
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("parameters", &self.parameters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CreateParameters {
                pub timestamp: Datetime,
                pub worker_id: WorkerId,
                pub component_version: ComponentVersion,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub account_id: AccountId,
                pub parent: Option<WorkerId>,
                pub component_size: u64,
                pub initial_total_linear_memory_size: u64,
                pub initial_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for CreateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("worker-id", &self.worker_id)
                        .field("component-version", &self.component_version)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("account-id", &self.account_id)
                        .field("parent", &self.parent)
                        .field("component-size", &self.component_size)
                        .field(
                            "initial-total-linear-memory-size",
                            &self.initial_total_linear_memory_size,
                        )
                        .field("initial-active-plugins", &self.initial_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ImportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: WitValue,
                pub response: WitValue,
                pub wrapped_function_type: WrappedFunctionType,
            }
            impl ::core::fmt::Debug for ImportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("response", &self.response)
                        .field("wrapped-function-type", &self.wrapped_function_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: _rt::Vec<WitValue>,
                pub idempotency_key: _rt::String,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("idempotency-key", &self.idempotency_key)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionCompletedParameters {
                pub timestamp: Datetime,
                pub response: WitValue,
                pub consumed_fuel: i64,
            }
            impl ::core::fmt::Debug for ExportedFunctionCompletedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionCompletedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("response", &self.response)
                        .field("consumed-fuel", &self.consumed_fuel)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ErrorParameters {
                pub timestamp: Datetime,
                pub error: _rt::String,
            }
            impl ::core::fmt::Debug for ErrorParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ErrorParameters")
                        .field("timestamp", &self.timestamp)
                        .field("error", &self.error)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct JumpParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for JumpParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JumpParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangeRetryPolicyParameters {
                pub timestamp: Datetime,
                pub retry_policy: RetryPolicy,
            }
            impl ::core::fmt::Debug for ChangeRetryPolicyParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChangeRetryPolicyParameters")
                        .field("timestamp", &self.timestamp)
                        .field("retry-policy", &self.retry_policy)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndAtomicRegionParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndAtomicRegionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndAtomicRegionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndRemoteWriteParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndRemoteWriteParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndRemoteWriteParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvocationParameters {
                pub idempotency_key: _rt::String,
                pub function_name: _rt::String,
                pub input: Option<_rt::Vec<WitValue>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvocationParameters")
                        .field("idempotency-key", &self.idempotency_key)
                        .field("function-name", &self.function_name)
                        .field("input", &self.input)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerInvocation {
                ExportedFunction(ExportedFunctionInvocationParameters),
                ManualUpdate(ComponentVersion),
            }
            impl ::core::fmt::Debug for WorkerInvocation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerInvocation::ExportedFunction(e) => {
                            f.debug_tuple("WorkerInvocation::ExportedFunction")
                                .field(e)
                                .finish()
                        }
                        WorkerInvocation::ManualUpdate(e) => {
                            f.debug_tuple("WorkerInvocation::ManualUpdate")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingWorkerInvocationParameters {
                pub timestamp: Datetime,
                pub invocation: WorkerInvocation,
            }
            impl ::core::fmt::Debug for PendingWorkerInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingWorkerInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("invocation", &self.invocation)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum UpdateDescription {
                /// Automatic update by replaying the oplog on the new version
                AutoUpdate,
                /// Custom update by loading a given snapshot on the new version
                SnapshotBased(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for UpdateDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateDescription::AutoUpdate => {
                            f.debug_tuple("UpdateDescription::AutoUpdate").finish()
                        }
                        UpdateDescription::SnapshotBased(e) => {
                            f.debug_tuple("UpdateDescription::SnapshotBased")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub update_description: UpdateDescription,
            }
            impl ::core::fmt::Debug for PendingUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("update-description", &self.update_description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SuccessfulUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub new_component_size: u64,
                pub new_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for SuccessfulUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SuccessfulUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("new-component-size", &self.new_component_size)
                        .field("new-active-plugins", &self.new_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FailedUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub details: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for FailedUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FailedUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("details", &self.details)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct GrowMemoryParameters {
                pub timestamp: Datetime,
                pub delta: u64,
            }
            impl ::core::fmt::Debug for GrowMemoryParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GrowMemoryParameters")
                        .field("timestamp", &self.timestamp)
                        .field("delta", &self.delta)
                        .finish()
                }
            }
            pub type WorkerResourceId = u64;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct CreateResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
            }
            impl ::core::fmt::Debug for CreateResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct DropResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
            }
            impl ::core::fmt::Debug for DropResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DropResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DescribeResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
                pub resource_name: _rt::String,
                pub resource_params: _rt::Vec<WitValue>,
            }
            impl ::core::fmt::Debug for DescribeResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DescribeResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("resource-name", &self.resource_name)
                        .field("resource-params", &self.resource_params)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum LogLevel {
                Stdout,
                Stderr,
                Trace,
                Debug,
                Info,
                Warn,
                Error,
                Critical,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Stdout => f.debug_tuple("LogLevel::Stdout").finish(),
                        LogLevel::Stderr => f.debug_tuple("LogLevel::Stderr").finish(),
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => {
                            f.debug_tuple("LogLevel::Critical").finish()
                        }
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Stdout,
                        1 => LogLevel::Stderr,
                        2 => LogLevel::Trace,
                        3 => LogLevel::Debug,
                        4 => LogLevel::Info,
                        5 => LogLevel::Warn,
                        6 => LogLevel::Error,
                        7 => LogLevel::Critical,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct LogParameters {
                pub timestamp: Datetime,
                pub level: LogLevel,
                pub context: _rt::String,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for LogParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LogParameters")
                        .field("timestamp", &self.timestamp)
                        .field("level", &self.level)
                        .field("context", &self.context)
                        .field("message", &self.message)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ActivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for ActivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ActivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DeactivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for DeactivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DeactivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum OplogEntry {
                /// The initial worker oplog entry
                Create(CreateParameters),
                /// The worker invoked a host function
                ImportedFunctionInvoked(ImportedFunctionInvokedParameters),
                /// The worker has been invoked
                ExportedFunctionInvoked(ExportedFunctionInvokedParameters),
                /// The worker has completed an invocation
                ExportedFunctionCompleted(ExportedFunctionCompletedParameters),
                /// Worker suspended
                Suspend(Datetime),
                /// Worker failed
                Error(ErrorParameters),
                /// Marker entry added when get-oplog-index is called from the worker, to make the jumping behavior
                /// more predictable.
                NoOp(Datetime),
                /// The worker needs to recover up to the given target oplog index and continue running from
                /// the source oplog index from there
                /// `jump` is an oplog region representing that from the end of that region we want to go back to the start and
                /// ignore all recorded operations in between.
                Jump(JumpParameters),
                /// Indicates that the worker has been interrupted at this point.
                /// Only used to recompute the worker's (cached) status, has no effect on execution.
                Interrupted(Datetime),
                /// Indicates that the worker has been exited using WASI's exit function.
                Exited(Datetime),
                /// Overrides the worker's retry policy
                ChangeRetryPolicy(ChangeRetryPolicyParameters),
                /// Begins an atomic region. All oplog entries after `BeginAtomicRegion` are to be ignored during
                /// recovery except if there is a corresponding `EndAtomicRegion` entry.
                BeginAtomicRegion(Datetime),
                /// Ends an atomic region. All oplog entries between the corresponding `BeginAtomicRegion` and this
                /// entry are to be considered during recovery, and the begin/end markers can be removed during oplog
                /// compaction.
                EndAtomicRegion(EndAtomicRegionParameters),
                /// Begins a remote write operation. Only used when idempotence mode is off. In this case each
                /// remote write must be surrounded by a `BeginRemoteWrite` and `EndRemoteWrite` log pair and
                /// unfinished remote writes cannot be recovered.
                BeginRemoteWrite(Datetime),
                /// Marks the end of a remote write operation. Only used when idempotence mode is off.
                EndRemoteWrite(EndRemoteWriteParameters),
                /// An invocation request arrived while the worker was busy
                PendingWorkerInvocation(PendingWorkerInvocationParameters),
                /// An update request arrived and will be applied as soon the worker restarts
                PendingUpdate(PendingUpdateParameters),
                /// An update was successfully applied
                SuccessfulUpdate(SuccessfulUpdateParameters),
                /// An update failed to be applied
                FailedUpdate(FailedUpdateParameters),
                /// Increased total linear memory size
                GrowMemory(GrowMemoryParameters),
                /// Created a resource instance
                CreateResource(CreateResourceParameters),
                /// Dropped a resource instance
                DropResource(DropResourceParameters),
                /// Adds additional information for a created resource instance
                DescribeResource(DescribeResourceParameters),
                /// The worker emitted a log message
                Log(LogParameters),
                /// The worker's has been restarted, forgetting all its history
                Restart(Datetime),
                /// Activates a plugin
                ActivatePlugin(ActivatePluginParameters),
                /// Deactivates a plugin
                DeactivatePlugin(DeactivatePluginParameters),
            }
            impl ::core::fmt::Debug for OplogEntry {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        OplogEntry::Create(e) => {
                            f.debug_tuple("OplogEntry::Create").field(e).finish()
                        }
                        OplogEntry::ImportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ImportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionCompleted(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionCompleted")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Suspend(e) => {
                            f.debug_tuple("OplogEntry::Suspend").field(e).finish()
                        }
                        OplogEntry::Error(e) => {
                            f.debug_tuple("OplogEntry::Error").field(e).finish()
                        }
                        OplogEntry::NoOp(e) => {
                            f.debug_tuple("OplogEntry::NoOp").field(e).finish()
                        }
                        OplogEntry::Jump(e) => {
                            f.debug_tuple("OplogEntry::Jump").field(e).finish()
                        }
                        OplogEntry::Interrupted(e) => {
                            f.debug_tuple("OplogEntry::Interrupted").field(e).finish()
                        }
                        OplogEntry::Exited(e) => {
                            f.debug_tuple("OplogEntry::Exited").field(e).finish()
                        }
                        OplogEntry::ChangeRetryPolicy(e) => {
                            f.debug_tuple("OplogEntry::ChangeRetryPolicy")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::BeginAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::EndAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::BeginRemoteWrite")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::EndRemoteWrite").field(e).finish()
                        }
                        OplogEntry::PendingWorkerInvocation(e) => {
                            f.debug_tuple("OplogEntry::PendingWorkerInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PendingUpdate(e) => {
                            f.debug_tuple("OplogEntry::PendingUpdate").field(e).finish()
                        }
                        OplogEntry::SuccessfulUpdate(e) => {
                            f.debug_tuple("OplogEntry::SuccessfulUpdate")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::FailedUpdate(e) => {
                            f.debug_tuple("OplogEntry::FailedUpdate").field(e).finish()
                        }
                        OplogEntry::GrowMemory(e) => {
                            f.debug_tuple("OplogEntry::GrowMemory").field(e).finish()
                        }
                        OplogEntry::CreateResource(e) => {
                            f.debug_tuple("OplogEntry::CreateResource").field(e).finish()
                        }
                        OplogEntry::DropResource(e) => {
                            f.debug_tuple("OplogEntry::DropResource").field(e).finish()
                        }
                        OplogEntry::DescribeResource(e) => {
                            f.debug_tuple("OplogEntry::DescribeResource")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Log(e) => {
                            f.debug_tuple("OplogEntry::Log").field(e).finish()
                        }
                        OplogEntry::Restart(e) => {
                            f.debug_tuple("OplogEntry::Restart").field(e).finish()
                        }
                        OplogEntry::ActivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::ActivatePlugin").field(e).finish()
                        }
                        OplogEntry::DeactivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::DeactivatePlugin")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetOplog {
                handle: _rt::Resource<GetOplog>,
            }
            impl GetOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]get-oplog"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SearchOplog {
                handle: _rt::Resource<SearchOplog>,
            }
            impl SearchOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SearchOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]search-oplog"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId, start: OplogIndex) -> Self {
                    unsafe {
                        let super::super::super::golem::api::host::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::api::host::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::api::host::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]get-oplog"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(start),
                        );
                        GetOplog::from_handle(ret as u32)
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<OplogEntry>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[method]get-oplog.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base527 = l2;
                                    let len527 = l3;
                                    let mut result527 = _rt::Vec::with_capacity(len527);
                                    for i in 0..len527 {
                                        let base = base527.add(i * 136);
                                        let e527 = {
                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                            let v526 = match l4 {
                                                0 => {
                                                    let e526 = {
                                                        let l5 = *base.add(8).cast::<i64>();
                                                        let l6 = *base.add(16).cast::<i32>();
                                                        let l7 = *base.add(24).cast::<i64>();
                                                        let l8 = *base.add(32).cast::<i64>();
                                                        let l9 = *base.add(40).cast::<*mut u8>();
                                                        let l10 = *base.add(44).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );
                                                        let l12 = *base.add(48).cast::<i64>();
                                                        let l13 = *base.add(56).cast::<*mut u8>();
                                                        let l14 = *base.add(60).cast::<usize>();
                                                        let base18 = l13;
                                                        let len18 = l14;
                                                        let mut result18 = _rt::Vec::with_capacity(len18);
                                                        for i in 0..len18 {
                                                            let base = base18.add(i * 8);
                                                            let e18 = {
                                                                let l15 = *base.add(0).cast::<*mut u8>();
                                                                let l16 = *base.add(4).cast::<usize>();
                                                                let len17 = l16;
                                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                                    l15.cast(),
                                                                    len17,
                                                                    len17,
                                                                );
                                                                _rt::string_lift(bytes17)
                                                            };
                                                            result18.push(e18);
                                                        }
                                                        _rt::cabi_dealloc(base18, len18 * 8, 4);
                                                        let l19 = *base.add(64).cast::<*mut u8>();
                                                        let l20 = *base.add(68).cast::<usize>();
                                                        let base27 = l19;
                                                        let len27 = l20;
                                                        let mut result27 = _rt::Vec::with_capacity(len27);
                                                        for i in 0..len27 {
                                                            let base = base27.add(i * 16);
                                                            let e27 = {
                                                                let l21 = *base.add(0).cast::<*mut u8>();
                                                                let l22 = *base.add(4).cast::<usize>();
                                                                let len23 = l22;
                                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                                    l21.cast(),
                                                                    len23,
                                                                    len23,
                                                                );
                                                                let l24 = *base.add(8).cast::<*mut u8>();
                                                                let l25 = *base.add(12).cast::<usize>();
                                                                let len26 = l25;
                                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                                    l24.cast(),
                                                                    len26,
                                                                    len26,
                                                                );
                                                                (_rt::string_lift(bytes23), _rt::string_lift(bytes26))
                                                            };
                                                            result27.push(e27);
                                                        }
                                                        _rt::cabi_dealloc(base27, len27 * 16, 4);
                                                        let l28 = *base.add(72).cast::<*mut u8>();
                                                        let l29 = *base.add(76).cast::<usize>();
                                                        let len30 = l29;
                                                        let bytes30 = _rt::Vec::from_raw_parts(
                                                            l28.cast(),
                                                            len30,
                                                            len30,
                                                        );
                                                        let l31 = i32::from(*base.add(80).cast::<u8>());
                                                        let l37 = *base.add(112).cast::<i64>();
                                                        let l38 = *base.add(120).cast::<i64>();
                                                        let l39 = *base.add(128).cast::<*mut u8>();
                                                        let l40 = *base.add(132).cast::<usize>();
                                                        let base58 = l39;
                                                        let len58 = l40;
                                                        let mut result58 = _rt::Vec::with_capacity(len58);
                                                        for i in 0..len58 {
                                                            let base = base58.add(i * 40);
                                                            let e58 = {
                                                                let l41 = *base.add(0).cast::<i64>();
                                                                let l42 = *base.add(8).cast::<i64>();
                                                                let l43 = *base.add(16).cast::<*mut u8>();
                                                                let l44 = *base.add(20).cast::<usize>();
                                                                let len45 = l44;
                                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                                    l43.cast(),
                                                                    len45,
                                                                    len45,
                                                                );
                                                                let l46 = *base.add(24).cast::<*mut u8>();
                                                                let l47 = *base.add(28).cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                );
                                                                let l49 = *base.add(32).cast::<*mut u8>();
                                                                let l50 = *base.add(36).cast::<usize>();
                                                                let base57 = l49;
                                                                let len57 = l50;
                                                                let mut result57 = _rt::Vec::with_capacity(len57);
                                                                for i in 0..len57 {
                                                                    let base = base57.add(i * 16);
                                                                    let e57 = {
                                                                        let l51 = *base.add(0).cast::<*mut u8>();
                                                                        let l52 = *base.add(4).cast::<usize>();
                                                                        let len53 = l52;
                                                                        let bytes53 = _rt::Vec::from_raw_parts(
                                                                            l51.cast(),
                                                                            len53,
                                                                            len53,
                                                                        );
                                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                                        let l55 = *base.add(12).cast::<usize>();
                                                                        let len56 = l55;
                                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                                            l54.cast(),
                                                                            len56,
                                                                            len56,
                                                                        );
                                                                        (_rt::string_lift(bytes53), _rt::string_lift(bytes56))
                                                                    };
                                                                    result57.push(e57);
                                                                }
                                                                _rt::cabi_dealloc(base57, len57 * 16, 4);
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l41 as u64,
                                                                        low_bits: l42 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes45),
                                                                    version: _rt::string_lift(bytes48),
                                                                    parameters: result57,
                                                                }
                                                            };
                                                            result58.push(e58);
                                                        }
                                                        _rt::cabi_dealloc(base58, len58 * 40, 8);
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l5 as u64,
                                                                nanoseconds: l6 as u32,
                                                            },
                                                            worker_id: super::super::super::golem::api::host::WorkerId {
                                                                component_id: super::super::super::golem::api::host::ComponentId {
                                                                    uuid: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l7 as u64,
                                                                        low_bits: l8 as u64,
                                                                    },
                                                                },
                                                                worker_name: _rt::string_lift(bytes11),
                                                            },
                                                            component_version: l12 as u64,
                                                            args: result18,
                                                            env: result27,
                                                            account_id: super::super::super::golem::api::host::AccountId {
                                                                value: _rt::string_lift(bytes30),
                                                            },
                                                            parent: match l31 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l32 = *base.add(88).cast::<i64>();
                                                                        let l33 = *base.add(96).cast::<i64>();
                                                                        let l34 = *base.add(104).cast::<*mut u8>();
                                                                        let l35 = *base.add(108).cast::<usize>();
                                                                        let len36 = l35;
                                                                        let bytes36 = _rt::Vec::from_raw_parts(
                                                                            l34.cast(),
                                                                            len36,
                                                                            len36,
                                                                        );
                                                                        super::super::super::golem::api::host::WorkerId {
                                                                            component_id: super::super::super::golem::api::host::ComponentId {
                                                                                uuid: super::super::super::golem::api::host::Uuid {
                                                                                    high_bits: l32 as u64,
                                                                                    low_bits: l33 as u64,
                                                                                },
                                                                            },
                                                                            worker_name: _rt::string_lift(bytes36),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l37 as u64,
                                                            initial_total_linear_memory_size: l38 as u64,
                                                            initial_active_plugins: result58,
                                                        }
                                                    };
                                                    OplogEntry::Create(e526)
                                                }
                                                1 => {
                                                    let e526 = {
                                                        let l59 = *base.add(8).cast::<i64>();
                                                        let l60 = *base.add(16).cast::<i32>();
                                                        let l61 = *base.add(24).cast::<*mut u8>();
                                                        let l62 = *base.add(28).cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );
                                                        let l64 = *base.add(32).cast::<*mut u8>();
                                                        let l65 = *base.add(36).cast::<usize>();
                                                        let base111 = l64;
                                                        let len111 = l65;
                                                        let mut result111 = _rt::Vec::with_capacity(len111);
                                                        for i in 0..len111 {
                                                            let base = base111.add(i * 24);
                                                            let e111 = {
                                                                let l66 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V110;
                                                                let v110 = match l66 {
                                                                    0 => {
                                                                        let e110 = {
                                                                            let l67 = *base.add(8).cast::<*mut u8>();
                                                                            let l68 = *base.add(12).cast::<usize>();
                                                                            let len69 = l68;
                                                                            _rt::Vec::from_raw_parts(l67.cast(), len69, len69)
                                                                        };
                                                                        V110::RecordValue(e110)
                                                                    }
                                                                    1 => {
                                                                        let e110 = {
                                                                            let l70 = *base.add(8).cast::<i32>();
                                                                            let l71 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l70 as u32,
                                                                                match l71 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l72 = *base.add(16).cast::<i32>();
                                                                                            l72
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V110::VariantValue(e110)
                                                                    }
                                                                    2 => {
                                                                        let e110 = {
                                                                            let l73 = *base.add(8).cast::<i32>();
                                                                            l73 as u32
                                                                        };
                                                                        V110::EnumValue(e110)
                                                                    }
                                                                    3 => {
                                                                        let e110 = {
                                                                            let l74 = *base.add(8).cast::<*mut u8>();
                                                                            let l75 = *base.add(12).cast::<usize>();
                                                                            let base77 = l74;
                                                                            let len77 = l75;
                                                                            let mut result77 = _rt::Vec::with_capacity(len77);
                                                                            for i in 0..len77 {
                                                                                let base = base77.add(i * 1);
                                                                                let e77 = {
                                                                                    let l76 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l76 as u8)
                                                                                };
                                                                                result77.push(e77);
                                                                            }
                                                                            _rt::cabi_dealloc(base77, len77 * 1, 1);
                                                                            result77
                                                                        };
                                                                        V110::FlagsValue(e110)
                                                                    }
                                                                    4 => {
                                                                        let e110 = {
                                                                            let l78 = *base.add(8).cast::<*mut u8>();
                                                                            let l79 = *base.add(12).cast::<usize>();
                                                                            let len80 = l79;
                                                                            _rt::Vec::from_raw_parts(l78.cast(), len80, len80)
                                                                        };
                                                                        V110::TupleValue(e110)
                                                                    }
                                                                    5 => {
                                                                        let e110 = {
                                                                            let l81 = *base.add(8).cast::<*mut u8>();
                                                                            let l82 = *base.add(12).cast::<usize>();
                                                                            let len83 = l82;
                                                                            _rt::Vec::from_raw_parts(l81.cast(), len83, len83)
                                                                        };
                                                                        V110::ListValue(e110)
                                                                    }
                                                                    6 => {
                                                                        let e110 = {
                                                                            let l84 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l84 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l85 = *base.add(12).cast::<i32>();
                                                                                        l85
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V110::OptionValue(e110)
                                                                    }
                                                                    7 => {
                                                                        let e110 = {
                                                                            let l86 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l86 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l87 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l87 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l88 = *base.add(16).cast::<i32>();
                                                                                                    l88
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l89 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l89 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l90 = *base.add(16).cast::<i32>();
                                                                                                    l90
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V110::ResultValue(e110)
                                                                    }
                                                                    8 => {
                                                                        let e110 = {
                                                                            let l91 = i32::from(*base.add(8).cast::<u8>());
                                                                            l91 as u8
                                                                        };
                                                                        V110::PrimU8(e110)
                                                                    }
                                                                    9 => {
                                                                        let e110 = {
                                                                            let l92 = i32::from(*base.add(8).cast::<u16>());
                                                                            l92 as u16
                                                                        };
                                                                        V110::PrimU16(e110)
                                                                    }
                                                                    10 => {
                                                                        let e110 = {
                                                                            let l93 = *base.add(8).cast::<i32>();
                                                                            l93 as u32
                                                                        };
                                                                        V110::PrimU32(e110)
                                                                    }
                                                                    11 => {
                                                                        let e110 = {
                                                                            let l94 = *base.add(8).cast::<i64>();
                                                                            l94 as u64
                                                                        };
                                                                        V110::PrimU64(e110)
                                                                    }
                                                                    12 => {
                                                                        let e110 = {
                                                                            let l95 = i32::from(*base.add(8).cast::<i8>());
                                                                            l95 as i8
                                                                        };
                                                                        V110::PrimS8(e110)
                                                                    }
                                                                    13 => {
                                                                        let e110 = {
                                                                            let l96 = i32::from(*base.add(8).cast::<i16>());
                                                                            l96 as i16
                                                                        };
                                                                        V110::PrimS16(e110)
                                                                    }
                                                                    14 => {
                                                                        let e110 = {
                                                                            let l97 = *base.add(8).cast::<i32>();
                                                                            l97
                                                                        };
                                                                        V110::PrimS32(e110)
                                                                    }
                                                                    15 => {
                                                                        let e110 = {
                                                                            let l98 = *base.add(8).cast::<i64>();
                                                                            l98
                                                                        };
                                                                        V110::PrimS64(e110)
                                                                    }
                                                                    16 => {
                                                                        let e110 = {
                                                                            let l99 = *base.add(8).cast::<f32>();
                                                                            l99
                                                                        };
                                                                        V110::PrimFloat32(e110)
                                                                    }
                                                                    17 => {
                                                                        let e110 = {
                                                                            let l100 = *base.add(8).cast::<f64>();
                                                                            l100
                                                                        };
                                                                        V110::PrimFloat64(e110)
                                                                    }
                                                                    18 => {
                                                                        let e110 = {
                                                                            let l101 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l101 as u32)
                                                                        };
                                                                        V110::PrimChar(e110)
                                                                    }
                                                                    19 => {
                                                                        let e110 = {
                                                                            let l102 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l102 as u8)
                                                                        };
                                                                        V110::PrimBool(e110)
                                                                    }
                                                                    20 => {
                                                                        let e110 = {
                                                                            let l103 = *base.add(8).cast::<*mut u8>();
                                                                            let l104 = *base.add(12).cast::<usize>();
                                                                            let len105 = l104;
                                                                            let bytes105 = _rt::Vec::from_raw_parts(
                                                                                l103.cast(),
                                                                                len105,
                                                                                len105,
                                                                            );
                                                                            _rt::string_lift(bytes105)
                                                                        };
                                                                        V110::PrimString(e110)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e110 = {
                                                                            let l106 = *base.add(8).cast::<*mut u8>();
                                                                            let l107 = *base.add(12).cast::<usize>();
                                                                            let len108 = l107;
                                                                            let bytes108 = _rt::Vec::from_raw_parts(
                                                                                l106.cast(),
                                                                                len108,
                                                                                len108,
                                                                            );
                                                                            let l109 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes108),
                                                                                },
                                                                                l109 as u64,
                                                                            )
                                                                        };
                                                                        V110::Handle(e110)
                                                                    }
                                                                };
                                                                v110
                                                            };
                                                            result111.push(e111);
                                                        }
                                                        _rt::cabi_dealloc(base111, len111 * 24, 8);
                                                        let l112 = *base.add(40).cast::<*mut u8>();
                                                        let l113 = *base.add(44).cast::<usize>();
                                                        let base159 = l112;
                                                        let len159 = l113;
                                                        let mut result159 = _rt::Vec::with_capacity(len159);
                                                        for i in 0..len159 {
                                                            let base = base159.add(i * 24);
                                                            let e159 = {
                                                                let l114 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V158;
                                                                let v158 = match l114 {
                                                                    0 => {
                                                                        let e158 = {
                                                                            let l115 = *base.add(8).cast::<*mut u8>();
                                                                            let l116 = *base.add(12).cast::<usize>();
                                                                            let len117 = l116;
                                                                            _rt::Vec::from_raw_parts(l115.cast(), len117, len117)
                                                                        };
                                                                        V158::RecordValue(e158)
                                                                    }
                                                                    1 => {
                                                                        let e158 = {
                                                                            let l118 = *base.add(8).cast::<i32>();
                                                                            let l119 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l118 as u32,
                                                                                match l119 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l120 = *base.add(16).cast::<i32>();
                                                                                            l120
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V158::VariantValue(e158)
                                                                    }
                                                                    2 => {
                                                                        let e158 = {
                                                                            let l121 = *base.add(8).cast::<i32>();
                                                                            l121 as u32
                                                                        };
                                                                        V158::EnumValue(e158)
                                                                    }
                                                                    3 => {
                                                                        let e158 = {
                                                                            let l122 = *base.add(8).cast::<*mut u8>();
                                                                            let l123 = *base.add(12).cast::<usize>();
                                                                            let base125 = l122;
                                                                            let len125 = l123;
                                                                            let mut result125 = _rt::Vec::with_capacity(len125);
                                                                            for i in 0..len125 {
                                                                                let base = base125.add(i * 1);
                                                                                let e125 = {
                                                                                    let l124 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l124 as u8)
                                                                                };
                                                                                result125.push(e125);
                                                                            }
                                                                            _rt::cabi_dealloc(base125, len125 * 1, 1);
                                                                            result125
                                                                        };
                                                                        V158::FlagsValue(e158)
                                                                    }
                                                                    4 => {
                                                                        let e158 = {
                                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                                            let l127 = *base.add(12).cast::<usize>();
                                                                            let len128 = l127;
                                                                            _rt::Vec::from_raw_parts(l126.cast(), len128, len128)
                                                                        };
                                                                        V158::TupleValue(e158)
                                                                    }
                                                                    5 => {
                                                                        let e158 = {
                                                                            let l129 = *base.add(8).cast::<*mut u8>();
                                                                            let l130 = *base.add(12).cast::<usize>();
                                                                            let len131 = l130;
                                                                            _rt::Vec::from_raw_parts(l129.cast(), len131, len131)
                                                                        };
                                                                        V158::ListValue(e158)
                                                                    }
                                                                    6 => {
                                                                        let e158 = {
                                                                            let l132 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l132 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l133 = *base.add(12).cast::<i32>();
                                                                                        l133
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V158::OptionValue(e158)
                                                                    }
                                                                    7 => {
                                                                        let e158 = {
                                                                            let l134 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l134 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l135 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l135 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l136 = *base.add(16).cast::<i32>();
                                                                                                    l136
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l137 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l137 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l138 = *base.add(16).cast::<i32>();
                                                                                                    l138
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V158::ResultValue(e158)
                                                                    }
                                                                    8 => {
                                                                        let e158 = {
                                                                            let l139 = i32::from(*base.add(8).cast::<u8>());
                                                                            l139 as u8
                                                                        };
                                                                        V158::PrimU8(e158)
                                                                    }
                                                                    9 => {
                                                                        let e158 = {
                                                                            let l140 = i32::from(*base.add(8).cast::<u16>());
                                                                            l140 as u16
                                                                        };
                                                                        V158::PrimU16(e158)
                                                                    }
                                                                    10 => {
                                                                        let e158 = {
                                                                            let l141 = *base.add(8).cast::<i32>();
                                                                            l141 as u32
                                                                        };
                                                                        V158::PrimU32(e158)
                                                                    }
                                                                    11 => {
                                                                        let e158 = {
                                                                            let l142 = *base.add(8).cast::<i64>();
                                                                            l142 as u64
                                                                        };
                                                                        V158::PrimU64(e158)
                                                                    }
                                                                    12 => {
                                                                        let e158 = {
                                                                            let l143 = i32::from(*base.add(8).cast::<i8>());
                                                                            l143 as i8
                                                                        };
                                                                        V158::PrimS8(e158)
                                                                    }
                                                                    13 => {
                                                                        let e158 = {
                                                                            let l144 = i32::from(*base.add(8).cast::<i16>());
                                                                            l144 as i16
                                                                        };
                                                                        V158::PrimS16(e158)
                                                                    }
                                                                    14 => {
                                                                        let e158 = {
                                                                            let l145 = *base.add(8).cast::<i32>();
                                                                            l145
                                                                        };
                                                                        V158::PrimS32(e158)
                                                                    }
                                                                    15 => {
                                                                        let e158 = {
                                                                            let l146 = *base.add(8).cast::<i64>();
                                                                            l146
                                                                        };
                                                                        V158::PrimS64(e158)
                                                                    }
                                                                    16 => {
                                                                        let e158 = {
                                                                            let l147 = *base.add(8).cast::<f32>();
                                                                            l147
                                                                        };
                                                                        V158::PrimFloat32(e158)
                                                                    }
                                                                    17 => {
                                                                        let e158 = {
                                                                            let l148 = *base.add(8).cast::<f64>();
                                                                            l148
                                                                        };
                                                                        V158::PrimFloat64(e158)
                                                                    }
                                                                    18 => {
                                                                        let e158 = {
                                                                            let l149 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l149 as u32)
                                                                        };
                                                                        V158::PrimChar(e158)
                                                                    }
                                                                    19 => {
                                                                        let e158 = {
                                                                            let l150 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l150 as u8)
                                                                        };
                                                                        V158::PrimBool(e158)
                                                                    }
                                                                    20 => {
                                                                        let e158 = {
                                                                            let l151 = *base.add(8).cast::<*mut u8>();
                                                                            let l152 = *base.add(12).cast::<usize>();
                                                                            let len153 = l152;
                                                                            let bytes153 = _rt::Vec::from_raw_parts(
                                                                                l151.cast(),
                                                                                len153,
                                                                                len153,
                                                                            );
                                                                            _rt::string_lift(bytes153)
                                                                        };
                                                                        V158::PrimString(e158)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e158 = {
                                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                                            let l155 = *base.add(12).cast::<usize>();
                                                                            let len156 = l155;
                                                                            let bytes156 = _rt::Vec::from_raw_parts(
                                                                                l154.cast(),
                                                                                len156,
                                                                                len156,
                                                                            );
                                                                            let l157 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes156),
                                                                                },
                                                                                l157 as u64,
                                                                            )
                                                                        };
                                                                        V158::Handle(e158)
                                                                    }
                                                                };
                                                                v158
                                                            };
                                                            result159.push(e159);
                                                        }
                                                        _rt::cabi_dealloc(base159, len159 * 24, 8);
                                                        let l160 = i32::from(*base.add(48).cast::<u8>());
                                                        let v163 = match l160 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            n => {
                                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                                let e163 = {
                                                                    let l161 = i32::from(*base.add(56).cast::<u8>());
                                                                    match l161 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l162 = *base.add(64).cast::<i64>();
                                                                                l162 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e163)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l59 as u64,
                                                                nanoseconds: l60 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes63),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result111,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result159,
                                                            },
                                                            wrapped_function_type: v163,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e526)
                                                }
                                                2 => {
                                                    let e526 = {
                                                        let l164 = *base.add(8).cast::<i64>();
                                                        let l165 = *base.add(16).cast::<i32>();
                                                        let l166 = *base.add(24).cast::<*mut u8>();
                                                        let l167 = *base.add(28).cast::<usize>();
                                                        let len168 = l167;
                                                        let bytes168 = _rt::Vec::from_raw_parts(
                                                            l166.cast(),
                                                            len168,
                                                            len168,
                                                        );
                                                        let l169 = *base.add(32).cast::<*mut u8>();
                                                        let l170 = *base.add(36).cast::<usize>();
                                                        let base219 = l169;
                                                        let len219 = l170;
                                                        let mut result219 = _rt::Vec::with_capacity(len219);
                                                        for i in 0..len219 {
                                                            let base = base219.add(i * 8);
                                                            let e219 = {
                                                                let l171 = *base.add(0).cast::<*mut u8>();
                                                                let l172 = *base.add(4).cast::<usize>();
                                                                let base218 = l171;
                                                                let len218 = l172;
                                                                let mut result218 = _rt::Vec::with_capacity(len218);
                                                                for i in 0..len218 {
                                                                    let base = base218.add(i * 24);
                                                                    let e218 = {
                                                                        let l173 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V217;
                                                                        let v217 = match l173 {
                                                                            0 => {
                                                                                let e217 = {
                                                                                    let l174 = *base.add(8).cast::<*mut u8>();
                                                                                    let l175 = *base.add(12).cast::<usize>();
                                                                                    let len176 = l175;
                                                                                    _rt::Vec::from_raw_parts(l174.cast(), len176, len176)
                                                                                };
                                                                                V217::RecordValue(e217)
                                                                            }
                                                                            1 => {
                                                                                let e217 = {
                                                                                    let l177 = *base.add(8).cast::<i32>();
                                                                                    let l178 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l177 as u32,
                                                                                        match l178 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l179 = *base.add(16).cast::<i32>();
                                                                                                    l179
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V217::VariantValue(e217)
                                                                            }
                                                                            2 => {
                                                                                let e217 = {
                                                                                    let l180 = *base.add(8).cast::<i32>();
                                                                                    l180 as u32
                                                                                };
                                                                                V217::EnumValue(e217)
                                                                            }
                                                                            3 => {
                                                                                let e217 = {
                                                                                    let l181 = *base.add(8).cast::<*mut u8>();
                                                                                    let l182 = *base.add(12).cast::<usize>();
                                                                                    let base184 = l181;
                                                                                    let len184 = l182;
                                                                                    let mut result184 = _rt::Vec::with_capacity(len184);
                                                                                    for i in 0..len184 {
                                                                                        let base = base184.add(i * 1);
                                                                                        let e184 = {
                                                                                            let l183 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l183 as u8)
                                                                                        };
                                                                                        result184.push(e184);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base184, len184 * 1, 1);
                                                                                    result184
                                                                                };
                                                                                V217::FlagsValue(e217)
                                                                            }
                                                                            4 => {
                                                                                let e217 = {
                                                                                    let l185 = *base.add(8).cast::<*mut u8>();
                                                                                    let l186 = *base.add(12).cast::<usize>();
                                                                                    let len187 = l186;
                                                                                    _rt::Vec::from_raw_parts(l185.cast(), len187, len187)
                                                                                };
                                                                                V217::TupleValue(e217)
                                                                            }
                                                                            5 => {
                                                                                let e217 = {
                                                                                    let l188 = *base.add(8).cast::<*mut u8>();
                                                                                    let l189 = *base.add(12).cast::<usize>();
                                                                                    let len190 = l189;
                                                                                    _rt::Vec::from_raw_parts(l188.cast(), len190, len190)
                                                                                };
                                                                                V217::ListValue(e217)
                                                                            }
                                                                            6 => {
                                                                                let e217 = {
                                                                                    let l191 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l191 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l192 = *base.add(12).cast::<i32>();
                                                                                                l192
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V217::OptionValue(e217)
                                                                            }
                                                                            7 => {
                                                                                let e217 = {
                                                                                    let l193 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l193 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l194 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l194 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l195 = *base.add(16).cast::<i32>();
                                                                                                            l195
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l196 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l196 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l197 = *base.add(16).cast::<i32>();
                                                                                                            l197
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V217::ResultValue(e217)
                                                                            }
                                                                            8 => {
                                                                                let e217 = {
                                                                                    let l198 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l198 as u8
                                                                                };
                                                                                V217::PrimU8(e217)
                                                                            }
                                                                            9 => {
                                                                                let e217 = {
                                                                                    let l199 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l199 as u16
                                                                                };
                                                                                V217::PrimU16(e217)
                                                                            }
                                                                            10 => {
                                                                                let e217 = {
                                                                                    let l200 = *base.add(8).cast::<i32>();
                                                                                    l200 as u32
                                                                                };
                                                                                V217::PrimU32(e217)
                                                                            }
                                                                            11 => {
                                                                                let e217 = {
                                                                                    let l201 = *base.add(8).cast::<i64>();
                                                                                    l201 as u64
                                                                                };
                                                                                V217::PrimU64(e217)
                                                                            }
                                                                            12 => {
                                                                                let e217 = {
                                                                                    let l202 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l202 as i8
                                                                                };
                                                                                V217::PrimS8(e217)
                                                                            }
                                                                            13 => {
                                                                                let e217 = {
                                                                                    let l203 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l203 as i16
                                                                                };
                                                                                V217::PrimS16(e217)
                                                                            }
                                                                            14 => {
                                                                                let e217 = {
                                                                                    let l204 = *base.add(8).cast::<i32>();
                                                                                    l204
                                                                                };
                                                                                V217::PrimS32(e217)
                                                                            }
                                                                            15 => {
                                                                                let e217 = {
                                                                                    let l205 = *base.add(8).cast::<i64>();
                                                                                    l205
                                                                                };
                                                                                V217::PrimS64(e217)
                                                                            }
                                                                            16 => {
                                                                                let e217 = {
                                                                                    let l206 = *base.add(8).cast::<f32>();
                                                                                    l206
                                                                                };
                                                                                V217::PrimFloat32(e217)
                                                                            }
                                                                            17 => {
                                                                                let e217 = {
                                                                                    let l207 = *base.add(8).cast::<f64>();
                                                                                    l207
                                                                                };
                                                                                V217::PrimFloat64(e217)
                                                                            }
                                                                            18 => {
                                                                                let e217 = {
                                                                                    let l208 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l208 as u32)
                                                                                };
                                                                                V217::PrimChar(e217)
                                                                            }
                                                                            19 => {
                                                                                let e217 = {
                                                                                    let l209 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l209 as u8)
                                                                                };
                                                                                V217::PrimBool(e217)
                                                                            }
                                                                            20 => {
                                                                                let e217 = {
                                                                                    let l210 = *base.add(8).cast::<*mut u8>();
                                                                                    let l211 = *base.add(12).cast::<usize>();
                                                                                    let len212 = l211;
                                                                                    let bytes212 = _rt::Vec::from_raw_parts(
                                                                                        l210.cast(),
                                                                                        len212,
                                                                                        len212,
                                                                                    );
                                                                                    _rt::string_lift(bytes212)
                                                                                };
                                                                                V217::PrimString(e217)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e217 = {
                                                                                    let l213 = *base.add(8).cast::<*mut u8>();
                                                                                    let l214 = *base.add(12).cast::<usize>();
                                                                                    let len215 = l214;
                                                                                    let bytes215 = _rt::Vec::from_raw_parts(
                                                                                        l213.cast(),
                                                                                        len215,
                                                                                        len215,
                                                                                    );
                                                                                    let l216 = *base.add(16).cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes215),
                                                                                        },
                                                                                        l216 as u64,
                                                                                    )
                                                                                };
                                                                                V217::Handle(e217)
                                                                            }
                                                                        };
                                                                        v217
                                                                    };
                                                                    result218.push(e218);
                                                                }
                                                                _rt::cabi_dealloc(base218, len218 * 24, 8);
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result218,
                                                                }
                                                            };
                                                            result219.push(e219);
                                                        }
                                                        _rt::cabi_dealloc(base219, len219 * 8, 4);
                                                        let l220 = *base.add(40).cast::<*mut u8>();
                                                        let l221 = *base.add(44).cast::<usize>();
                                                        let len222 = l221;
                                                        let bytes222 = _rt::Vec::from_raw_parts(
                                                            l220.cast(),
                                                            len222,
                                                            len222,
                                                        );
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l164 as u64,
                                                                nanoseconds: l165 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes168),
                                                            request: result219,
                                                            idempotency_key: _rt::string_lift(bytes222),
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e526)
                                                }
                                                3 => {
                                                    let e526 = {
                                                        let l223 = *base.add(8).cast::<i64>();
                                                        let l224 = *base.add(16).cast::<i32>();
                                                        let l225 = *base.add(24).cast::<*mut u8>();
                                                        let l226 = *base.add(28).cast::<usize>();
                                                        let base272 = l225;
                                                        let len272 = l226;
                                                        let mut result272 = _rt::Vec::with_capacity(len272);
                                                        for i in 0..len272 {
                                                            let base = base272.add(i * 24);
                                                            let e272 = {
                                                                let l227 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V271;
                                                                let v271 = match l227 {
                                                                    0 => {
                                                                        let e271 = {
                                                                            let l228 = *base.add(8).cast::<*mut u8>();
                                                                            let l229 = *base.add(12).cast::<usize>();
                                                                            let len230 = l229;
                                                                            _rt::Vec::from_raw_parts(l228.cast(), len230, len230)
                                                                        };
                                                                        V271::RecordValue(e271)
                                                                    }
                                                                    1 => {
                                                                        let e271 = {
                                                                            let l231 = *base.add(8).cast::<i32>();
                                                                            let l232 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l231 as u32,
                                                                                match l232 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l233 = *base.add(16).cast::<i32>();
                                                                                            l233
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V271::VariantValue(e271)
                                                                    }
                                                                    2 => {
                                                                        let e271 = {
                                                                            let l234 = *base.add(8).cast::<i32>();
                                                                            l234 as u32
                                                                        };
                                                                        V271::EnumValue(e271)
                                                                    }
                                                                    3 => {
                                                                        let e271 = {
                                                                            let l235 = *base.add(8).cast::<*mut u8>();
                                                                            let l236 = *base.add(12).cast::<usize>();
                                                                            let base238 = l235;
                                                                            let len238 = l236;
                                                                            let mut result238 = _rt::Vec::with_capacity(len238);
                                                                            for i in 0..len238 {
                                                                                let base = base238.add(i * 1);
                                                                                let e238 = {
                                                                                    let l237 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l237 as u8)
                                                                                };
                                                                                result238.push(e238);
                                                                            }
                                                                            _rt::cabi_dealloc(base238, len238 * 1, 1);
                                                                            result238
                                                                        };
                                                                        V271::FlagsValue(e271)
                                                                    }
                                                                    4 => {
                                                                        let e271 = {
                                                                            let l239 = *base.add(8).cast::<*mut u8>();
                                                                            let l240 = *base.add(12).cast::<usize>();
                                                                            let len241 = l240;
                                                                            _rt::Vec::from_raw_parts(l239.cast(), len241, len241)
                                                                        };
                                                                        V271::TupleValue(e271)
                                                                    }
                                                                    5 => {
                                                                        let e271 = {
                                                                            let l242 = *base.add(8).cast::<*mut u8>();
                                                                            let l243 = *base.add(12).cast::<usize>();
                                                                            let len244 = l243;
                                                                            _rt::Vec::from_raw_parts(l242.cast(), len244, len244)
                                                                        };
                                                                        V271::ListValue(e271)
                                                                    }
                                                                    6 => {
                                                                        let e271 = {
                                                                            let l245 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l245 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l246 = *base.add(12).cast::<i32>();
                                                                                        l246
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V271::OptionValue(e271)
                                                                    }
                                                                    7 => {
                                                                        let e271 = {
                                                                            let l247 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l247 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l248 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l248 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l249 = *base.add(16).cast::<i32>();
                                                                                                    l249
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l250 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l250 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l251 = *base.add(16).cast::<i32>();
                                                                                                    l251
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V271::ResultValue(e271)
                                                                    }
                                                                    8 => {
                                                                        let e271 = {
                                                                            let l252 = i32::from(*base.add(8).cast::<u8>());
                                                                            l252 as u8
                                                                        };
                                                                        V271::PrimU8(e271)
                                                                    }
                                                                    9 => {
                                                                        let e271 = {
                                                                            let l253 = i32::from(*base.add(8).cast::<u16>());
                                                                            l253 as u16
                                                                        };
                                                                        V271::PrimU16(e271)
                                                                    }
                                                                    10 => {
                                                                        let e271 = {
                                                                            let l254 = *base.add(8).cast::<i32>();
                                                                            l254 as u32
                                                                        };
                                                                        V271::PrimU32(e271)
                                                                    }
                                                                    11 => {
                                                                        let e271 = {
                                                                            let l255 = *base.add(8).cast::<i64>();
                                                                            l255 as u64
                                                                        };
                                                                        V271::PrimU64(e271)
                                                                    }
                                                                    12 => {
                                                                        let e271 = {
                                                                            let l256 = i32::from(*base.add(8).cast::<i8>());
                                                                            l256 as i8
                                                                        };
                                                                        V271::PrimS8(e271)
                                                                    }
                                                                    13 => {
                                                                        let e271 = {
                                                                            let l257 = i32::from(*base.add(8).cast::<i16>());
                                                                            l257 as i16
                                                                        };
                                                                        V271::PrimS16(e271)
                                                                    }
                                                                    14 => {
                                                                        let e271 = {
                                                                            let l258 = *base.add(8).cast::<i32>();
                                                                            l258
                                                                        };
                                                                        V271::PrimS32(e271)
                                                                    }
                                                                    15 => {
                                                                        let e271 = {
                                                                            let l259 = *base.add(8).cast::<i64>();
                                                                            l259
                                                                        };
                                                                        V271::PrimS64(e271)
                                                                    }
                                                                    16 => {
                                                                        let e271 = {
                                                                            let l260 = *base.add(8).cast::<f32>();
                                                                            l260
                                                                        };
                                                                        V271::PrimFloat32(e271)
                                                                    }
                                                                    17 => {
                                                                        let e271 = {
                                                                            let l261 = *base.add(8).cast::<f64>();
                                                                            l261
                                                                        };
                                                                        V271::PrimFloat64(e271)
                                                                    }
                                                                    18 => {
                                                                        let e271 = {
                                                                            let l262 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l262 as u32)
                                                                        };
                                                                        V271::PrimChar(e271)
                                                                    }
                                                                    19 => {
                                                                        let e271 = {
                                                                            let l263 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l263 as u8)
                                                                        };
                                                                        V271::PrimBool(e271)
                                                                    }
                                                                    20 => {
                                                                        let e271 = {
                                                                            let l264 = *base.add(8).cast::<*mut u8>();
                                                                            let l265 = *base.add(12).cast::<usize>();
                                                                            let len266 = l265;
                                                                            let bytes266 = _rt::Vec::from_raw_parts(
                                                                                l264.cast(),
                                                                                len266,
                                                                                len266,
                                                                            );
                                                                            _rt::string_lift(bytes266)
                                                                        };
                                                                        V271::PrimString(e271)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e271 = {
                                                                            let l267 = *base.add(8).cast::<*mut u8>();
                                                                            let l268 = *base.add(12).cast::<usize>();
                                                                            let len269 = l268;
                                                                            let bytes269 = _rt::Vec::from_raw_parts(
                                                                                l267.cast(),
                                                                                len269,
                                                                                len269,
                                                                            );
                                                                            let l270 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes269),
                                                                                },
                                                                                l270 as u64,
                                                                            )
                                                                        };
                                                                        V271::Handle(e271)
                                                                    }
                                                                };
                                                                v271
                                                            };
                                                            result272.push(e272);
                                                        }
                                                        _rt::cabi_dealloc(base272, len272 * 24, 8);
                                                        let l273 = *base.add(32).cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l223 as u64,
                                                                nanoseconds: l224 as u32,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result272,
                                                            },
                                                            consumed_fuel: l273,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e526)
                                                }
                                                4 => {
                                                    let e526 = {
                                                        let l274 = *base.add(8).cast::<i64>();
                                                        let l275 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l274 as u64,
                                                            nanoseconds: l275 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e526)
                                                }
                                                5 => {
                                                    let e526 = {
                                                        let l276 = *base.add(8).cast::<i64>();
                                                        let l277 = *base.add(16).cast::<i32>();
                                                        let l278 = *base.add(24).cast::<*mut u8>();
                                                        let l279 = *base.add(28).cast::<usize>();
                                                        let len280 = l279;
                                                        let bytes280 = _rt::Vec::from_raw_parts(
                                                            l278.cast(),
                                                            len280,
                                                            len280,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l276 as u64,
                                                                nanoseconds: l277 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes280),
                                                        }
                                                    };
                                                    OplogEntry::Error(e526)
                                                }
                                                6 => {
                                                    let e526 = {
                                                        let l281 = *base.add(8).cast::<i64>();
                                                        let l282 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l281 as u64,
                                                            nanoseconds: l282 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e526)
                                                }
                                                7 => {
                                                    let e526 = {
                                                        let l283 = *base.add(8).cast::<i64>();
                                                        let l284 = *base.add(16).cast::<i32>();
                                                        let l285 = *base.add(24).cast::<i64>();
                                                        let l286 = *base.add(32).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l283 as u64,
                                                                nanoseconds: l284 as u32,
                                                            },
                                                            start: l285 as u64,
                                                            end: l286 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e526)
                                                }
                                                8 => {
                                                    let e526 = {
                                                        let l287 = *base.add(8).cast::<i64>();
                                                        let l288 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l287 as u64,
                                                            nanoseconds: l288 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e526)
                                                }
                                                9 => {
                                                    let e526 = {
                                                        let l289 = *base.add(8).cast::<i64>();
                                                        let l290 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l289 as u64,
                                                            nanoseconds: l290 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e526)
                                                }
                                                10 => {
                                                    let e526 = {
                                                        let l291 = *base.add(8).cast::<i64>();
                                                        let l292 = *base.add(16).cast::<i32>();
                                                        let l293 = *base.add(24).cast::<i32>();
                                                        let l294 = *base.add(32).cast::<i64>();
                                                        let l295 = *base.add(40).cast::<i64>();
                                                        let l296 = *base.add(48).cast::<f64>();
                                                        let l297 = i32::from(*base.add(56).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l291 as u64,
                                                                nanoseconds: l292 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l293 as u32,
                                                                min_delay: l294 as u64,
                                                                max_delay: l295 as u64,
                                                                multiplier: l296,
                                                                max_jitter_factor: match l297 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l298 = *base.add(64).cast::<f64>();
                                                                            l298
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e526)
                                                }
                                                11 => {
                                                    let e526 = {
                                                        let l299 = *base.add(8).cast::<i64>();
                                                        let l300 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l299 as u64,
                                                            nanoseconds: l300 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e526)
                                                }
                                                12 => {
                                                    let e526 = {
                                                        let l301 = *base.add(8).cast::<i64>();
                                                        let l302 = *base.add(16).cast::<i32>();
                                                        let l303 = *base.add(24).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l301 as u64,
                                                                nanoseconds: l302 as u32,
                                                            },
                                                            begin_index: l303 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e526)
                                                }
                                                13 => {
                                                    let e526 = {
                                                        let l304 = *base.add(8).cast::<i64>();
                                                        let l305 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l304 as u64,
                                                            nanoseconds: l305 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e526)
                                                }
                                                14 => {
                                                    let e526 = {
                                                        let l306 = *base.add(8).cast::<i64>();
                                                        let l307 = *base.add(16).cast::<i32>();
                                                        let l308 = *base.add(24).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l306 as u64,
                                                                nanoseconds: l307 as u32,
                                                            },
                                                            begin_index: l308 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e526)
                                                }
                                                15 => {
                                                    let e526 = {
                                                        let l309 = *base.add(8).cast::<i64>();
                                                        let l310 = *base.add(16).cast::<i32>();
                                                        let l311 = i32::from(*base.add(24).cast::<u8>());
                                                        let v371 = match l311 {
                                                            0 => {
                                                                let e371 = {
                                                                    let l312 = *base.add(32).cast::<*mut u8>();
                                                                    let l313 = *base.add(36).cast::<usize>();
                                                                    let len314 = l313;
                                                                    let bytes314 = _rt::Vec::from_raw_parts(
                                                                        l312.cast(),
                                                                        len314,
                                                                        len314,
                                                                    );
                                                                    let l315 = *base.add(40).cast::<*mut u8>();
                                                                    let l316 = *base.add(44).cast::<usize>();
                                                                    let len317 = l316;
                                                                    let bytes317 = _rt::Vec::from_raw_parts(
                                                                        l315.cast(),
                                                                        len317,
                                                                        len317,
                                                                    );
                                                                    let l318 = i32::from(*base.add(48).cast::<u8>());
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes314),
                                                                        function_name: _rt::string_lift(bytes317),
                                                                        input: match l318 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l319 = *base.add(52).cast::<*mut u8>();
                                                                                    let l320 = *base.add(56).cast::<usize>();
                                                                                    let base369 = l319;
                                                                                    let len369 = l320;
                                                                                    let mut result369 = _rt::Vec::with_capacity(len369);
                                                                                    for i in 0..len369 {
                                                                                        let base = base369.add(i * 8);
                                                                                        let e369 = {
                                                                                            let l321 = *base.add(0).cast::<*mut u8>();
                                                                                            let l322 = *base.add(4).cast::<usize>();
                                                                                            let base368 = l321;
                                                                                            let len368 = l322;
                                                                                            let mut result368 = _rt::Vec::with_capacity(len368);
                                                                                            for i in 0..len368 {
                                                                                                let base = base368.add(i * 24);
                                                                                                let e368 = {
                                                                                                    let l323 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V367;
                                                                                                    let v367 = match l323 {
                                                                                                        0 => {
                                                                                                            let e367 = {
                                                                                                                let l324 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l325 = *base.add(12).cast::<usize>();
                                                                                                                let len326 = l325;
                                                                                                                _rt::Vec::from_raw_parts(l324.cast(), len326, len326)
                                                                                                            };
                                                                                                            V367::RecordValue(e367)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e367 = {
                                                                                                                let l327 = *base.add(8).cast::<i32>();
                                                                                                                let l328 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l327 as u32,
                                                                                                                    match l328 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l329 = *base.add(16).cast::<i32>();
                                                                                                                                l329
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V367::VariantValue(e367)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e367 = {
                                                                                                                let l330 = *base.add(8).cast::<i32>();
                                                                                                                l330 as u32
                                                                                                            };
                                                                                                            V367::EnumValue(e367)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e367 = {
                                                                                                                let l331 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l332 = *base.add(12).cast::<usize>();
                                                                                                                let base334 = l331;
                                                                                                                let len334 = l332;
                                                                                                                let mut result334 = _rt::Vec::with_capacity(len334);
                                                                                                                for i in 0..len334 {
                                                                                                                    let base = base334.add(i * 1);
                                                                                                                    let e334 = {
                                                                                                                        let l333 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l333 as u8)
                                                                                                                    };
                                                                                                                    result334.push(e334);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base334, len334 * 1, 1);
                                                                                                                result334
                                                                                                            };
                                                                                                            V367::FlagsValue(e367)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e367 = {
                                                                                                                let l335 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l336 = *base.add(12).cast::<usize>();
                                                                                                                let len337 = l336;
                                                                                                                _rt::Vec::from_raw_parts(l335.cast(), len337, len337)
                                                                                                            };
                                                                                                            V367::TupleValue(e367)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e367 = {
                                                                                                                let l338 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l339 = *base.add(12).cast::<usize>();
                                                                                                                let len340 = l339;
                                                                                                                _rt::Vec::from_raw_parts(l338.cast(), len340, len340)
                                                                                                            };
                                                                                                            V367::ListValue(e367)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e367 = {
                                                                                                                let l341 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l341 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l342 = *base.add(12).cast::<i32>();
                                                                                                                            l342
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V367::OptionValue(e367)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e367 = {
                                                                                                                let l343 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l343 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l344 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l344 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l345 = *base.add(16).cast::<i32>();
                                                                                                                                        l345
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l346 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l346 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l347 = *base.add(16).cast::<i32>();
                                                                                                                                        l347
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V367::ResultValue(e367)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e367 = {
                                                                                                                let l348 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l348 as u8
                                                                                                            };
                                                                                                            V367::PrimU8(e367)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e367 = {
                                                                                                                let l349 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l349 as u16
                                                                                                            };
                                                                                                            V367::PrimU16(e367)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e367 = {
                                                                                                                let l350 = *base.add(8).cast::<i32>();
                                                                                                                l350 as u32
                                                                                                            };
                                                                                                            V367::PrimU32(e367)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e367 = {
                                                                                                                let l351 = *base.add(8).cast::<i64>();
                                                                                                                l351 as u64
                                                                                                            };
                                                                                                            V367::PrimU64(e367)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e367 = {
                                                                                                                let l352 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l352 as i8
                                                                                                            };
                                                                                                            V367::PrimS8(e367)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e367 = {
                                                                                                                let l353 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l353 as i16
                                                                                                            };
                                                                                                            V367::PrimS16(e367)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e367 = {
                                                                                                                let l354 = *base.add(8).cast::<i32>();
                                                                                                                l354
                                                                                                            };
                                                                                                            V367::PrimS32(e367)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e367 = {
                                                                                                                let l355 = *base.add(8).cast::<i64>();
                                                                                                                l355
                                                                                                            };
                                                                                                            V367::PrimS64(e367)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e367 = {
                                                                                                                let l356 = *base.add(8).cast::<f32>();
                                                                                                                l356
                                                                                                            };
                                                                                                            V367::PrimFloat32(e367)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e367 = {
                                                                                                                let l357 = *base.add(8).cast::<f64>();
                                                                                                                l357
                                                                                                            };
                                                                                                            V367::PrimFloat64(e367)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e367 = {
                                                                                                                let l358 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l358 as u32)
                                                                                                            };
                                                                                                            V367::PrimChar(e367)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e367 = {
                                                                                                                let l359 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l359 as u8)
                                                                                                            };
                                                                                                            V367::PrimBool(e367)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e367 = {
                                                                                                                let l360 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l361 = *base.add(12).cast::<usize>();
                                                                                                                let len362 = l361;
                                                                                                                let bytes362 = _rt::Vec::from_raw_parts(
                                                                                                                    l360.cast(),
                                                                                                                    len362,
                                                                                                                    len362,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes362)
                                                                                                            };
                                                                                                            V367::PrimString(e367)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e367 = {
                                                                                                                let l363 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l364 = *base.add(12).cast::<usize>();
                                                                                                                let len365 = l364;
                                                                                                                let bytes365 = _rt::Vec::from_raw_parts(
                                                                                                                    l363.cast(),
                                                                                                                    len365,
                                                                                                                    len365,
                                                                                                                );
                                                                                                                let l366 = *base.add(16).cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes365),
                                                                                                                    },
                                                                                                                    l366 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V367::Handle(e367)
                                                                                                        }
                                                                                                    };
                                                                                                    v367
                                                                                                };
                                                                                                result368.push(e368);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base368, len368 * 24, 8);
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result368,
                                                                                            }
                                                                                        };
                                                                                        result369.push(e369);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base369, len369 * 8, 4);
                                                                                    result369
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                WorkerInvocation::ExportedFunction(e371)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e371 = {
                                                                    let l370 = *base.add(32).cast::<i64>();
                                                                    l370 as u64
                                                                };
                                                                WorkerInvocation::ManualUpdate(e371)
                                                            }
                                                        };
                                                        PendingWorkerInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l309 as u64,
                                                                nanoseconds: l310 as u32,
                                                            },
                                                            invocation: v371,
                                                        }
                                                    };
                                                    OplogEntry::PendingWorkerInvocation(e526)
                                                }
                                                16 => {
                                                    let e526 = {
                                                        let l372 = *base.add(8).cast::<i64>();
                                                        let l373 = *base.add(16).cast::<i32>();
                                                        let l374 = *base.add(24).cast::<i64>();
                                                        let l375 = i32::from(*base.add(32).cast::<u8>());
                                                        let v379 = match l375 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e379 = {
                                                                    let l376 = *base.add(36).cast::<*mut u8>();
                                                                    let l377 = *base.add(40).cast::<usize>();
                                                                    let len378 = l377;
                                                                    _rt::Vec::from_raw_parts(l376.cast(), len378, len378)
                                                                };
                                                                UpdateDescription::SnapshotBased(e379)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l372 as u64,
                                                                nanoseconds: l373 as u32,
                                                            },
                                                            target_version: l374 as u64,
                                                            update_description: v379,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e526)
                                                }
                                                17 => {
                                                    let e526 = {
                                                        let l380 = *base.add(8).cast::<i64>();
                                                        let l381 = *base.add(16).cast::<i32>();
                                                        let l382 = *base.add(24).cast::<i64>();
                                                        let l383 = *base.add(32).cast::<i64>();
                                                        let l384 = *base.add(40).cast::<*mut u8>();
                                                        let l385 = *base.add(44).cast::<usize>();
                                                        let base403 = l384;
                                                        let len403 = l385;
                                                        let mut result403 = _rt::Vec::with_capacity(len403);
                                                        for i in 0..len403 {
                                                            let base = base403.add(i * 40);
                                                            let e403 = {
                                                                let l386 = *base.add(0).cast::<i64>();
                                                                let l387 = *base.add(8).cast::<i64>();
                                                                let l388 = *base.add(16).cast::<*mut u8>();
                                                                let l389 = *base.add(20).cast::<usize>();
                                                                let len390 = l389;
                                                                let bytes390 = _rt::Vec::from_raw_parts(
                                                                    l388.cast(),
                                                                    len390,
                                                                    len390,
                                                                );
                                                                let l391 = *base.add(24).cast::<*mut u8>();
                                                                let l392 = *base.add(28).cast::<usize>();
                                                                let len393 = l392;
                                                                let bytes393 = _rt::Vec::from_raw_parts(
                                                                    l391.cast(),
                                                                    len393,
                                                                    len393,
                                                                );
                                                                let l394 = *base.add(32).cast::<*mut u8>();
                                                                let l395 = *base.add(36).cast::<usize>();
                                                                let base402 = l394;
                                                                let len402 = l395;
                                                                let mut result402 = _rt::Vec::with_capacity(len402);
                                                                for i in 0..len402 {
                                                                    let base = base402.add(i * 16);
                                                                    let e402 = {
                                                                        let l396 = *base.add(0).cast::<*mut u8>();
                                                                        let l397 = *base.add(4).cast::<usize>();
                                                                        let len398 = l397;
                                                                        let bytes398 = _rt::Vec::from_raw_parts(
                                                                            l396.cast(),
                                                                            len398,
                                                                            len398,
                                                                        );
                                                                        let l399 = *base.add(8).cast::<*mut u8>();
                                                                        let l400 = *base.add(12).cast::<usize>();
                                                                        let len401 = l400;
                                                                        let bytes401 = _rt::Vec::from_raw_parts(
                                                                            l399.cast(),
                                                                            len401,
                                                                            len401,
                                                                        );
                                                                        (_rt::string_lift(bytes398), _rt::string_lift(bytes401))
                                                                    };
                                                                    result402.push(e402);
                                                                }
                                                                _rt::cabi_dealloc(base402, len402 * 16, 4);
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l386 as u64,
                                                                        low_bits: l387 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes390),
                                                                    version: _rt::string_lift(bytes393),
                                                                    parameters: result402,
                                                                }
                                                            };
                                                            result403.push(e403);
                                                        }
                                                        _rt::cabi_dealloc(base403, len403 * 40, 8);
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l380 as u64,
                                                                nanoseconds: l381 as u32,
                                                            },
                                                            target_version: l382 as u64,
                                                            new_component_size: l383 as u64,
                                                            new_active_plugins: result403,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e526)
                                                }
                                                18 => {
                                                    let e526 = {
                                                        let l404 = *base.add(8).cast::<i64>();
                                                        let l405 = *base.add(16).cast::<i32>();
                                                        let l406 = *base.add(24).cast::<i64>();
                                                        let l407 = i32::from(*base.add(32).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l404 as u64,
                                                                nanoseconds: l405 as u32,
                                                            },
                                                            target_version: l406 as u64,
                                                            details: match l407 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l408 = *base.add(36).cast::<*mut u8>();
                                                                        let l409 = *base.add(40).cast::<usize>();
                                                                        let len410 = l409;
                                                                        let bytes410 = _rt::Vec::from_raw_parts(
                                                                            l408.cast(),
                                                                            len410,
                                                                            len410,
                                                                        );
                                                                        _rt::string_lift(bytes410)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e526)
                                                }
                                                19 => {
                                                    let e526 = {
                                                        let l411 = *base.add(8).cast::<i64>();
                                                        let l412 = *base.add(16).cast::<i32>();
                                                        let l413 = *base.add(24).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l411 as u64,
                                                                nanoseconds: l412 as u32,
                                                            },
                                                            delta: l413 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e526)
                                                }
                                                20 => {
                                                    let e526 = {
                                                        let l414 = *base.add(8).cast::<i64>();
                                                        let l415 = *base.add(16).cast::<i32>();
                                                        let l416 = *base.add(24).cast::<i64>();
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l414 as u64,
                                                                nanoseconds: l415 as u32,
                                                            },
                                                            resource_id: l416 as u64,
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e526)
                                                }
                                                21 => {
                                                    let e526 = {
                                                        let l417 = *base.add(8).cast::<i64>();
                                                        let l418 = *base.add(16).cast::<i32>();
                                                        let l419 = *base.add(24).cast::<i64>();
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l417 as u64,
                                                                nanoseconds: l418 as u32,
                                                            },
                                                            resource_id: l419 as u64,
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e526)
                                                }
                                                22 => {
                                                    let e526 = {
                                                        let l420 = *base.add(8).cast::<i64>();
                                                        let l421 = *base.add(16).cast::<i32>();
                                                        let l422 = *base.add(24).cast::<i64>();
                                                        let l423 = *base.add(32).cast::<*mut u8>();
                                                        let l424 = *base.add(36).cast::<usize>();
                                                        let len425 = l424;
                                                        let bytes425 = _rt::Vec::from_raw_parts(
                                                            l423.cast(),
                                                            len425,
                                                            len425,
                                                        );
                                                        let l426 = *base.add(40).cast::<*mut u8>();
                                                        let l427 = *base.add(44).cast::<usize>();
                                                        let base476 = l426;
                                                        let len476 = l427;
                                                        let mut result476 = _rt::Vec::with_capacity(len476);
                                                        for i in 0..len476 {
                                                            let base = base476.add(i * 8);
                                                            let e476 = {
                                                                let l428 = *base.add(0).cast::<*mut u8>();
                                                                let l429 = *base.add(4).cast::<usize>();
                                                                let base475 = l428;
                                                                let len475 = l429;
                                                                let mut result475 = _rt::Vec::with_capacity(len475);
                                                                for i in 0..len475 {
                                                                    let base = base475.add(i * 24);
                                                                    let e475 = {
                                                                        let l430 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V474;
                                                                        let v474 = match l430 {
                                                                            0 => {
                                                                                let e474 = {
                                                                                    let l431 = *base.add(8).cast::<*mut u8>();
                                                                                    let l432 = *base.add(12).cast::<usize>();
                                                                                    let len433 = l432;
                                                                                    _rt::Vec::from_raw_parts(l431.cast(), len433, len433)
                                                                                };
                                                                                V474::RecordValue(e474)
                                                                            }
                                                                            1 => {
                                                                                let e474 = {
                                                                                    let l434 = *base.add(8).cast::<i32>();
                                                                                    let l435 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l434 as u32,
                                                                                        match l435 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l436 = *base.add(16).cast::<i32>();
                                                                                                    l436
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V474::VariantValue(e474)
                                                                            }
                                                                            2 => {
                                                                                let e474 = {
                                                                                    let l437 = *base.add(8).cast::<i32>();
                                                                                    l437 as u32
                                                                                };
                                                                                V474::EnumValue(e474)
                                                                            }
                                                                            3 => {
                                                                                let e474 = {
                                                                                    let l438 = *base.add(8).cast::<*mut u8>();
                                                                                    let l439 = *base.add(12).cast::<usize>();
                                                                                    let base441 = l438;
                                                                                    let len441 = l439;
                                                                                    let mut result441 = _rt::Vec::with_capacity(len441);
                                                                                    for i in 0..len441 {
                                                                                        let base = base441.add(i * 1);
                                                                                        let e441 = {
                                                                                            let l440 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l440 as u8)
                                                                                        };
                                                                                        result441.push(e441);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base441, len441 * 1, 1);
                                                                                    result441
                                                                                };
                                                                                V474::FlagsValue(e474)
                                                                            }
                                                                            4 => {
                                                                                let e474 = {
                                                                                    let l442 = *base.add(8).cast::<*mut u8>();
                                                                                    let l443 = *base.add(12).cast::<usize>();
                                                                                    let len444 = l443;
                                                                                    _rt::Vec::from_raw_parts(l442.cast(), len444, len444)
                                                                                };
                                                                                V474::TupleValue(e474)
                                                                            }
                                                                            5 => {
                                                                                let e474 = {
                                                                                    let l445 = *base.add(8).cast::<*mut u8>();
                                                                                    let l446 = *base.add(12).cast::<usize>();
                                                                                    let len447 = l446;
                                                                                    _rt::Vec::from_raw_parts(l445.cast(), len447, len447)
                                                                                };
                                                                                V474::ListValue(e474)
                                                                            }
                                                                            6 => {
                                                                                let e474 = {
                                                                                    let l448 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l448 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l449 = *base.add(12).cast::<i32>();
                                                                                                l449
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V474::OptionValue(e474)
                                                                            }
                                                                            7 => {
                                                                                let e474 = {
                                                                                    let l450 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l450 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l451 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l451 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l452 = *base.add(16).cast::<i32>();
                                                                                                            l452
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l453 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l453 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l454 = *base.add(16).cast::<i32>();
                                                                                                            l454
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V474::ResultValue(e474)
                                                                            }
                                                                            8 => {
                                                                                let e474 = {
                                                                                    let l455 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l455 as u8
                                                                                };
                                                                                V474::PrimU8(e474)
                                                                            }
                                                                            9 => {
                                                                                let e474 = {
                                                                                    let l456 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l456 as u16
                                                                                };
                                                                                V474::PrimU16(e474)
                                                                            }
                                                                            10 => {
                                                                                let e474 = {
                                                                                    let l457 = *base.add(8).cast::<i32>();
                                                                                    l457 as u32
                                                                                };
                                                                                V474::PrimU32(e474)
                                                                            }
                                                                            11 => {
                                                                                let e474 = {
                                                                                    let l458 = *base.add(8).cast::<i64>();
                                                                                    l458 as u64
                                                                                };
                                                                                V474::PrimU64(e474)
                                                                            }
                                                                            12 => {
                                                                                let e474 = {
                                                                                    let l459 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l459 as i8
                                                                                };
                                                                                V474::PrimS8(e474)
                                                                            }
                                                                            13 => {
                                                                                let e474 = {
                                                                                    let l460 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l460 as i16
                                                                                };
                                                                                V474::PrimS16(e474)
                                                                            }
                                                                            14 => {
                                                                                let e474 = {
                                                                                    let l461 = *base.add(8).cast::<i32>();
                                                                                    l461
                                                                                };
                                                                                V474::PrimS32(e474)
                                                                            }
                                                                            15 => {
                                                                                let e474 = {
                                                                                    let l462 = *base.add(8).cast::<i64>();
                                                                                    l462
                                                                                };
                                                                                V474::PrimS64(e474)
                                                                            }
                                                                            16 => {
                                                                                let e474 = {
                                                                                    let l463 = *base.add(8).cast::<f32>();
                                                                                    l463
                                                                                };
                                                                                V474::PrimFloat32(e474)
                                                                            }
                                                                            17 => {
                                                                                let e474 = {
                                                                                    let l464 = *base.add(8).cast::<f64>();
                                                                                    l464
                                                                                };
                                                                                V474::PrimFloat64(e474)
                                                                            }
                                                                            18 => {
                                                                                let e474 = {
                                                                                    let l465 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l465 as u32)
                                                                                };
                                                                                V474::PrimChar(e474)
                                                                            }
                                                                            19 => {
                                                                                let e474 = {
                                                                                    let l466 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l466 as u8)
                                                                                };
                                                                                V474::PrimBool(e474)
                                                                            }
                                                                            20 => {
                                                                                let e474 = {
                                                                                    let l467 = *base.add(8).cast::<*mut u8>();
                                                                                    let l468 = *base.add(12).cast::<usize>();
                                                                                    let len469 = l468;
                                                                                    let bytes469 = _rt::Vec::from_raw_parts(
                                                                                        l467.cast(),
                                                                                        len469,
                                                                                        len469,
                                                                                    );
                                                                                    _rt::string_lift(bytes469)
                                                                                };
                                                                                V474::PrimString(e474)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e474 = {
                                                                                    let l470 = *base.add(8).cast::<*mut u8>();
                                                                                    let l471 = *base.add(12).cast::<usize>();
                                                                                    let len472 = l471;
                                                                                    let bytes472 = _rt::Vec::from_raw_parts(
                                                                                        l470.cast(),
                                                                                        len472,
                                                                                        len472,
                                                                                    );
                                                                                    let l473 = *base.add(16).cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes472),
                                                                                        },
                                                                                        l473 as u64,
                                                                                    )
                                                                                };
                                                                                V474::Handle(e474)
                                                                            }
                                                                        };
                                                                        v474
                                                                    };
                                                                    result475.push(e475);
                                                                }
                                                                _rt::cabi_dealloc(base475, len475 * 24, 8);
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result475,
                                                                }
                                                            };
                                                            result476.push(e476);
                                                        }
                                                        _rt::cabi_dealloc(base476, len476 * 8, 4);
                                                        DescribeResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l420 as u64,
                                                                nanoseconds: l421 as u32,
                                                            },
                                                            resource_id: l422 as u64,
                                                            resource_name: _rt::string_lift(bytes425),
                                                            resource_params: result476,
                                                        }
                                                    };
                                                    OplogEntry::DescribeResource(e526)
                                                }
                                                23 => {
                                                    let e526 = {
                                                        let l477 = *base.add(8).cast::<i64>();
                                                        let l478 = *base.add(16).cast::<i32>();
                                                        let l479 = i32::from(*base.add(24).cast::<u8>());
                                                        let l480 = *base.add(28).cast::<*mut u8>();
                                                        let l481 = *base.add(32).cast::<usize>();
                                                        let len482 = l481;
                                                        let bytes482 = _rt::Vec::from_raw_parts(
                                                            l480.cast(),
                                                            len482,
                                                            len482,
                                                        );
                                                        let l483 = *base.add(36).cast::<*mut u8>();
                                                        let l484 = *base.add(40).cast::<usize>();
                                                        let len485 = l484;
                                                        let bytes485 = _rt::Vec::from_raw_parts(
                                                            l483.cast(),
                                                            len485,
                                                            len485,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l477 as u64,
                                                                nanoseconds: l478 as u32,
                                                            },
                                                            level: LogLevel::_lift(l479 as u8),
                                                            context: _rt::string_lift(bytes482),
                                                            message: _rt::string_lift(bytes485),
                                                        }
                                                    };
                                                    OplogEntry::Log(e526)
                                                }
                                                24 => {
                                                    let e526 = {
                                                        let l486 = *base.add(8).cast::<i64>();
                                                        let l487 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l486 as u64,
                                                            nanoseconds: l487 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e526)
                                                }
                                                25 => {
                                                    let e526 = {
                                                        let l488 = *base.add(8).cast::<i64>();
                                                        let l489 = *base.add(16).cast::<i32>();
                                                        let l490 = *base.add(24).cast::<i64>();
                                                        let l491 = *base.add(32).cast::<i64>();
                                                        let l492 = *base.add(40).cast::<*mut u8>();
                                                        let l493 = *base.add(44).cast::<usize>();
                                                        let len494 = l493;
                                                        let bytes494 = _rt::Vec::from_raw_parts(
                                                            l492.cast(),
                                                            len494,
                                                            len494,
                                                        );
                                                        let l495 = *base.add(48).cast::<*mut u8>();
                                                        let l496 = *base.add(52).cast::<usize>();
                                                        let len497 = l496;
                                                        let bytes497 = _rt::Vec::from_raw_parts(
                                                            l495.cast(),
                                                            len497,
                                                            len497,
                                                        );
                                                        let l498 = *base.add(56).cast::<*mut u8>();
                                                        let l499 = *base.add(60).cast::<usize>();
                                                        let base506 = l498;
                                                        let len506 = l499;
                                                        let mut result506 = _rt::Vec::with_capacity(len506);
                                                        for i in 0..len506 {
                                                            let base = base506.add(i * 16);
                                                            let e506 = {
                                                                let l500 = *base.add(0).cast::<*mut u8>();
                                                                let l501 = *base.add(4).cast::<usize>();
                                                                let len502 = l501;
                                                                let bytes502 = _rt::Vec::from_raw_parts(
                                                                    l500.cast(),
                                                                    len502,
                                                                    len502,
                                                                );
                                                                let l503 = *base.add(8).cast::<*mut u8>();
                                                                let l504 = *base.add(12).cast::<usize>();
                                                                let len505 = l504;
                                                                let bytes505 = _rt::Vec::from_raw_parts(
                                                                    l503.cast(),
                                                                    len505,
                                                                    len505,
                                                                );
                                                                (_rt::string_lift(bytes502), _rt::string_lift(bytes505))
                                                            };
                                                            result506.push(e506);
                                                        }
                                                        _rt::cabi_dealloc(base506, len506 * 16, 4);
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l488 as u64,
                                                                nanoseconds: l489 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l490 as u64,
                                                                    low_bits: l491 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes494),
                                                                version: _rt::string_lift(bytes497),
                                                                parameters: result506,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e526)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 26, "invalid enum discriminant");
                                                    let e526 = {
                                                        let l507 = *base.add(8).cast::<i64>();
                                                        let l508 = *base.add(16).cast::<i32>();
                                                        let l509 = *base.add(24).cast::<i64>();
                                                        let l510 = *base.add(32).cast::<i64>();
                                                        let l511 = *base.add(40).cast::<*mut u8>();
                                                        let l512 = *base.add(44).cast::<usize>();
                                                        let len513 = l512;
                                                        let bytes513 = _rt::Vec::from_raw_parts(
                                                            l511.cast(),
                                                            len513,
                                                            len513,
                                                        );
                                                        let l514 = *base.add(48).cast::<*mut u8>();
                                                        let l515 = *base.add(52).cast::<usize>();
                                                        let len516 = l515;
                                                        let bytes516 = _rt::Vec::from_raw_parts(
                                                            l514.cast(),
                                                            len516,
                                                            len516,
                                                        );
                                                        let l517 = *base.add(56).cast::<*mut u8>();
                                                        let l518 = *base.add(60).cast::<usize>();
                                                        let base525 = l517;
                                                        let len525 = l518;
                                                        let mut result525 = _rt::Vec::with_capacity(len525);
                                                        for i in 0..len525 {
                                                            let base = base525.add(i * 16);
                                                            let e525 = {
                                                                let l519 = *base.add(0).cast::<*mut u8>();
                                                                let l520 = *base.add(4).cast::<usize>();
                                                                let len521 = l520;
                                                                let bytes521 = _rt::Vec::from_raw_parts(
                                                                    l519.cast(),
                                                                    len521,
                                                                    len521,
                                                                );
                                                                let l522 = *base.add(8).cast::<*mut u8>();
                                                                let l523 = *base.add(12).cast::<usize>();
                                                                let len524 = l523;
                                                                let bytes524 = _rt::Vec::from_raw_parts(
                                                                    l522.cast(),
                                                                    len524,
                                                                    len524,
                                                                );
                                                                (_rt::string_lift(bytes521), _rt::string_lift(bytes524))
                                                            };
                                                            result525.push(e525);
                                                        }
                                                        _rt::cabi_dealloc(base525, len525 * 16, 4);
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l507 as u64,
                                                                nanoseconds: l508 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l509 as u64,
                                                                    low_bits: l510 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes513),
                                                                version: _rt::string_lift(bytes516),
                                                                parameters: result525,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e526)
                                                }
                                            };
                                            v526
                                        };
                                        result527.push(e527);
                                    }
                                    _rt::cabi_dealloc(base527, len527 * 136, 8);
                                    result527
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId, text: &str) -> Self {
                    unsafe {
                        let super::super::super::golem::api::host::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::api::host::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::api::host::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let vec4 = text;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]search-oplog"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4.cast_mut(),
                            len4,
                        );
                        SearchOplog::from_handle(ret as u32)
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<(OplogIndex, OplogEntry)>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.0")]
                        extern "C" {
                            #[link_name = "[method]search-oplog.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base528 = l2;
                                    let len528 = l3;
                                    let mut result528 = _rt::Vec::with_capacity(len528);
                                    for i in 0..len528 {
                                        let base = base528.add(i * 144);
                                        let e528 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let v527 = match l5 {
                                                0 => {
                                                    let e527 = {
                                                        let l6 = *base.add(16).cast::<i64>();
                                                        let l7 = *base.add(24).cast::<i32>();
                                                        let l8 = *base.add(32).cast::<i64>();
                                                        let l9 = *base.add(40).cast::<i64>();
                                                        let l10 = *base.add(48).cast::<*mut u8>();
                                                        let l11 = *base.add(52).cast::<usize>();
                                                        let len12 = l11;
                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                            l10.cast(),
                                                            len12,
                                                            len12,
                                                        );
                                                        let l13 = *base.add(56).cast::<i64>();
                                                        let l14 = *base.add(64).cast::<*mut u8>();
                                                        let l15 = *base.add(68).cast::<usize>();
                                                        let base19 = l14;
                                                        let len19 = l15;
                                                        let mut result19 = _rt::Vec::with_capacity(len19);
                                                        for i in 0..len19 {
                                                            let base = base19.add(i * 8);
                                                            let e19 = {
                                                                let l16 = *base.add(0).cast::<*mut u8>();
                                                                let l17 = *base.add(4).cast::<usize>();
                                                                let len18 = l17;
                                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                                    l16.cast(),
                                                                    len18,
                                                                    len18,
                                                                );
                                                                _rt::string_lift(bytes18)
                                                            };
                                                            result19.push(e19);
                                                        }
                                                        _rt::cabi_dealloc(base19, len19 * 8, 4);
                                                        let l20 = *base.add(72).cast::<*mut u8>();
                                                        let l21 = *base.add(76).cast::<usize>();
                                                        let base28 = l20;
                                                        let len28 = l21;
                                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 16);
                                                            let e28 = {
                                                                let l22 = *base.add(0).cast::<*mut u8>();
                                                                let l23 = *base.add(4).cast::<usize>();
                                                                let len24 = l23;
                                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                                    l22.cast(),
                                                                    len24,
                                                                    len24,
                                                                );
                                                                let l25 = *base.add(8).cast::<*mut u8>();
                                                                let l26 = *base.add(12).cast::<usize>();
                                                                let len27 = l26;
                                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                                    l25.cast(),
                                                                    len27,
                                                                    len27,
                                                                );
                                                                (_rt::string_lift(bytes24), _rt::string_lift(bytes27))
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 16, 4);
                                                        let l29 = *base.add(80).cast::<*mut u8>();
                                                        let l30 = *base.add(84).cast::<usize>();
                                                        let len31 = l30;
                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        );
                                                        let l32 = i32::from(*base.add(88).cast::<u8>());
                                                        let l38 = *base.add(120).cast::<i64>();
                                                        let l39 = *base.add(128).cast::<i64>();
                                                        let l40 = *base.add(136).cast::<*mut u8>();
                                                        let l41 = *base.add(140).cast::<usize>();
                                                        let base59 = l40;
                                                        let len59 = l41;
                                                        let mut result59 = _rt::Vec::with_capacity(len59);
                                                        for i in 0..len59 {
                                                            let base = base59.add(i * 40);
                                                            let e59 = {
                                                                let l42 = *base.add(0).cast::<i64>();
                                                                let l43 = *base.add(8).cast::<i64>();
                                                                let l44 = *base.add(16).cast::<*mut u8>();
                                                                let l45 = *base.add(20).cast::<usize>();
                                                                let len46 = l45;
                                                                let bytes46 = _rt::Vec::from_raw_parts(
                                                                    l44.cast(),
                                                                    len46,
                                                                    len46,
                                                                );
                                                                let l47 = *base.add(24).cast::<*mut u8>();
                                                                let l48 = *base.add(28).cast::<usize>();
                                                                let len49 = l48;
                                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                                    l47.cast(),
                                                                    len49,
                                                                    len49,
                                                                );
                                                                let l50 = *base.add(32).cast::<*mut u8>();
                                                                let l51 = *base.add(36).cast::<usize>();
                                                                let base58 = l50;
                                                                let len58 = l51;
                                                                let mut result58 = _rt::Vec::with_capacity(len58);
                                                                for i in 0..len58 {
                                                                    let base = base58.add(i * 16);
                                                                    let e58 = {
                                                                        let l52 = *base.add(0).cast::<*mut u8>();
                                                                        let l53 = *base.add(4).cast::<usize>();
                                                                        let len54 = l53;
                                                                        let bytes54 = _rt::Vec::from_raw_parts(
                                                                            l52.cast(),
                                                                            len54,
                                                                            len54,
                                                                        );
                                                                        let l55 = *base.add(8).cast::<*mut u8>();
                                                                        let l56 = *base.add(12).cast::<usize>();
                                                                        let len57 = l56;
                                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                                            l55.cast(),
                                                                            len57,
                                                                            len57,
                                                                        );
                                                                        (_rt::string_lift(bytes54), _rt::string_lift(bytes57))
                                                                    };
                                                                    result58.push(e58);
                                                                }
                                                                _rt::cabi_dealloc(base58, len58 * 16, 4);
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l42 as u64,
                                                                        low_bits: l43 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes46),
                                                                    version: _rt::string_lift(bytes49),
                                                                    parameters: result58,
                                                                }
                                                            };
                                                            result59.push(e59);
                                                        }
                                                        _rt::cabi_dealloc(base59, len59 * 40, 8);
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l6 as u64,
                                                                nanoseconds: l7 as u32,
                                                            },
                                                            worker_id: super::super::super::golem::api::host::WorkerId {
                                                                component_id: super::super::super::golem::api::host::ComponentId {
                                                                    uuid: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l8 as u64,
                                                                        low_bits: l9 as u64,
                                                                    },
                                                                },
                                                                worker_name: _rt::string_lift(bytes12),
                                                            },
                                                            component_version: l13 as u64,
                                                            args: result19,
                                                            env: result28,
                                                            account_id: super::super::super::golem::api::host::AccountId {
                                                                value: _rt::string_lift(bytes31),
                                                            },
                                                            parent: match l32 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l33 = *base.add(96).cast::<i64>();
                                                                        let l34 = *base.add(104).cast::<i64>();
                                                                        let l35 = *base.add(112).cast::<*mut u8>();
                                                                        let l36 = *base.add(116).cast::<usize>();
                                                                        let len37 = l36;
                                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                                            l35.cast(),
                                                                            len37,
                                                                            len37,
                                                                        );
                                                                        super::super::super::golem::api::host::WorkerId {
                                                                            component_id: super::super::super::golem::api::host::ComponentId {
                                                                                uuid: super::super::super::golem::api::host::Uuid {
                                                                                    high_bits: l33 as u64,
                                                                                    low_bits: l34 as u64,
                                                                                },
                                                                            },
                                                                            worker_name: _rt::string_lift(bytes37),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l38 as u64,
                                                            initial_total_linear_memory_size: l39 as u64,
                                                            initial_active_plugins: result59,
                                                        }
                                                    };
                                                    OplogEntry::Create(e527)
                                                }
                                                1 => {
                                                    let e527 = {
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        let l61 = *base.add(24).cast::<i32>();
                                                        let l62 = *base.add(32).cast::<*mut u8>();
                                                        let l63 = *base.add(36).cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        let l65 = *base.add(40).cast::<*mut u8>();
                                                        let l66 = *base.add(44).cast::<usize>();
                                                        let base112 = l65;
                                                        let len112 = l66;
                                                        let mut result112 = _rt::Vec::with_capacity(len112);
                                                        for i in 0..len112 {
                                                            let base = base112.add(i * 24);
                                                            let e112 = {
                                                                let l67 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V111;
                                                                let v111 = match l67 {
                                                                    0 => {
                                                                        let e111 = {
                                                                            let l68 = *base.add(8).cast::<*mut u8>();
                                                                            let l69 = *base.add(12).cast::<usize>();
                                                                            let len70 = l69;
                                                                            _rt::Vec::from_raw_parts(l68.cast(), len70, len70)
                                                                        };
                                                                        V111::RecordValue(e111)
                                                                    }
                                                                    1 => {
                                                                        let e111 = {
                                                                            let l71 = *base.add(8).cast::<i32>();
                                                                            let l72 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l71 as u32,
                                                                                match l72 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l73 = *base.add(16).cast::<i32>();
                                                                                            l73
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V111::VariantValue(e111)
                                                                    }
                                                                    2 => {
                                                                        let e111 = {
                                                                            let l74 = *base.add(8).cast::<i32>();
                                                                            l74 as u32
                                                                        };
                                                                        V111::EnumValue(e111)
                                                                    }
                                                                    3 => {
                                                                        let e111 = {
                                                                            let l75 = *base.add(8).cast::<*mut u8>();
                                                                            let l76 = *base.add(12).cast::<usize>();
                                                                            let base78 = l75;
                                                                            let len78 = l76;
                                                                            let mut result78 = _rt::Vec::with_capacity(len78);
                                                                            for i in 0..len78 {
                                                                                let base = base78.add(i * 1);
                                                                                let e78 = {
                                                                                    let l77 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l77 as u8)
                                                                                };
                                                                                result78.push(e78);
                                                                            }
                                                                            _rt::cabi_dealloc(base78, len78 * 1, 1);
                                                                            result78
                                                                        };
                                                                        V111::FlagsValue(e111)
                                                                    }
                                                                    4 => {
                                                                        let e111 = {
                                                                            let l79 = *base.add(8).cast::<*mut u8>();
                                                                            let l80 = *base.add(12).cast::<usize>();
                                                                            let len81 = l80;
                                                                            _rt::Vec::from_raw_parts(l79.cast(), len81, len81)
                                                                        };
                                                                        V111::TupleValue(e111)
                                                                    }
                                                                    5 => {
                                                                        let e111 = {
                                                                            let l82 = *base.add(8).cast::<*mut u8>();
                                                                            let l83 = *base.add(12).cast::<usize>();
                                                                            let len84 = l83;
                                                                            _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                        };
                                                                        V111::ListValue(e111)
                                                                    }
                                                                    6 => {
                                                                        let e111 = {
                                                                            let l85 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l85 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l86 = *base.add(12).cast::<i32>();
                                                                                        l86
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V111::OptionValue(e111)
                                                                    }
                                                                    7 => {
                                                                        let e111 = {
                                                                            let l87 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l87 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l88 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l88 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l89 = *base.add(16).cast::<i32>();
                                                                                                    l89
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l90 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l90 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l91 = *base.add(16).cast::<i32>();
                                                                                                    l91
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V111::ResultValue(e111)
                                                                    }
                                                                    8 => {
                                                                        let e111 = {
                                                                            let l92 = i32::from(*base.add(8).cast::<u8>());
                                                                            l92 as u8
                                                                        };
                                                                        V111::PrimU8(e111)
                                                                    }
                                                                    9 => {
                                                                        let e111 = {
                                                                            let l93 = i32::from(*base.add(8).cast::<u16>());
                                                                            l93 as u16
                                                                        };
                                                                        V111::PrimU16(e111)
                                                                    }
                                                                    10 => {
                                                                        let e111 = {
                                                                            let l94 = *base.add(8).cast::<i32>();
                                                                            l94 as u32
                                                                        };
                                                                        V111::PrimU32(e111)
                                                                    }
                                                                    11 => {
                                                                        let e111 = {
                                                                            let l95 = *base.add(8).cast::<i64>();
                                                                            l95 as u64
                                                                        };
                                                                        V111::PrimU64(e111)
                                                                    }
                                                                    12 => {
                                                                        let e111 = {
                                                                            let l96 = i32::from(*base.add(8).cast::<i8>());
                                                                            l96 as i8
                                                                        };
                                                                        V111::PrimS8(e111)
                                                                    }
                                                                    13 => {
                                                                        let e111 = {
                                                                            let l97 = i32::from(*base.add(8).cast::<i16>());
                                                                            l97 as i16
                                                                        };
                                                                        V111::PrimS16(e111)
                                                                    }
                                                                    14 => {
                                                                        let e111 = {
                                                                            let l98 = *base.add(8).cast::<i32>();
                                                                            l98
                                                                        };
                                                                        V111::PrimS32(e111)
                                                                    }
                                                                    15 => {
                                                                        let e111 = {
                                                                            let l99 = *base.add(8).cast::<i64>();
                                                                            l99
                                                                        };
                                                                        V111::PrimS64(e111)
                                                                    }
                                                                    16 => {
                                                                        let e111 = {
                                                                            let l100 = *base.add(8).cast::<f32>();
                                                                            l100
                                                                        };
                                                                        V111::PrimFloat32(e111)
                                                                    }
                                                                    17 => {
                                                                        let e111 = {
                                                                            let l101 = *base.add(8).cast::<f64>();
                                                                            l101
                                                                        };
                                                                        V111::PrimFloat64(e111)
                                                                    }
                                                                    18 => {
                                                                        let e111 = {
                                                                            let l102 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l102 as u32)
                                                                        };
                                                                        V111::PrimChar(e111)
                                                                    }
                                                                    19 => {
                                                                        let e111 = {
                                                                            let l103 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l103 as u8)
                                                                        };
                                                                        V111::PrimBool(e111)
                                                                    }
                                                                    20 => {
                                                                        let e111 = {
                                                                            let l104 = *base.add(8).cast::<*mut u8>();
                                                                            let l105 = *base.add(12).cast::<usize>();
                                                                            let len106 = l105;
                                                                            let bytes106 = _rt::Vec::from_raw_parts(
                                                                                l104.cast(),
                                                                                len106,
                                                                                len106,
                                                                            );
                                                                            _rt::string_lift(bytes106)
                                                                        };
                                                                        V111::PrimString(e111)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e111 = {
                                                                            let l107 = *base.add(8).cast::<*mut u8>();
                                                                            let l108 = *base.add(12).cast::<usize>();
                                                                            let len109 = l108;
                                                                            let bytes109 = _rt::Vec::from_raw_parts(
                                                                                l107.cast(),
                                                                                len109,
                                                                                len109,
                                                                            );
                                                                            let l110 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes109),
                                                                                },
                                                                                l110 as u64,
                                                                            )
                                                                        };
                                                                        V111::Handle(e111)
                                                                    }
                                                                };
                                                                v111
                                                            };
                                                            result112.push(e112);
                                                        }
                                                        _rt::cabi_dealloc(base112, len112 * 24, 8);
                                                        let l113 = *base.add(48).cast::<*mut u8>();
                                                        let l114 = *base.add(52).cast::<usize>();
                                                        let base160 = l113;
                                                        let len160 = l114;
                                                        let mut result160 = _rt::Vec::with_capacity(len160);
                                                        for i in 0..len160 {
                                                            let base = base160.add(i * 24);
                                                            let e160 = {
                                                                let l115 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V159;
                                                                let v159 = match l115 {
                                                                    0 => {
                                                                        let e159 = {
                                                                            let l116 = *base.add(8).cast::<*mut u8>();
                                                                            let l117 = *base.add(12).cast::<usize>();
                                                                            let len118 = l117;
                                                                            _rt::Vec::from_raw_parts(l116.cast(), len118, len118)
                                                                        };
                                                                        V159::RecordValue(e159)
                                                                    }
                                                                    1 => {
                                                                        let e159 = {
                                                                            let l119 = *base.add(8).cast::<i32>();
                                                                            let l120 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l119 as u32,
                                                                                match l120 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l121 = *base.add(16).cast::<i32>();
                                                                                            l121
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V159::VariantValue(e159)
                                                                    }
                                                                    2 => {
                                                                        let e159 = {
                                                                            let l122 = *base.add(8).cast::<i32>();
                                                                            l122 as u32
                                                                        };
                                                                        V159::EnumValue(e159)
                                                                    }
                                                                    3 => {
                                                                        let e159 = {
                                                                            let l123 = *base.add(8).cast::<*mut u8>();
                                                                            let l124 = *base.add(12).cast::<usize>();
                                                                            let base126 = l123;
                                                                            let len126 = l124;
                                                                            let mut result126 = _rt::Vec::with_capacity(len126);
                                                                            for i in 0..len126 {
                                                                                let base = base126.add(i * 1);
                                                                                let e126 = {
                                                                                    let l125 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l125 as u8)
                                                                                };
                                                                                result126.push(e126);
                                                                            }
                                                                            _rt::cabi_dealloc(base126, len126 * 1, 1);
                                                                            result126
                                                                        };
                                                                        V159::FlagsValue(e159)
                                                                    }
                                                                    4 => {
                                                                        let e159 = {
                                                                            let l127 = *base.add(8).cast::<*mut u8>();
                                                                            let l128 = *base.add(12).cast::<usize>();
                                                                            let len129 = l128;
                                                                            _rt::Vec::from_raw_parts(l127.cast(), len129, len129)
                                                                        };
                                                                        V159::TupleValue(e159)
                                                                    }
                                                                    5 => {
                                                                        let e159 = {
                                                                            let l130 = *base.add(8).cast::<*mut u8>();
                                                                            let l131 = *base.add(12).cast::<usize>();
                                                                            let len132 = l131;
                                                                            _rt::Vec::from_raw_parts(l130.cast(), len132, len132)
                                                                        };
                                                                        V159::ListValue(e159)
                                                                    }
                                                                    6 => {
                                                                        let e159 = {
                                                                            let l133 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l133 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l134 = *base.add(12).cast::<i32>();
                                                                                        l134
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V159::OptionValue(e159)
                                                                    }
                                                                    7 => {
                                                                        let e159 = {
                                                                            let l135 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l135 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l136 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l136 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l137 = *base.add(16).cast::<i32>();
                                                                                                    l137
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l138 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l138 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l139 = *base.add(16).cast::<i32>();
                                                                                                    l139
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V159::ResultValue(e159)
                                                                    }
                                                                    8 => {
                                                                        let e159 = {
                                                                            let l140 = i32::from(*base.add(8).cast::<u8>());
                                                                            l140 as u8
                                                                        };
                                                                        V159::PrimU8(e159)
                                                                    }
                                                                    9 => {
                                                                        let e159 = {
                                                                            let l141 = i32::from(*base.add(8).cast::<u16>());
                                                                            l141 as u16
                                                                        };
                                                                        V159::PrimU16(e159)
                                                                    }
                                                                    10 => {
                                                                        let e159 = {
                                                                            let l142 = *base.add(8).cast::<i32>();
                                                                            l142 as u32
                                                                        };
                                                                        V159::PrimU32(e159)
                                                                    }
                                                                    11 => {
                                                                        let e159 = {
                                                                            let l143 = *base.add(8).cast::<i64>();
                                                                            l143 as u64
                                                                        };
                                                                        V159::PrimU64(e159)
                                                                    }
                                                                    12 => {
                                                                        let e159 = {
                                                                            let l144 = i32::from(*base.add(8).cast::<i8>());
                                                                            l144 as i8
                                                                        };
                                                                        V159::PrimS8(e159)
                                                                    }
                                                                    13 => {
                                                                        let e159 = {
                                                                            let l145 = i32::from(*base.add(8).cast::<i16>());
                                                                            l145 as i16
                                                                        };
                                                                        V159::PrimS16(e159)
                                                                    }
                                                                    14 => {
                                                                        let e159 = {
                                                                            let l146 = *base.add(8).cast::<i32>();
                                                                            l146
                                                                        };
                                                                        V159::PrimS32(e159)
                                                                    }
                                                                    15 => {
                                                                        let e159 = {
                                                                            let l147 = *base.add(8).cast::<i64>();
                                                                            l147
                                                                        };
                                                                        V159::PrimS64(e159)
                                                                    }
                                                                    16 => {
                                                                        let e159 = {
                                                                            let l148 = *base.add(8).cast::<f32>();
                                                                            l148
                                                                        };
                                                                        V159::PrimFloat32(e159)
                                                                    }
                                                                    17 => {
                                                                        let e159 = {
                                                                            let l149 = *base.add(8).cast::<f64>();
                                                                            l149
                                                                        };
                                                                        V159::PrimFloat64(e159)
                                                                    }
                                                                    18 => {
                                                                        let e159 = {
                                                                            let l150 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l150 as u32)
                                                                        };
                                                                        V159::PrimChar(e159)
                                                                    }
                                                                    19 => {
                                                                        let e159 = {
                                                                            let l151 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l151 as u8)
                                                                        };
                                                                        V159::PrimBool(e159)
                                                                    }
                                                                    20 => {
                                                                        let e159 = {
                                                                            let l152 = *base.add(8).cast::<*mut u8>();
                                                                            let l153 = *base.add(12).cast::<usize>();
                                                                            let len154 = l153;
                                                                            let bytes154 = _rt::Vec::from_raw_parts(
                                                                                l152.cast(),
                                                                                len154,
                                                                                len154,
                                                                            );
                                                                            _rt::string_lift(bytes154)
                                                                        };
                                                                        V159::PrimString(e159)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e159 = {
                                                                            let l155 = *base.add(8).cast::<*mut u8>();
                                                                            let l156 = *base.add(12).cast::<usize>();
                                                                            let len157 = l156;
                                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                                l155.cast(),
                                                                                len157,
                                                                                len157,
                                                                            );
                                                                            let l158 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes157),
                                                                                },
                                                                                l158 as u64,
                                                                            )
                                                                        };
                                                                        V159::Handle(e159)
                                                                    }
                                                                };
                                                                v159
                                                            };
                                                            result160.push(e160);
                                                        }
                                                        _rt::cabi_dealloc(base160, len160 * 24, 8);
                                                        let l161 = i32::from(*base.add(56).cast::<u8>());
                                                        let v164 = match l161 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            n => {
                                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                                let e164 = {
                                                                    let l162 = i32::from(*base.add(64).cast::<u8>());
                                                                    match l162 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l163 = *base.add(72).cast::<i64>();
                                                                                l163 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e164)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l60 as u64,
                                                                nanoseconds: l61 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes64),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result112,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result160,
                                                            },
                                                            wrapped_function_type: v164,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e527)
                                                }
                                                2 => {
                                                    let e527 = {
                                                        let l165 = *base.add(16).cast::<i64>();
                                                        let l166 = *base.add(24).cast::<i32>();
                                                        let l167 = *base.add(32).cast::<*mut u8>();
                                                        let l168 = *base.add(36).cast::<usize>();
                                                        let len169 = l168;
                                                        let bytes169 = _rt::Vec::from_raw_parts(
                                                            l167.cast(),
                                                            len169,
                                                            len169,
                                                        );
                                                        let l170 = *base.add(40).cast::<*mut u8>();
                                                        let l171 = *base.add(44).cast::<usize>();
                                                        let base220 = l170;
                                                        let len220 = l171;
                                                        let mut result220 = _rt::Vec::with_capacity(len220);
                                                        for i in 0..len220 {
                                                            let base = base220.add(i * 8);
                                                            let e220 = {
                                                                let l172 = *base.add(0).cast::<*mut u8>();
                                                                let l173 = *base.add(4).cast::<usize>();
                                                                let base219 = l172;
                                                                let len219 = l173;
                                                                let mut result219 = _rt::Vec::with_capacity(len219);
                                                                for i in 0..len219 {
                                                                    let base = base219.add(i * 24);
                                                                    let e219 = {
                                                                        let l174 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V218;
                                                                        let v218 = match l174 {
                                                                            0 => {
                                                                                let e218 = {
                                                                                    let l175 = *base.add(8).cast::<*mut u8>();
                                                                                    let l176 = *base.add(12).cast::<usize>();
                                                                                    let len177 = l176;
                                                                                    _rt::Vec::from_raw_parts(l175.cast(), len177, len177)
                                                                                };
                                                                                V218::RecordValue(e218)
                                                                            }
                                                                            1 => {
                                                                                let e218 = {
                                                                                    let l178 = *base.add(8).cast::<i32>();
                                                                                    let l179 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l178 as u32,
                                                                                        match l179 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l180 = *base.add(16).cast::<i32>();
                                                                                                    l180
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V218::VariantValue(e218)
                                                                            }
                                                                            2 => {
                                                                                let e218 = {
                                                                                    let l181 = *base.add(8).cast::<i32>();
                                                                                    l181 as u32
                                                                                };
                                                                                V218::EnumValue(e218)
                                                                            }
                                                                            3 => {
                                                                                let e218 = {
                                                                                    let l182 = *base.add(8).cast::<*mut u8>();
                                                                                    let l183 = *base.add(12).cast::<usize>();
                                                                                    let base185 = l182;
                                                                                    let len185 = l183;
                                                                                    let mut result185 = _rt::Vec::with_capacity(len185);
                                                                                    for i in 0..len185 {
                                                                                        let base = base185.add(i * 1);
                                                                                        let e185 = {
                                                                                            let l184 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l184 as u8)
                                                                                        };
                                                                                        result185.push(e185);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base185, len185 * 1, 1);
                                                                                    result185
                                                                                };
                                                                                V218::FlagsValue(e218)
                                                                            }
                                                                            4 => {
                                                                                let e218 = {
                                                                                    let l186 = *base.add(8).cast::<*mut u8>();
                                                                                    let l187 = *base.add(12).cast::<usize>();
                                                                                    let len188 = l187;
                                                                                    _rt::Vec::from_raw_parts(l186.cast(), len188, len188)
                                                                                };
                                                                                V218::TupleValue(e218)
                                                                            }
                                                                            5 => {
                                                                                let e218 = {
                                                                                    let l189 = *base.add(8).cast::<*mut u8>();
                                                                                    let l190 = *base.add(12).cast::<usize>();
                                                                                    let len191 = l190;
                                                                                    _rt::Vec::from_raw_parts(l189.cast(), len191, len191)
                                                                                };
                                                                                V218::ListValue(e218)
                                                                            }
                                                                            6 => {
                                                                                let e218 = {
                                                                                    let l192 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l192 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l193 = *base.add(12).cast::<i32>();
                                                                                                l193
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V218::OptionValue(e218)
                                                                            }
                                                                            7 => {
                                                                                let e218 = {
                                                                                    let l194 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l194 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l195 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l195 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l196 = *base.add(16).cast::<i32>();
                                                                                                            l196
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l197 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l197 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l198 = *base.add(16).cast::<i32>();
                                                                                                            l198
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V218::ResultValue(e218)
                                                                            }
                                                                            8 => {
                                                                                let e218 = {
                                                                                    let l199 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l199 as u8
                                                                                };
                                                                                V218::PrimU8(e218)
                                                                            }
                                                                            9 => {
                                                                                let e218 = {
                                                                                    let l200 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l200 as u16
                                                                                };
                                                                                V218::PrimU16(e218)
                                                                            }
                                                                            10 => {
                                                                                let e218 = {
                                                                                    let l201 = *base.add(8).cast::<i32>();
                                                                                    l201 as u32
                                                                                };
                                                                                V218::PrimU32(e218)
                                                                            }
                                                                            11 => {
                                                                                let e218 = {
                                                                                    let l202 = *base.add(8).cast::<i64>();
                                                                                    l202 as u64
                                                                                };
                                                                                V218::PrimU64(e218)
                                                                            }
                                                                            12 => {
                                                                                let e218 = {
                                                                                    let l203 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l203 as i8
                                                                                };
                                                                                V218::PrimS8(e218)
                                                                            }
                                                                            13 => {
                                                                                let e218 = {
                                                                                    let l204 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l204 as i16
                                                                                };
                                                                                V218::PrimS16(e218)
                                                                            }
                                                                            14 => {
                                                                                let e218 = {
                                                                                    let l205 = *base.add(8).cast::<i32>();
                                                                                    l205
                                                                                };
                                                                                V218::PrimS32(e218)
                                                                            }
                                                                            15 => {
                                                                                let e218 = {
                                                                                    let l206 = *base.add(8).cast::<i64>();
                                                                                    l206
                                                                                };
                                                                                V218::PrimS64(e218)
                                                                            }
                                                                            16 => {
                                                                                let e218 = {
                                                                                    let l207 = *base.add(8).cast::<f32>();
                                                                                    l207
                                                                                };
                                                                                V218::PrimFloat32(e218)
                                                                            }
                                                                            17 => {
                                                                                let e218 = {
                                                                                    let l208 = *base.add(8).cast::<f64>();
                                                                                    l208
                                                                                };
                                                                                V218::PrimFloat64(e218)
                                                                            }
                                                                            18 => {
                                                                                let e218 = {
                                                                                    let l209 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l209 as u32)
                                                                                };
                                                                                V218::PrimChar(e218)
                                                                            }
                                                                            19 => {
                                                                                let e218 = {
                                                                                    let l210 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l210 as u8)
                                                                                };
                                                                                V218::PrimBool(e218)
                                                                            }
                                                                            20 => {
                                                                                let e218 = {
                                                                                    let l211 = *base.add(8).cast::<*mut u8>();
                                                                                    let l212 = *base.add(12).cast::<usize>();
                                                                                    let len213 = l212;
                                                                                    let bytes213 = _rt::Vec::from_raw_parts(
                                                                                        l211.cast(),
                                                                                        len213,
                                                                                        len213,
                                                                                    );
                                                                                    _rt::string_lift(bytes213)
                                                                                };
                                                                                V218::PrimString(e218)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e218 = {
                                                                                    let l214 = *base.add(8).cast::<*mut u8>();
                                                                                    let l215 = *base.add(12).cast::<usize>();
                                                                                    let len216 = l215;
                                                                                    let bytes216 = _rt::Vec::from_raw_parts(
                                                                                        l214.cast(),
                                                                                        len216,
                                                                                        len216,
                                                                                    );
                                                                                    let l217 = *base.add(16).cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes216),
                                                                                        },
                                                                                        l217 as u64,
                                                                                    )
                                                                                };
                                                                                V218::Handle(e218)
                                                                            }
                                                                        };
                                                                        v218
                                                                    };
                                                                    result219.push(e219);
                                                                }
                                                                _rt::cabi_dealloc(base219, len219 * 24, 8);
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result219,
                                                                }
                                                            };
                                                            result220.push(e220);
                                                        }
                                                        _rt::cabi_dealloc(base220, len220 * 8, 4);
                                                        let l221 = *base.add(48).cast::<*mut u8>();
                                                        let l222 = *base.add(52).cast::<usize>();
                                                        let len223 = l222;
                                                        let bytes223 = _rt::Vec::from_raw_parts(
                                                            l221.cast(),
                                                            len223,
                                                            len223,
                                                        );
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l165 as u64,
                                                                nanoseconds: l166 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes169),
                                                            request: result220,
                                                            idempotency_key: _rt::string_lift(bytes223),
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e527)
                                                }
                                                3 => {
                                                    let e527 = {
                                                        let l224 = *base.add(16).cast::<i64>();
                                                        let l225 = *base.add(24).cast::<i32>();
                                                        let l226 = *base.add(32).cast::<*mut u8>();
                                                        let l227 = *base.add(36).cast::<usize>();
                                                        let base273 = l226;
                                                        let len273 = l227;
                                                        let mut result273 = _rt::Vec::with_capacity(len273);
                                                        for i in 0..len273 {
                                                            let base = base273.add(i * 24);
                                                            let e273 = {
                                                                let l228 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V272;
                                                                let v272 = match l228 {
                                                                    0 => {
                                                                        let e272 = {
                                                                            let l229 = *base.add(8).cast::<*mut u8>();
                                                                            let l230 = *base.add(12).cast::<usize>();
                                                                            let len231 = l230;
                                                                            _rt::Vec::from_raw_parts(l229.cast(), len231, len231)
                                                                        };
                                                                        V272::RecordValue(e272)
                                                                    }
                                                                    1 => {
                                                                        let e272 = {
                                                                            let l232 = *base.add(8).cast::<i32>();
                                                                            let l233 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l232 as u32,
                                                                                match l233 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l234 = *base.add(16).cast::<i32>();
                                                                                            l234
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V272::VariantValue(e272)
                                                                    }
                                                                    2 => {
                                                                        let e272 = {
                                                                            let l235 = *base.add(8).cast::<i32>();
                                                                            l235 as u32
                                                                        };
                                                                        V272::EnumValue(e272)
                                                                    }
                                                                    3 => {
                                                                        let e272 = {
                                                                            let l236 = *base.add(8).cast::<*mut u8>();
                                                                            let l237 = *base.add(12).cast::<usize>();
                                                                            let base239 = l236;
                                                                            let len239 = l237;
                                                                            let mut result239 = _rt::Vec::with_capacity(len239);
                                                                            for i in 0..len239 {
                                                                                let base = base239.add(i * 1);
                                                                                let e239 = {
                                                                                    let l238 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l238 as u8)
                                                                                };
                                                                                result239.push(e239);
                                                                            }
                                                                            _rt::cabi_dealloc(base239, len239 * 1, 1);
                                                                            result239
                                                                        };
                                                                        V272::FlagsValue(e272)
                                                                    }
                                                                    4 => {
                                                                        let e272 = {
                                                                            let l240 = *base.add(8).cast::<*mut u8>();
                                                                            let l241 = *base.add(12).cast::<usize>();
                                                                            let len242 = l241;
                                                                            _rt::Vec::from_raw_parts(l240.cast(), len242, len242)
                                                                        };
                                                                        V272::TupleValue(e272)
                                                                    }
                                                                    5 => {
                                                                        let e272 = {
                                                                            let l243 = *base.add(8).cast::<*mut u8>();
                                                                            let l244 = *base.add(12).cast::<usize>();
                                                                            let len245 = l244;
                                                                            _rt::Vec::from_raw_parts(l243.cast(), len245, len245)
                                                                        };
                                                                        V272::ListValue(e272)
                                                                    }
                                                                    6 => {
                                                                        let e272 = {
                                                                            let l246 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l246 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l247 = *base.add(12).cast::<i32>();
                                                                                        l247
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V272::OptionValue(e272)
                                                                    }
                                                                    7 => {
                                                                        let e272 = {
                                                                            let l248 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l248 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l249 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l249 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l250 = *base.add(16).cast::<i32>();
                                                                                                    l250
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l251 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l251 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l252 = *base.add(16).cast::<i32>();
                                                                                                    l252
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V272::ResultValue(e272)
                                                                    }
                                                                    8 => {
                                                                        let e272 = {
                                                                            let l253 = i32::from(*base.add(8).cast::<u8>());
                                                                            l253 as u8
                                                                        };
                                                                        V272::PrimU8(e272)
                                                                    }
                                                                    9 => {
                                                                        let e272 = {
                                                                            let l254 = i32::from(*base.add(8).cast::<u16>());
                                                                            l254 as u16
                                                                        };
                                                                        V272::PrimU16(e272)
                                                                    }
                                                                    10 => {
                                                                        let e272 = {
                                                                            let l255 = *base.add(8).cast::<i32>();
                                                                            l255 as u32
                                                                        };
                                                                        V272::PrimU32(e272)
                                                                    }
                                                                    11 => {
                                                                        let e272 = {
                                                                            let l256 = *base.add(8).cast::<i64>();
                                                                            l256 as u64
                                                                        };
                                                                        V272::PrimU64(e272)
                                                                    }
                                                                    12 => {
                                                                        let e272 = {
                                                                            let l257 = i32::from(*base.add(8).cast::<i8>());
                                                                            l257 as i8
                                                                        };
                                                                        V272::PrimS8(e272)
                                                                    }
                                                                    13 => {
                                                                        let e272 = {
                                                                            let l258 = i32::from(*base.add(8).cast::<i16>());
                                                                            l258 as i16
                                                                        };
                                                                        V272::PrimS16(e272)
                                                                    }
                                                                    14 => {
                                                                        let e272 = {
                                                                            let l259 = *base.add(8).cast::<i32>();
                                                                            l259
                                                                        };
                                                                        V272::PrimS32(e272)
                                                                    }
                                                                    15 => {
                                                                        let e272 = {
                                                                            let l260 = *base.add(8).cast::<i64>();
                                                                            l260
                                                                        };
                                                                        V272::PrimS64(e272)
                                                                    }
                                                                    16 => {
                                                                        let e272 = {
                                                                            let l261 = *base.add(8).cast::<f32>();
                                                                            l261
                                                                        };
                                                                        V272::PrimFloat32(e272)
                                                                    }
                                                                    17 => {
                                                                        let e272 = {
                                                                            let l262 = *base.add(8).cast::<f64>();
                                                                            l262
                                                                        };
                                                                        V272::PrimFloat64(e272)
                                                                    }
                                                                    18 => {
                                                                        let e272 = {
                                                                            let l263 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l263 as u32)
                                                                        };
                                                                        V272::PrimChar(e272)
                                                                    }
                                                                    19 => {
                                                                        let e272 = {
                                                                            let l264 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l264 as u8)
                                                                        };
                                                                        V272::PrimBool(e272)
                                                                    }
                                                                    20 => {
                                                                        let e272 = {
                                                                            let l265 = *base.add(8).cast::<*mut u8>();
                                                                            let l266 = *base.add(12).cast::<usize>();
                                                                            let len267 = l266;
                                                                            let bytes267 = _rt::Vec::from_raw_parts(
                                                                                l265.cast(),
                                                                                len267,
                                                                                len267,
                                                                            );
                                                                            _rt::string_lift(bytes267)
                                                                        };
                                                                        V272::PrimString(e272)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e272 = {
                                                                            let l268 = *base.add(8).cast::<*mut u8>();
                                                                            let l269 = *base.add(12).cast::<usize>();
                                                                            let len270 = l269;
                                                                            let bytes270 = _rt::Vec::from_raw_parts(
                                                                                l268.cast(),
                                                                                len270,
                                                                                len270,
                                                                            );
                                                                            let l271 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes270),
                                                                                },
                                                                                l271 as u64,
                                                                            )
                                                                        };
                                                                        V272::Handle(e272)
                                                                    }
                                                                };
                                                                v272
                                                            };
                                                            result273.push(e273);
                                                        }
                                                        _rt::cabi_dealloc(base273, len273 * 24, 8);
                                                        let l274 = *base.add(40).cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l224 as u64,
                                                                nanoseconds: l225 as u32,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result273,
                                                            },
                                                            consumed_fuel: l274,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e527)
                                                }
                                                4 => {
                                                    let e527 = {
                                                        let l275 = *base.add(16).cast::<i64>();
                                                        let l276 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l275 as u64,
                                                            nanoseconds: l276 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e527)
                                                }
                                                5 => {
                                                    let e527 = {
                                                        let l277 = *base.add(16).cast::<i64>();
                                                        let l278 = *base.add(24).cast::<i32>();
                                                        let l279 = *base.add(32).cast::<*mut u8>();
                                                        let l280 = *base.add(36).cast::<usize>();
                                                        let len281 = l280;
                                                        let bytes281 = _rt::Vec::from_raw_parts(
                                                            l279.cast(),
                                                            len281,
                                                            len281,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l277 as u64,
                                                                nanoseconds: l278 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes281),
                                                        }
                                                    };
                                                    OplogEntry::Error(e527)
                                                }
                                                6 => {
                                                    let e527 = {
                                                        let l282 = *base.add(16).cast::<i64>();
                                                        let l283 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l282 as u64,
                                                            nanoseconds: l283 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e527)
                                                }
                                                7 => {
                                                    let e527 = {
                                                        let l284 = *base.add(16).cast::<i64>();
                                                        let l285 = *base.add(24).cast::<i32>();
                                                        let l286 = *base.add(32).cast::<i64>();
                                                        let l287 = *base.add(40).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l284 as u64,
                                                                nanoseconds: l285 as u32,
                                                            },
                                                            start: l286 as u64,
                                                            end: l287 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e527)
                                                }
                                                8 => {
                                                    let e527 = {
                                                        let l288 = *base.add(16).cast::<i64>();
                                                        let l289 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l288 as u64,
                                                            nanoseconds: l289 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e527)
                                                }
                                                9 => {
                                                    let e527 = {
                                                        let l290 = *base.add(16).cast::<i64>();
                                                        let l291 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l290 as u64,
                                                            nanoseconds: l291 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e527)
                                                }
                                                10 => {
                                                    let e527 = {
                                                        let l292 = *base.add(16).cast::<i64>();
                                                        let l293 = *base.add(24).cast::<i32>();
                                                        let l294 = *base.add(32).cast::<i32>();
                                                        let l295 = *base.add(40).cast::<i64>();
                                                        let l296 = *base.add(48).cast::<i64>();
                                                        let l297 = *base.add(56).cast::<f64>();
                                                        let l298 = i32::from(*base.add(64).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l292 as u64,
                                                                nanoseconds: l293 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l294 as u32,
                                                                min_delay: l295 as u64,
                                                                max_delay: l296 as u64,
                                                                multiplier: l297,
                                                                max_jitter_factor: match l298 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l299 = *base.add(72).cast::<f64>();
                                                                            l299
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e527)
                                                }
                                                11 => {
                                                    let e527 = {
                                                        let l300 = *base.add(16).cast::<i64>();
                                                        let l301 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l300 as u64,
                                                            nanoseconds: l301 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e527)
                                                }
                                                12 => {
                                                    let e527 = {
                                                        let l302 = *base.add(16).cast::<i64>();
                                                        let l303 = *base.add(24).cast::<i32>();
                                                        let l304 = *base.add(32).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l302 as u64,
                                                                nanoseconds: l303 as u32,
                                                            },
                                                            begin_index: l304 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e527)
                                                }
                                                13 => {
                                                    let e527 = {
                                                        let l305 = *base.add(16).cast::<i64>();
                                                        let l306 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l305 as u64,
                                                            nanoseconds: l306 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e527)
                                                }
                                                14 => {
                                                    let e527 = {
                                                        let l307 = *base.add(16).cast::<i64>();
                                                        let l308 = *base.add(24).cast::<i32>();
                                                        let l309 = *base.add(32).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l307 as u64,
                                                                nanoseconds: l308 as u32,
                                                            },
                                                            begin_index: l309 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e527)
                                                }
                                                15 => {
                                                    let e527 = {
                                                        let l310 = *base.add(16).cast::<i64>();
                                                        let l311 = *base.add(24).cast::<i32>();
                                                        let l312 = i32::from(*base.add(32).cast::<u8>());
                                                        let v372 = match l312 {
                                                            0 => {
                                                                let e372 = {
                                                                    let l313 = *base.add(40).cast::<*mut u8>();
                                                                    let l314 = *base.add(44).cast::<usize>();
                                                                    let len315 = l314;
                                                                    let bytes315 = _rt::Vec::from_raw_parts(
                                                                        l313.cast(),
                                                                        len315,
                                                                        len315,
                                                                    );
                                                                    let l316 = *base.add(48).cast::<*mut u8>();
                                                                    let l317 = *base.add(52).cast::<usize>();
                                                                    let len318 = l317;
                                                                    let bytes318 = _rt::Vec::from_raw_parts(
                                                                        l316.cast(),
                                                                        len318,
                                                                        len318,
                                                                    );
                                                                    let l319 = i32::from(*base.add(56).cast::<u8>());
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes315),
                                                                        function_name: _rt::string_lift(bytes318),
                                                                        input: match l319 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l320 = *base.add(60).cast::<*mut u8>();
                                                                                    let l321 = *base.add(64).cast::<usize>();
                                                                                    let base370 = l320;
                                                                                    let len370 = l321;
                                                                                    let mut result370 = _rt::Vec::with_capacity(len370);
                                                                                    for i in 0..len370 {
                                                                                        let base = base370.add(i * 8);
                                                                                        let e370 = {
                                                                                            let l322 = *base.add(0).cast::<*mut u8>();
                                                                                            let l323 = *base.add(4).cast::<usize>();
                                                                                            let base369 = l322;
                                                                                            let len369 = l323;
                                                                                            let mut result369 = _rt::Vec::with_capacity(len369);
                                                                                            for i in 0..len369 {
                                                                                                let base = base369.add(i * 24);
                                                                                                let e369 = {
                                                                                                    let l324 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V368;
                                                                                                    let v368 = match l324 {
                                                                                                        0 => {
                                                                                                            let e368 = {
                                                                                                                let l325 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l326 = *base.add(12).cast::<usize>();
                                                                                                                let len327 = l326;
                                                                                                                _rt::Vec::from_raw_parts(l325.cast(), len327, len327)
                                                                                                            };
                                                                                                            V368::RecordValue(e368)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e368 = {
                                                                                                                let l328 = *base.add(8).cast::<i32>();
                                                                                                                let l329 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l328 as u32,
                                                                                                                    match l329 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l330 = *base.add(16).cast::<i32>();
                                                                                                                                l330
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V368::VariantValue(e368)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e368 = {
                                                                                                                let l331 = *base.add(8).cast::<i32>();
                                                                                                                l331 as u32
                                                                                                            };
                                                                                                            V368::EnumValue(e368)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e368 = {
                                                                                                                let l332 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l333 = *base.add(12).cast::<usize>();
                                                                                                                let base335 = l332;
                                                                                                                let len335 = l333;
                                                                                                                let mut result335 = _rt::Vec::with_capacity(len335);
                                                                                                                for i in 0..len335 {
                                                                                                                    let base = base335.add(i * 1);
                                                                                                                    let e335 = {
                                                                                                                        let l334 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l334 as u8)
                                                                                                                    };
                                                                                                                    result335.push(e335);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base335, len335 * 1, 1);
                                                                                                                result335
                                                                                                            };
                                                                                                            V368::FlagsValue(e368)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e368 = {
                                                                                                                let l336 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l337 = *base.add(12).cast::<usize>();
                                                                                                                let len338 = l337;
                                                                                                                _rt::Vec::from_raw_parts(l336.cast(), len338, len338)
                                                                                                            };
                                                                                                            V368::TupleValue(e368)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e368 = {
                                                                                                                let l339 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l340 = *base.add(12).cast::<usize>();
                                                                                                                let len341 = l340;
                                                                                                                _rt::Vec::from_raw_parts(l339.cast(), len341, len341)
                                                                                                            };
                                                                                                            V368::ListValue(e368)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e368 = {
                                                                                                                let l342 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l342 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l343 = *base.add(12).cast::<i32>();
                                                                                                                            l343
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V368::OptionValue(e368)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e368 = {
                                                                                                                let l344 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l344 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l345 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l345 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l346 = *base.add(16).cast::<i32>();
                                                                                                                                        l346
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l347 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l347 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l348 = *base.add(16).cast::<i32>();
                                                                                                                                        l348
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V368::ResultValue(e368)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e368 = {
                                                                                                                let l349 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l349 as u8
                                                                                                            };
                                                                                                            V368::PrimU8(e368)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e368 = {
                                                                                                                let l350 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l350 as u16
                                                                                                            };
                                                                                                            V368::PrimU16(e368)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e368 = {
                                                                                                                let l351 = *base.add(8).cast::<i32>();
                                                                                                                l351 as u32
                                                                                                            };
                                                                                                            V368::PrimU32(e368)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e368 = {
                                                                                                                let l352 = *base.add(8).cast::<i64>();
                                                                                                                l352 as u64
                                                                                                            };
                                                                                                            V368::PrimU64(e368)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e368 = {
                                                                                                                let l353 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l353 as i8
                                                                                                            };
                                                                                                            V368::PrimS8(e368)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e368 = {
                                                                                                                let l354 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l354 as i16
                                                                                                            };
                                                                                                            V368::PrimS16(e368)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e368 = {
                                                                                                                let l355 = *base.add(8).cast::<i32>();
                                                                                                                l355
                                                                                                            };
                                                                                                            V368::PrimS32(e368)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e368 = {
                                                                                                                let l356 = *base.add(8).cast::<i64>();
                                                                                                                l356
                                                                                                            };
                                                                                                            V368::PrimS64(e368)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e368 = {
                                                                                                                let l357 = *base.add(8).cast::<f32>();
                                                                                                                l357
                                                                                                            };
                                                                                                            V368::PrimFloat32(e368)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e368 = {
                                                                                                                let l358 = *base.add(8).cast::<f64>();
                                                                                                                l358
                                                                                                            };
                                                                                                            V368::PrimFloat64(e368)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e368 = {
                                                                                                                let l359 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l359 as u32)
                                                                                                            };
                                                                                                            V368::PrimChar(e368)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e368 = {
                                                                                                                let l360 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l360 as u8)
                                                                                                            };
                                                                                                            V368::PrimBool(e368)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e368 = {
                                                                                                                let l361 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l362 = *base.add(12).cast::<usize>();
                                                                                                                let len363 = l362;
                                                                                                                let bytes363 = _rt::Vec::from_raw_parts(
                                                                                                                    l361.cast(),
                                                                                                                    len363,
                                                                                                                    len363,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes363)
                                                                                                            };
                                                                                                            V368::PrimString(e368)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e368 = {
                                                                                                                let l364 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l365 = *base.add(12).cast::<usize>();
                                                                                                                let len366 = l365;
                                                                                                                let bytes366 = _rt::Vec::from_raw_parts(
                                                                                                                    l364.cast(),
                                                                                                                    len366,
                                                                                                                    len366,
                                                                                                                );
                                                                                                                let l367 = *base.add(16).cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes366),
                                                                                                                    },
                                                                                                                    l367 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V368::Handle(e368)
                                                                                                        }
                                                                                                    };
                                                                                                    v368
                                                                                                };
                                                                                                result369.push(e369);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base369, len369 * 24, 8);
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result369,
                                                                                            }
                                                                                        };
                                                                                        result370.push(e370);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base370, len370 * 8, 4);
                                                                                    result370
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                WorkerInvocation::ExportedFunction(e372)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e372 = {
                                                                    let l371 = *base.add(40).cast::<i64>();
                                                                    l371 as u64
                                                                };
                                                                WorkerInvocation::ManualUpdate(e372)
                                                            }
                                                        };
                                                        PendingWorkerInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l310 as u64,
                                                                nanoseconds: l311 as u32,
                                                            },
                                                            invocation: v372,
                                                        }
                                                    };
                                                    OplogEntry::PendingWorkerInvocation(e527)
                                                }
                                                16 => {
                                                    let e527 = {
                                                        let l373 = *base.add(16).cast::<i64>();
                                                        let l374 = *base.add(24).cast::<i32>();
                                                        let l375 = *base.add(32).cast::<i64>();
                                                        let l376 = i32::from(*base.add(40).cast::<u8>());
                                                        let v380 = match l376 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e380 = {
                                                                    let l377 = *base.add(44).cast::<*mut u8>();
                                                                    let l378 = *base.add(48).cast::<usize>();
                                                                    let len379 = l378;
                                                                    _rt::Vec::from_raw_parts(l377.cast(), len379, len379)
                                                                };
                                                                UpdateDescription::SnapshotBased(e380)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l373 as u64,
                                                                nanoseconds: l374 as u32,
                                                            },
                                                            target_version: l375 as u64,
                                                            update_description: v380,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e527)
                                                }
                                                17 => {
                                                    let e527 = {
                                                        let l381 = *base.add(16).cast::<i64>();
                                                        let l382 = *base.add(24).cast::<i32>();
                                                        let l383 = *base.add(32).cast::<i64>();
                                                        let l384 = *base.add(40).cast::<i64>();
                                                        let l385 = *base.add(48).cast::<*mut u8>();
                                                        let l386 = *base.add(52).cast::<usize>();
                                                        let base404 = l385;
                                                        let len404 = l386;
                                                        let mut result404 = _rt::Vec::with_capacity(len404);
                                                        for i in 0..len404 {
                                                            let base = base404.add(i * 40);
                                                            let e404 = {
                                                                let l387 = *base.add(0).cast::<i64>();
                                                                let l388 = *base.add(8).cast::<i64>();
                                                                let l389 = *base.add(16).cast::<*mut u8>();
                                                                let l390 = *base.add(20).cast::<usize>();
                                                                let len391 = l390;
                                                                let bytes391 = _rt::Vec::from_raw_parts(
                                                                    l389.cast(),
                                                                    len391,
                                                                    len391,
                                                                );
                                                                let l392 = *base.add(24).cast::<*mut u8>();
                                                                let l393 = *base.add(28).cast::<usize>();
                                                                let len394 = l393;
                                                                let bytes394 = _rt::Vec::from_raw_parts(
                                                                    l392.cast(),
                                                                    len394,
                                                                    len394,
                                                                );
                                                                let l395 = *base.add(32).cast::<*mut u8>();
                                                                let l396 = *base.add(36).cast::<usize>();
                                                                let base403 = l395;
                                                                let len403 = l396;
                                                                let mut result403 = _rt::Vec::with_capacity(len403);
                                                                for i in 0..len403 {
                                                                    let base = base403.add(i * 16);
                                                                    let e403 = {
                                                                        let l397 = *base.add(0).cast::<*mut u8>();
                                                                        let l398 = *base.add(4).cast::<usize>();
                                                                        let len399 = l398;
                                                                        let bytes399 = _rt::Vec::from_raw_parts(
                                                                            l397.cast(),
                                                                            len399,
                                                                            len399,
                                                                        );
                                                                        let l400 = *base.add(8).cast::<*mut u8>();
                                                                        let l401 = *base.add(12).cast::<usize>();
                                                                        let len402 = l401;
                                                                        let bytes402 = _rt::Vec::from_raw_parts(
                                                                            l400.cast(),
                                                                            len402,
                                                                            len402,
                                                                        );
                                                                        (_rt::string_lift(bytes399), _rt::string_lift(bytes402))
                                                                    };
                                                                    result403.push(e403);
                                                                }
                                                                _rt::cabi_dealloc(base403, len403 * 16, 4);
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l387 as u64,
                                                                        low_bits: l388 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes391),
                                                                    version: _rt::string_lift(bytes394),
                                                                    parameters: result403,
                                                                }
                                                            };
                                                            result404.push(e404);
                                                        }
                                                        _rt::cabi_dealloc(base404, len404 * 40, 8);
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l381 as u64,
                                                                nanoseconds: l382 as u32,
                                                            },
                                                            target_version: l383 as u64,
                                                            new_component_size: l384 as u64,
                                                            new_active_plugins: result404,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e527)
                                                }
                                                18 => {
                                                    let e527 = {
                                                        let l405 = *base.add(16).cast::<i64>();
                                                        let l406 = *base.add(24).cast::<i32>();
                                                        let l407 = *base.add(32).cast::<i64>();
                                                        let l408 = i32::from(*base.add(40).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l405 as u64,
                                                                nanoseconds: l406 as u32,
                                                            },
                                                            target_version: l407 as u64,
                                                            details: match l408 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l409 = *base.add(44).cast::<*mut u8>();
                                                                        let l410 = *base.add(48).cast::<usize>();
                                                                        let len411 = l410;
                                                                        let bytes411 = _rt::Vec::from_raw_parts(
                                                                            l409.cast(),
                                                                            len411,
                                                                            len411,
                                                                        );
                                                                        _rt::string_lift(bytes411)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e527)
                                                }
                                                19 => {
                                                    let e527 = {
                                                        let l412 = *base.add(16).cast::<i64>();
                                                        let l413 = *base.add(24).cast::<i32>();
                                                        let l414 = *base.add(32).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l412 as u64,
                                                                nanoseconds: l413 as u32,
                                                            },
                                                            delta: l414 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e527)
                                                }
                                                20 => {
                                                    let e527 = {
                                                        let l415 = *base.add(16).cast::<i64>();
                                                        let l416 = *base.add(24).cast::<i32>();
                                                        let l417 = *base.add(32).cast::<i64>();
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l415 as u64,
                                                                nanoseconds: l416 as u32,
                                                            },
                                                            resource_id: l417 as u64,
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e527)
                                                }
                                                21 => {
                                                    let e527 = {
                                                        let l418 = *base.add(16).cast::<i64>();
                                                        let l419 = *base.add(24).cast::<i32>();
                                                        let l420 = *base.add(32).cast::<i64>();
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l418 as u64,
                                                                nanoseconds: l419 as u32,
                                                            },
                                                            resource_id: l420 as u64,
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e527)
                                                }
                                                22 => {
                                                    let e527 = {
                                                        let l421 = *base.add(16).cast::<i64>();
                                                        let l422 = *base.add(24).cast::<i32>();
                                                        let l423 = *base.add(32).cast::<i64>();
                                                        let l424 = *base.add(40).cast::<*mut u8>();
                                                        let l425 = *base.add(44).cast::<usize>();
                                                        let len426 = l425;
                                                        let bytes426 = _rt::Vec::from_raw_parts(
                                                            l424.cast(),
                                                            len426,
                                                            len426,
                                                        );
                                                        let l427 = *base.add(48).cast::<*mut u8>();
                                                        let l428 = *base.add(52).cast::<usize>();
                                                        let base477 = l427;
                                                        let len477 = l428;
                                                        let mut result477 = _rt::Vec::with_capacity(len477);
                                                        for i in 0..len477 {
                                                            let base = base477.add(i * 8);
                                                            let e477 = {
                                                                let l429 = *base.add(0).cast::<*mut u8>();
                                                                let l430 = *base.add(4).cast::<usize>();
                                                                let base476 = l429;
                                                                let len476 = l430;
                                                                let mut result476 = _rt::Vec::with_capacity(len476);
                                                                for i in 0..len476 {
                                                                    let base = base476.add(i * 24);
                                                                    let e476 = {
                                                                        let l431 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V475;
                                                                        let v475 = match l431 {
                                                                            0 => {
                                                                                let e475 = {
                                                                                    let l432 = *base.add(8).cast::<*mut u8>();
                                                                                    let l433 = *base.add(12).cast::<usize>();
                                                                                    let len434 = l433;
                                                                                    _rt::Vec::from_raw_parts(l432.cast(), len434, len434)
                                                                                };
                                                                                V475::RecordValue(e475)
                                                                            }
                                                                            1 => {
                                                                                let e475 = {
                                                                                    let l435 = *base.add(8).cast::<i32>();
                                                                                    let l436 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l435 as u32,
                                                                                        match l436 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l437 = *base.add(16).cast::<i32>();
                                                                                                    l437
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V475::VariantValue(e475)
                                                                            }
                                                                            2 => {
                                                                                let e475 = {
                                                                                    let l438 = *base.add(8).cast::<i32>();
                                                                                    l438 as u32
                                                                                };
                                                                                V475::EnumValue(e475)
                                                                            }
                                                                            3 => {
                                                                                let e475 = {
                                                                                    let l439 = *base.add(8).cast::<*mut u8>();
                                                                                    let l440 = *base.add(12).cast::<usize>();
                                                                                    let base442 = l439;
                                                                                    let len442 = l440;
                                                                                    let mut result442 = _rt::Vec::with_capacity(len442);
                                                                                    for i in 0..len442 {
                                                                                        let base = base442.add(i * 1);
                                                                                        let e442 = {
                                                                                            let l441 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l441 as u8)
                                                                                        };
                                                                                        result442.push(e442);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base442, len442 * 1, 1);
                                                                                    result442
                                                                                };
                                                                                V475::FlagsValue(e475)
                                                                            }
                                                                            4 => {
                                                                                let e475 = {
                                                                                    let l443 = *base.add(8).cast::<*mut u8>();
                                                                                    let l444 = *base.add(12).cast::<usize>();
                                                                                    let len445 = l444;
                                                                                    _rt::Vec::from_raw_parts(l443.cast(), len445, len445)
                                                                                };
                                                                                V475::TupleValue(e475)
                                                                            }
                                                                            5 => {
                                                                                let e475 = {
                                                                                    let l446 = *base.add(8).cast::<*mut u8>();
                                                                                    let l447 = *base.add(12).cast::<usize>();
                                                                                    let len448 = l447;
                                                                                    _rt::Vec::from_raw_parts(l446.cast(), len448, len448)
                                                                                };
                                                                                V475::ListValue(e475)
                                                                            }
                                                                            6 => {
                                                                                let e475 = {
                                                                                    let l449 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l449 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l450 = *base.add(12).cast::<i32>();
                                                                                                l450
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V475::OptionValue(e475)
                                                                            }
                                                                            7 => {
                                                                                let e475 = {
                                                                                    let l451 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l451 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l452 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l452 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l453 = *base.add(16).cast::<i32>();
                                                                                                            l453
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l454 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l454 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l455 = *base.add(16).cast::<i32>();
                                                                                                            l455
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V475::ResultValue(e475)
                                                                            }
                                                                            8 => {
                                                                                let e475 = {
                                                                                    let l456 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l456 as u8
                                                                                };
                                                                                V475::PrimU8(e475)
                                                                            }
                                                                            9 => {
                                                                                let e475 = {
                                                                                    let l457 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l457 as u16
                                                                                };
                                                                                V475::PrimU16(e475)
                                                                            }
                                                                            10 => {
                                                                                let e475 = {
                                                                                    let l458 = *base.add(8).cast::<i32>();
                                                                                    l458 as u32
                                                                                };
                                                                                V475::PrimU32(e475)
                                                                            }
                                                                            11 => {
                                                                                let e475 = {
                                                                                    let l459 = *base.add(8).cast::<i64>();
                                                                                    l459 as u64
                                                                                };
                                                                                V475::PrimU64(e475)
                                                                            }
                                                                            12 => {
                                                                                let e475 = {
                                                                                    let l460 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l460 as i8
                                                                                };
                                                                                V475::PrimS8(e475)
                                                                            }
                                                                            13 => {
                                                                                let e475 = {
                                                                                    let l461 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l461 as i16
                                                                                };
                                                                                V475::PrimS16(e475)
                                                                            }
                                                                            14 => {
                                                                                let e475 = {
                                                                                    let l462 = *base.add(8).cast::<i32>();
                                                                                    l462
                                                                                };
                                                                                V475::PrimS32(e475)
                                                                            }
                                                                            15 => {
                                                                                let e475 = {
                                                                                    let l463 = *base.add(8).cast::<i64>();
                                                                                    l463
                                                                                };
                                                                                V475::PrimS64(e475)
                                                                            }
                                                                            16 => {
                                                                                let e475 = {
                                                                                    let l464 = *base.add(8).cast::<f32>();
                                                                                    l464
                                                                                };
                                                                                V475::PrimFloat32(e475)
                                                                            }
                                                                            17 => {
                                                                                let e475 = {
                                                                                    let l465 = *base.add(8).cast::<f64>();
                                                                                    l465
                                                                                };
                                                                                V475::PrimFloat64(e475)
                                                                            }
                                                                            18 => {
                                                                                let e475 = {
                                                                                    let l466 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l466 as u32)
                                                                                };
                                                                                V475::PrimChar(e475)
                                                                            }
                                                                            19 => {
                                                                                let e475 = {
                                                                                    let l467 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l467 as u8)
                                                                                };
                                                                                V475::PrimBool(e475)
                                                                            }
                                                                            20 => {
                                                                                let e475 = {
                                                                                    let l468 = *base.add(8).cast::<*mut u8>();
                                                                                    let l469 = *base.add(12).cast::<usize>();
                                                                                    let len470 = l469;
                                                                                    let bytes470 = _rt::Vec::from_raw_parts(
                                                                                        l468.cast(),
                                                                                        len470,
                                                                                        len470,
                                                                                    );
                                                                                    _rt::string_lift(bytes470)
                                                                                };
                                                                                V475::PrimString(e475)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e475 = {
                                                                                    let l471 = *base.add(8).cast::<*mut u8>();
                                                                                    let l472 = *base.add(12).cast::<usize>();
                                                                                    let len473 = l472;
                                                                                    let bytes473 = _rt::Vec::from_raw_parts(
                                                                                        l471.cast(),
                                                                                        len473,
                                                                                        len473,
                                                                                    );
                                                                                    let l474 = *base.add(16).cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes473),
                                                                                        },
                                                                                        l474 as u64,
                                                                                    )
                                                                                };
                                                                                V475::Handle(e475)
                                                                            }
                                                                        };
                                                                        v475
                                                                    };
                                                                    result476.push(e476);
                                                                }
                                                                _rt::cabi_dealloc(base476, len476 * 24, 8);
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result476,
                                                                }
                                                            };
                                                            result477.push(e477);
                                                        }
                                                        _rt::cabi_dealloc(base477, len477 * 8, 4);
                                                        DescribeResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l421 as u64,
                                                                nanoseconds: l422 as u32,
                                                            },
                                                            resource_id: l423 as u64,
                                                            resource_name: _rt::string_lift(bytes426),
                                                            resource_params: result477,
                                                        }
                                                    };
                                                    OplogEntry::DescribeResource(e527)
                                                }
                                                23 => {
                                                    let e527 = {
                                                        let l478 = *base.add(16).cast::<i64>();
                                                        let l479 = *base.add(24).cast::<i32>();
                                                        let l480 = i32::from(*base.add(32).cast::<u8>());
                                                        let l481 = *base.add(36).cast::<*mut u8>();
                                                        let l482 = *base.add(40).cast::<usize>();
                                                        let len483 = l482;
                                                        let bytes483 = _rt::Vec::from_raw_parts(
                                                            l481.cast(),
                                                            len483,
                                                            len483,
                                                        );
                                                        let l484 = *base.add(44).cast::<*mut u8>();
                                                        let l485 = *base.add(48).cast::<usize>();
                                                        let len486 = l485;
                                                        let bytes486 = _rt::Vec::from_raw_parts(
                                                            l484.cast(),
                                                            len486,
                                                            len486,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l478 as u64,
                                                                nanoseconds: l479 as u32,
                                                            },
                                                            level: LogLevel::_lift(l480 as u8),
                                                            context: _rt::string_lift(bytes483),
                                                            message: _rt::string_lift(bytes486),
                                                        }
                                                    };
                                                    OplogEntry::Log(e527)
                                                }
                                                24 => {
                                                    let e527 = {
                                                        let l487 = *base.add(16).cast::<i64>();
                                                        let l488 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l487 as u64,
                                                            nanoseconds: l488 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e527)
                                                }
                                                25 => {
                                                    let e527 = {
                                                        let l489 = *base.add(16).cast::<i64>();
                                                        let l490 = *base.add(24).cast::<i32>();
                                                        let l491 = *base.add(32).cast::<i64>();
                                                        let l492 = *base.add(40).cast::<i64>();
                                                        let l493 = *base.add(48).cast::<*mut u8>();
                                                        let l494 = *base.add(52).cast::<usize>();
                                                        let len495 = l494;
                                                        let bytes495 = _rt::Vec::from_raw_parts(
                                                            l493.cast(),
                                                            len495,
                                                            len495,
                                                        );
                                                        let l496 = *base.add(56).cast::<*mut u8>();
                                                        let l497 = *base.add(60).cast::<usize>();
                                                        let len498 = l497;
                                                        let bytes498 = _rt::Vec::from_raw_parts(
                                                            l496.cast(),
                                                            len498,
                                                            len498,
                                                        );
                                                        let l499 = *base.add(64).cast::<*mut u8>();
                                                        let l500 = *base.add(68).cast::<usize>();
                                                        let base507 = l499;
                                                        let len507 = l500;
                                                        let mut result507 = _rt::Vec::with_capacity(len507);
                                                        for i in 0..len507 {
                                                            let base = base507.add(i * 16);
                                                            let e507 = {
                                                                let l501 = *base.add(0).cast::<*mut u8>();
                                                                let l502 = *base.add(4).cast::<usize>();
                                                                let len503 = l502;
                                                                let bytes503 = _rt::Vec::from_raw_parts(
                                                                    l501.cast(),
                                                                    len503,
                                                                    len503,
                                                                );
                                                                let l504 = *base.add(8).cast::<*mut u8>();
                                                                let l505 = *base.add(12).cast::<usize>();
                                                                let len506 = l505;
                                                                let bytes506 = _rt::Vec::from_raw_parts(
                                                                    l504.cast(),
                                                                    len506,
                                                                    len506,
                                                                );
                                                                (_rt::string_lift(bytes503), _rt::string_lift(bytes506))
                                                            };
                                                            result507.push(e507);
                                                        }
                                                        _rt::cabi_dealloc(base507, len507 * 16, 4);
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l489 as u64,
                                                                nanoseconds: l490 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l491 as u64,
                                                                    low_bits: l492 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes495),
                                                                version: _rt::string_lift(bytes498),
                                                                parameters: result507,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e527)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 26, "invalid enum discriminant");
                                                    let e527 = {
                                                        let l508 = *base.add(16).cast::<i64>();
                                                        let l509 = *base.add(24).cast::<i32>();
                                                        let l510 = *base.add(32).cast::<i64>();
                                                        let l511 = *base.add(40).cast::<i64>();
                                                        let l512 = *base.add(48).cast::<*mut u8>();
                                                        let l513 = *base.add(52).cast::<usize>();
                                                        let len514 = l513;
                                                        let bytes514 = _rt::Vec::from_raw_parts(
                                                            l512.cast(),
                                                            len514,
                                                            len514,
                                                        );
                                                        let l515 = *base.add(56).cast::<*mut u8>();
                                                        let l516 = *base.add(60).cast::<usize>();
                                                        let len517 = l516;
                                                        let bytes517 = _rt::Vec::from_raw_parts(
                                                            l515.cast(),
                                                            len517,
                                                            len517,
                                                        );
                                                        let l518 = *base.add(64).cast::<*mut u8>();
                                                        let l519 = *base.add(68).cast::<usize>();
                                                        let base526 = l518;
                                                        let len526 = l519;
                                                        let mut result526 = _rt::Vec::with_capacity(len526);
                                                        for i in 0..len526 {
                                                            let base = base526.add(i * 16);
                                                            let e526 = {
                                                                let l520 = *base.add(0).cast::<*mut u8>();
                                                                let l521 = *base.add(4).cast::<usize>();
                                                                let len522 = l521;
                                                                let bytes522 = _rt::Vec::from_raw_parts(
                                                                    l520.cast(),
                                                                    len522,
                                                                    len522,
                                                                );
                                                                let l523 = *base.add(8).cast::<*mut u8>();
                                                                let l524 = *base.add(12).cast::<usize>();
                                                                let len525 = l524;
                                                                let bytes525 = _rt::Vec::from_raw_parts(
                                                                    l523.cast(),
                                                                    len525,
                                                                    len525,
                                                                );
                                                                (_rt::string_lift(bytes522), _rt::string_lift(bytes525))
                                                            };
                                                            result526.push(e526);
                                                        }
                                                        _rt::cabi_dealloc(base526, len526 * 16, 4);
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l508 as u64,
                                                                nanoseconds: l509 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l510 as u64,
                                                                    low_bits: l511 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes514),
                                                                version: _rt::string_lift(bytes517),
                                                                parameters: result526,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e527)
                                                }
                                            };
                                            (l4 as u64, v527)
                                        };
                                        result528.push(e528);
                                    }
                                    _rt::cabi_dealloc(base528, len528 * 144, 8);
                                    result528
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type NodeIndex = i32;
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &Uri) -> Self {
                    unsafe {
                        let Uri { value: value0 } = location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 24);
                                        let e62 = {
                                            let l17 = i32::from(*base.add(0).cast::<u8>());
                                            let v61 = match l17 {
                                                0 => {
                                                    let e61 = {
                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                        let l19 = *base.add(12).cast::<usize>();
                                                        let len20 = l19;
                                                        _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                    };
                                                    WitNode::RecordValue(e61)
                                                }
                                                1 => {
                                                    let e61 = {
                                                        let l21 = *base.add(8).cast::<i32>();
                                                        let l22 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l21 as u32,
                                                            match l22 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l23 = *base.add(16).cast::<i32>();
                                                                        l23
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l24 = *base.add(8).cast::<i32>();
                                                        l24 as u32
                                                    };
                                                    WitNode::EnumValue(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l25 = *base.add(8).cast::<*mut u8>();
                                                        let l26 = *base.add(12).cast::<usize>();
                                                        let base28 = l25;
                                                        let len28 = l26;
                                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 1);
                                                            let e28 = {
                                                                let l27 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l27 as u8)
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                        result28
                                                    };
                                                    WitNode::FlagsValue(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l29 = *base.add(8).cast::<*mut u8>();
                                                        let l30 = *base.add(12).cast::<usize>();
                                                        let len31 = l30;
                                                        _rt::Vec::from_raw_parts(l29.cast(), len31, len31)
                                                    };
                                                    WitNode::TupleValue(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;
                                                        _rt::Vec::from_raw_parts(l32.cast(), len34, len34)
                                                    };
                                                    WitNode::ListValue(e61)
                                                }
                                                6 => {
                                                    let e61 = {
                                                        let l35 = i32::from(*base.add(8).cast::<u8>());
                                                        match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 = *base.add(12).cast::<i32>();
                                                                    l36
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e61)
                                                }
                                                7 => {
                                                    let e61 = {
                                                        let l37 = i32::from(*base.add(8).cast::<u8>());
                                                        match l37 {
                                                            0 => {
                                                                let e = {
                                                                    let l38 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l38 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l39 = *base.add(16).cast::<i32>();
                                                                                l39
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l40 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l40 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l41 = *base.add(16).cast::<i32>();
                                                                                l41
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l42 = i32::from(*base.add(8).cast::<u8>());
                                                        l42 as u8
                                                    };
                                                    WitNode::PrimU8(e61)
                                                }
                                                9 => {
                                                    let e61 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u16>());
                                                        l43 as u16
                                                    };
                                                    WitNode::PrimU16(e61)
                                                }
                                                10 => {
                                                    let e61 = {
                                                        let l44 = *base.add(8).cast::<i32>();
                                                        l44 as u32
                                                    };
                                                    WitNode::PrimU32(e61)
                                                }
                                                11 => {
                                                    let e61 = {
                                                        let l45 = *base.add(8).cast::<i64>();
                                                        l45 as u64
                                                    };
                                                    WitNode::PrimU64(e61)
                                                }
                                                12 => {
                                                    let e61 = {
                                                        let l46 = i32::from(*base.add(8).cast::<i8>());
                                                        l46 as i8
                                                    };
                                                    WitNode::PrimS8(e61)
                                                }
                                                13 => {
                                                    let e61 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i16>());
                                                        l47 as i16
                                                    };
                                                    WitNode::PrimS16(e61)
                                                }
                                                14 => {
                                                    let e61 = {
                                                        let l48 = *base.add(8).cast::<i32>();
                                                        l48
                                                    };
                                                    WitNode::PrimS32(e61)
                                                }
                                                15 => {
                                                    let e61 = {
                                                        let l49 = *base.add(8).cast::<i64>();
                                                        l49
                                                    };
                                                    WitNode::PrimS64(e61)
                                                }
                                                16 => {
                                                    let e61 = {
                                                        let l50 = *base.add(8).cast::<f32>();
                                                        l50
                                                    };
                                                    WitNode::PrimFloat32(e61)
                                                }
                                                17 => {
                                                    let e61 = {
                                                        let l51 = *base.add(8).cast::<f64>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat64(e61)
                                                }
                                                18 => {
                                                    let e61 = {
                                                        let l52 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l52 as u32)
                                                    };
                                                    WitNode::PrimChar(e61)
                                                }
                                                19 => {
                                                    let e61 = {
                                                        let l53 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l53 as u8)
                                                    };
                                                    WitNode::PrimBool(e61)
                                                }
                                                20 => {
                                                    let e61 = {
                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                        let l55 = *base.add(12).cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );
                                                        _rt::string_lift(bytes56)
                                                    };
                                                    WitNode::PrimString(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e61 = {
                                                        let l57 = *base.add(8).cast::<*mut u8>();
                                                        let l58 = *base.add(12).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes59),
                                                            },
                                                            l60 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e61)
                                                }
                                            };
                                            v61
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 24, 8);
                                    WitValue { nodes: result62 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l63 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v76 = match l63 {
                                        0 => {
                                            let e76 = {
                                                let l64 = *ptr13.add(8).cast::<*mut u8>();
                                                let l65 = *ptr13.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );
                                                _rt::string_lift(bytes66)
                                            };
                                            RpcError::ProtocolError(e76)
                                        }
                                        1 => {
                                            let e76 = {
                                                let l67 = *ptr13.add(8).cast::<*mut u8>();
                                                let l68 = *ptr13.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );
                                                _rt::string_lift(bytes69)
                                            };
                                            RpcError::Denied(e76)
                                        }
                                        2 => {
                                            let e76 = {
                                                let l70 = *ptr13.add(8).cast::<*mut u8>();
                                                let l71 = *ptr13.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );
                                                _rt::string_lift(bytes72)
                                            };
                                            RpcError::NotFound(e76)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e76 = {
                                                let l73 = *ptr13.add(8).cast::<*mut u8>();
                                                let l74 = *ptr13.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );
                                                _rt::string_lift(bytes75)
                                            };
                                            RpcError::RemoteInternalError(e76)
                                        }
                                    };
                                    v76
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v28 = match l15 {
                                        0 => {
                                            let e28 = {
                                                let l16 = *ptr13.add(8).cast::<*mut u8>();
                                                let l17 = *ptr13.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                            let e28 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            RpcError::Denied(e28)
                                        }
                                        2 => {
                                            let e28 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );
                                                _rt::string_lift(bytes24)
                                            };
                                            RpcError::NotFound(e28)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e28 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            RpcError::RemoteInternalError(e28)
                                        }
                                    };
                                    v28
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                        );
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        FutureInvokeResult::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 20],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base50 = l3;
                                                let len50 = l4;
                                                let mut result50 = _rt::Vec::with_capacity(len50);
                                                for i in 0..len50 {
                                                    let base = base50.add(i * 24);
                                                    let e50 = {
                                                        let l5 = i32::from(*base.add(0).cast::<u8>());
                                                        let v49 = match l5 {
                                                            0 => {
                                                                let e49 = {
                                                                    let l6 = *base.add(8).cast::<*mut u8>();
                                                                    let l7 = *base.add(12).cast::<usize>();
                                                                    let len8 = l7;
                                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                                                                };
                                                                WitNode::RecordValue(e49)
                                                            }
                                                            1 => {
                                                                let e49 = {
                                                                    let l9 = *base.add(8).cast::<i32>();
                                                                    let l10 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l9 as u32,
                                                                        match l10 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l11 = *base.add(16).cast::<i32>();
                                                                                    l11
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e49)
                                                            }
                                                            2 => {
                                                                let e49 = {
                                                                    let l12 = *base.add(8).cast::<i32>();
                                                                    l12 as u32
                                                                };
                                                                WitNode::EnumValue(e49)
                                                            }
                                                            3 => {
                                                                let e49 = {
                                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                                    let l14 = *base.add(12).cast::<usize>();
                                                                    let base16 = l13;
                                                                    let len16 = l14;
                                                                    let mut result16 = _rt::Vec::with_capacity(len16);
                                                                    for i in 0..len16 {
                                                                        let base = base16.add(i * 1);
                                                                        let e16 = {
                                                                            let l15 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l15 as u8)
                                                                        };
                                                                        result16.push(e16);
                                                                    }
                                                                    _rt::cabi_dealloc(base16, len16 * 1, 1);
                                                                    result16
                                                                };
                                                                WitNode::FlagsValue(e49)
                                                            }
                                                            4 => {
                                                                let e49 = {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base.add(12).cast::<usize>();
                                                                    let len19 = l18;
                                                                    _rt::Vec::from_raw_parts(l17.cast(), len19, len19)
                                                                };
                                                                WitNode::TupleValue(e49)
                                                            }
                                                            5 => {
                                                                let e49 = {
                                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                                    let l21 = *base.add(12).cast::<usize>();
                                                                    let len22 = l21;
                                                                    _rt::Vec::from_raw_parts(l20.cast(), len22, len22)
                                                                };
                                                                WitNode::ListValue(e49)
                                                            }
                                                            6 => {
                                                                let e49 = {
                                                                    let l23 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l23 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l24 = *base.add(12).cast::<i32>();
                                                                                l24
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e49)
                                                            }
                                                            7 => {
                                                                let e49 = {
                                                                    let l25 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l25 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l26 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l26 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l27 = *base.add(16).cast::<i32>();
                                                                                            l27
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l28 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l28 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l29 = *base.add(16).cast::<i32>();
                                                                                            l29
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e49)
                                                            }
                                                            8 => {
                                                                let e49 = {
                                                                    let l30 = i32::from(*base.add(8).cast::<u8>());
                                                                    l30 as u8
                                                                };
                                                                WitNode::PrimU8(e49)
                                                            }
                                                            9 => {
                                                                let e49 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u16>());
                                                                    l31 as u16
                                                                };
                                                                WitNode::PrimU16(e49)
                                                            }
                                                            10 => {
                                                                let e49 = {
                                                                    let l32 = *base.add(8).cast::<i32>();
                                                                    l32 as u32
                                                                };
                                                                WitNode::PrimU32(e49)
                                                            }
                                                            11 => {
                                                                let e49 = {
                                                                    let l33 = *base.add(8).cast::<i64>();
                                                                    l33 as u64
                                                                };
                                                                WitNode::PrimU64(e49)
                                                            }
                                                            12 => {
                                                                let e49 = {
                                                                    let l34 = i32::from(*base.add(8).cast::<i8>());
                                                                    l34 as i8
                                                                };
                                                                WitNode::PrimS8(e49)
                                                            }
                                                            13 => {
                                                                let e49 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i16>());
                                                                    l35 as i16
                                                                };
                                                                WitNode::PrimS16(e49)
                                                            }
                                                            14 => {
                                                                let e49 = {
                                                                    let l36 = *base.add(8).cast::<i32>();
                                                                    l36
                                                                };
                                                                WitNode::PrimS32(e49)
                                                            }
                                                            15 => {
                                                                let e49 = {
                                                                    let l37 = *base.add(8).cast::<i64>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS64(e49)
                                                            }
                                                            16 => {
                                                                let e49 = {
                                                                    let l38 = *base.add(8).cast::<f32>();
                                                                    l38
                                                                };
                                                                WitNode::PrimFloat32(e49)
                                                            }
                                                            17 => {
                                                                let e49 = {
                                                                    let l39 = *base.add(8).cast::<f64>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat64(e49)
                                                            }
                                                            18 => {
                                                                let e49 = {
                                                                    let l40 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l40 as u32)
                                                                };
                                                                WitNode::PrimChar(e49)
                                                            }
                                                            19 => {
                                                                let e49 = {
                                                                    let l41 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                WitNode::PrimBool(e49)
                                                            }
                                                            20 => {
                                                                let e49 = {
                                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                                    let l43 = *base.add(12).cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 = _rt::Vec::from_raw_parts(
                                                                        l42.cast(),
                                                                        len44,
                                                                        len44,
                                                                    );
                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                WitNode::PrimString(e49)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e49 = {
                                                                    let l45 = *base.add(8).cast::<*mut u8>();
                                                                    let l46 = *base.add(12).cast::<usize>();
                                                                    let len47 = l46;
                                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                                        l45.cast(),
                                                                        len47,
                                                                        len47,
                                                                    );
                                                                    let l48 = *base.add(16).cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes47),
                                                                        },
                                                                        l48 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e49)
                                                            }
                                                        };
                                                        v49
                                                    };
                                                    result50.push(e50);
                                                }
                                                _rt::cabi_dealloc(base50, len50 * 24, 8);
                                                WitValue { nodes: result50 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l51 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v64 = match l51 {
                                                    0 => {
                                                        let e64 = {
                                                            let l52 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l53 = *ptr0.add(16).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );
                                                            _rt::string_lift(bytes54)
                                                        };
                                                        RpcError::ProtocolError(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l55 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l56 = *ptr0.add(16).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );
                                                            _rt::string_lift(bytes57)
                                                        };
                                                        RpcError::Denied(e64)
                                                    }
                                                    2 => {
                                                        let e64 = {
                                                            let l58 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l59 = *ptr0.add(16).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );
                                                            _rt::string_lift(bytes60)
                                                        };
                                                        RpcError::NotFound(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e64 = {
                                                            let l61 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l62 = *ptr0.add(16).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );
                                                            _rt::string_lift(bytes63)
                                                        };
                                                        RpcError::RemoteInternalError(e64)
                                                    }
                                                };
                                                v64
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
        }
        /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
        /// time.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A monotonic clock is a clock which has an unspecified initial value, and
        /// successive reads of the clock will produce non-decreasing values.
        ///
        /// It is intended for measuring elapsed time.
        #[allow(dead_code, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// occured.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(
                        ret as u32,
                    )
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the given duration has
            /// elapsed, starting at the time at which this function was called.
            /// occured.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(
                        ret as u32,
                    )
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` epresents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod api {
            #[allow(dead_code, clippy::all)]
            pub mod oplog_processor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AccountId = super::super::super::super::golem::api::host::AccountId;
                pub type ComponentId = super::super::super::super::golem::api::host::ComponentId;
                pub type OplogIndex = super::super::super::super::golem::api::host::OplogIndex;
                pub type WorkerId = super::super::super::super::golem::api::host::WorkerId;
                pub type WorkerMetadata = super::super::super::super::golem::api::host::WorkerMetadata;
                pub type OplogEntry = super::super::super::super::golem::api::oplog::OplogEntry;
                #[derive(Clone)]
                pub struct AccountInfo {
                    pub account_id: AccountId,
                }
                impl ::core::fmt::Debug for AccountInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AccountInfo")
                            .field("account-id", &self.account_id)
                            .finish()
                    }
                }
                /// A processor resource is instantiated for each account having activated this oplog processor plugin.
                /// There are no guarantees for the number of processors running at the same time, and different entries from the same worker
                /// may be sent to different processor instances.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Processor {
                    handle: _rt::Resource<Processor>,
                }
                type _ProcessorRep<T> = Option<T>;
                impl Processor {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Processor`.
                    pub fn new<T: GuestProcessor>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ProcessorRep<T> = Some(val);
                        let ptr: *mut _ProcessorRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestProcessor>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestProcessor>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestProcessor>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ProcessorRep<T>);
                    }
                    fn as_ptr<T: GuestProcessor>(&self) -> *mut _ProcessorRep<T> {
                        Processor::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Processor`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ProcessorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Processor>,
                }
                impl<'a> ProcessorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestProcessor>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ProcessorRep<T> {
                        Processor::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Processor {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:api/oplog-processor@1.1.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]processor"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_processor_cabi<T: GuestProcessor>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i64,
                    arg3: i64,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base7 = arg4;
                    let len7 = arg5;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7.add(i * 16);
                        let e7 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            let l4 = *base.add(8).cast::<*mut u8>();
                            let l5 = *base.add(12).cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            (_rt::string_lift(bytes3), _rt::string_lift(bytes6))
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(base7, len7 * 16, 4);
                    let result8 = Processor::new(
                        T::new(
                            AccountInfo {
                                account_id: super::super::super::super::golem::api::host::AccountId {
                                    value: _rt::string_lift(bytes0),
                                },
                            },
                            super::super::super::super::golem::api::host::ComponentId {
                                uuid: super::super::super::super::golem::api::host::Uuid {
                                    high_bits: arg2 as u64,
                                    low_bits: arg3 as u64,
                                },
                            },
                            result7,
                        ),
                    );
                    (result8).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_processor_process_cabi<T: GuestProcessor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(8).cast::<i64>();
                    let l2 = *arg0.add(16).cast::<i64>();
                    let l3 = *arg0.add(24).cast::<*mut u8>();
                    let l4 = *arg0.add(28).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *arg0.add(32).cast::<i64>();
                    let l7 = *arg0.add(40).cast::<i64>();
                    let l8 = *arg0.add(48).cast::<*mut u8>();
                    let l9 = *arg0.add(52).cast::<usize>();
                    let len10 = l9;
                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                    let l11 = *arg0.add(56).cast::<*mut u8>();
                    let l12 = *arg0.add(60).cast::<usize>();
                    let base16 = l11;
                    let len16 = l12;
                    let mut result16 = _rt::Vec::with_capacity(len16);
                    for i in 0..len16 {
                        let base = base16.add(i * 8);
                        let e16 = {
                            let l13 = *base.add(0).cast::<*mut u8>();
                            let l14 = *base.add(4).cast::<usize>();
                            let len15 = l14;
                            let bytes15 = _rt::Vec::from_raw_parts(
                                l13.cast(),
                                len15,
                                len15,
                            );
                            _rt::string_lift(bytes15)
                        };
                        result16.push(e16);
                    }
                    _rt::cabi_dealloc(base16, len16 * 8, 4);
                    let l17 = *arg0.add(64).cast::<*mut u8>();
                    let l18 = *arg0.add(68).cast::<usize>();
                    let base25 = l17;
                    let len25 = l18;
                    let mut result25 = _rt::Vec::with_capacity(len25);
                    for i in 0..len25 {
                        let base = base25.add(i * 16);
                        let e25 = {
                            let l19 = *base.add(0).cast::<*mut u8>();
                            let l20 = *base.add(4).cast::<usize>();
                            let len21 = l20;
                            let bytes21 = _rt::Vec::from_raw_parts(
                                l19.cast(),
                                len21,
                                len21,
                            );
                            let l22 = *base.add(8).cast::<*mut u8>();
                            let l23 = *base.add(12).cast::<usize>();
                            let len24 = l23;
                            let bytes24 = _rt::Vec::from_raw_parts(
                                l22.cast(),
                                len24,
                                len24,
                            );
                            (_rt::string_lift(bytes21), _rt::string_lift(bytes24))
                        };
                        result25.push(e25);
                    }
                    _rt::cabi_dealloc(base25, len25 * 16, 4);
                    let l26 = i32::from(*arg0.add(72).cast::<u8>());
                    let l27 = *arg0.add(80).cast::<i64>();
                    let l28 = *arg0.add(88).cast::<i64>();
                    let l29 = *arg0.add(96).cast::<i64>();
                    let l30 = *arg0.add(104).cast::<*mut u8>();
                    let l31 = *arg0.add(108).cast::<usize>();
                    let base555 = l30;
                    let len555 = l31;
                    let mut result555 = _rt::Vec::with_capacity(len555);
                    for i in 0..len555 {
                        let base = base555.add(i * 136);
                        let e555 = {
                            let l32 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::golem::api::oplog::OplogEntry as V554;
                            let v554 = match l32 {
                                0 => {
                                    let e554 = {
                                        let l33 = *base.add(8).cast::<i64>();
                                        let l34 = *base.add(16).cast::<i32>();
                                        let l35 = *base.add(24).cast::<i64>();
                                        let l36 = *base.add(32).cast::<i64>();
                                        let l37 = *base.add(40).cast::<*mut u8>();
                                        let l38 = *base.add(44).cast::<usize>();
                                        let len39 = l38;
                                        let bytes39 = _rt::Vec::from_raw_parts(
                                            l37.cast(),
                                            len39,
                                            len39,
                                        );
                                        let l40 = *base.add(48).cast::<i64>();
                                        let l41 = *base.add(56).cast::<*mut u8>();
                                        let l42 = *base.add(60).cast::<usize>();
                                        let base46 = l41;
                                        let len46 = l42;
                                        let mut result46 = _rt::Vec::with_capacity(len46);
                                        for i in 0..len46 {
                                            let base = base46.add(i * 8);
                                            let e46 = {
                                                let l43 = *base.add(0).cast::<*mut u8>();
                                                let l44 = *base.add(4).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            result46.push(e46);
                                        }
                                        _rt::cabi_dealloc(base46, len46 * 8, 4);
                                        let l47 = *base.add(64).cast::<*mut u8>();
                                        let l48 = *base.add(68).cast::<usize>();
                                        let base55 = l47;
                                        let len55 = l48;
                                        let mut result55 = _rt::Vec::with_capacity(len55);
                                        for i in 0..len55 {
                                            let base = base55.add(i * 16);
                                            let e55 = {
                                                let l49 = *base.add(0).cast::<*mut u8>();
                                                let l50 = *base.add(4).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                let l52 = *base.add(8).cast::<*mut u8>();
                                                let l53 = *base.add(12).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                (_rt::string_lift(bytes51), _rt::string_lift(bytes54))
                                            };
                                            result55.push(e55);
                                        }
                                        _rt::cabi_dealloc(base55, len55 * 16, 4);
                                        let l56 = *base.add(72).cast::<*mut u8>();
                                        let l57 = *base.add(76).cast::<usize>();
                                        let len58 = l57;
                                        let bytes58 = _rt::Vec::from_raw_parts(
                                            l56.cast(),
                                            len58,
                                            len58,
                                        );
                                        let l59 = i32::from(*base.add(80).cast::<u8>());
                                        let l65 = *base.add(112).cast::<i64>();
                                        let l66 = *base.add(120).cast::<i64>();
                                        let l67 = *base.add(128).cast::<*mut u8>();
                                        let l68 = *base.add(132).cast::<usize>();
                                        let base86 = l67;
                                        let len86 = l68;
                                        let mut result86 = _rt::Vec::with_capacity(len86);
                                        for i in 0..len86 {
                                            let base = base86.add(i * 40);
                                            let e86 = {
                                                let l69 = *base.add(0).cast::<i64>();
                                                let l70 = *base.add(8).cast::<i64>();
                                                let l71 = *base.add(16).cast::<*mut u8>();
                                                let l72 = *base.add(20).cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                let l74 = *base.add(24).cast::<*mut u8>();
                                                let l75 = *base.add(28).cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                let l77 = *base.add(32).cast::<*mut u8>();
                                                let l78 = *base.add(36).cast::<usize>();
                                                let base85 = l77;
                                                let len85 = l78;
                                                let mut result85 = _rt::Vec::with_capacity(len85);
                                                for i in 0..len85 {
                                                    let base = base85.add(i * 16);
                                                    let e85 = {
                                                        let l79 = *base.add(0).cast::<*mut u8>();
                                                        let l80 = *base.add(4).cast::<usize>();
                                                        let len81 = l80;
                                                        let bytes81 = _rt::Vec::from_raw_parts(
                                                            l79.cast(),
                                                            len81,
                                                            len81,
                                                        );
                                                        let l82 = *base.add(8).cast::<*mut u8>();
                                                        let l83 = *base.add(12).cast::<usize>();
                                                        let len84 = l83;
                                                        let bytes84 = _rt::Vec::from_raw_parts(
                                                            l82.cast(),
                                                            len84,
                                                            len84,
                                                        );
                                                        (_rt::string_lift(bytes81), _rt::string_lift(bytes84))
                                                    };
                                                    result85.push(e85);
                                                }
                                                _rt::cabi_dealloc(base85, len85 * 16, 4);
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    installation_id: super::super::super::super::golem::api::host::Uuid {
                                                        high_bits: l69 as u64,
                                                        low_bits: l70 as u64,
                                                    },
                                                    name: _rt::string_lift(bytes73),
                                                    version: _rt::string_lift(bytes76),
                                                    parameters: result85,
                                                }
                                            };
                                            result86.push(e86);
                                        }
                                        _rt::cabi_dealloc(base86, len86 * 40, 8);
                                        super::super::super::super::golem::api::oplog::CreateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l33 as u64,
                                                nanoseconds: l34 as u32,
                                            },
                                            worker_id: super::super::super::super::golem::api::host::WorkerId {
                                                component_id: super::super::super::super::golem::api::host::ComponentId {
                                                    uuid: super::super::super::super::golem::api::host::Uuid {
                                                        high_bits: l35 as u64,
                                                        low_bits: l36 as u64,
                                                    },
                                                },
                                                worker_name: _rt::string_lift(bytes39),
                                            },
                                            component_version: l40 as u64,
                                            args: result46,
                                            env: result55,
                                            account_id: super::super::super::super::golem::api::host::AccountId {
                                                value: _rt::string_lift(bytes58),
                                            },
                                            parent: match l59 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l60 = *base.add(88).cast::<i64>();
                                                        let l61 = *base.add(96).cast::<i64>();
                                                        let l62 = *base.add(104).cast::<*mut u8>();
                                                        let l63 = *base.add(108).cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        super::super::super::super::golem::api::host::WorkerId {
                                                            component_id: super::super::super::super::golem::api::host::ComponentId {
                                                                uuid: super::super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l60 as u64,
                                                                    low_bits: l61 as u64,
                                                                },
                                                            },
                                                            worker_name: _rt::string_lift(bytes64),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            component_size: l65 as u64,
                                            initial_total_linear_memory_size: l66 as u64,
                                            initial_active_plugins: result86,
                                        }
                                    };
                                    V554::Create(e554)
                                }
                                1 => {
                                    let e554 = {
                                        let l87 = *base.add(8).cast::<i64>();
                                        let l88 = *base.add(16).cast::<i32>();
                                        let l89 = *base.add(24).cast::<*mut u8>();
                                        let l90 = *base.add(28).cast::<usize>();
                                        let len91 = l90;
                                        let bytes91 = _rt::Vec::from_raw_parts(
                                            l89.cast(),
                                            len91,
                                            len91,
                                        );
                                        let l92 = *base.add(32).cast::<*mut u8>();
                                        let l93 = *base.add(36).cast::<usize>();
                                        let base139 = l92;
                                        let len139 = l93;
                                        let mut result139 = _rt::Vec::with_capacity(len139);
                                        for i in 0..len139 {
                                            let base = base139.add(i * 24);
                                            let e139 = {
                                                let l94 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V138;
                                                let v138 = match l94 {
                                                    0 => {
                                                        let e138 = {
                                                            let l95 = *base.add(8).cast::<*mut u8>();
                                                            let l96 = *base.add(12).cast::<usize>();
                                                            let len97 = l96;
                                                            _rt::Vec::from_raw_parts(l95.cast(), len97, len97)
                                                        };
                                                        V138::RecordValue(e138)
                                                    }
                                                    1 => {
                                                        let e138 = {
                                                            let l98 = *base.add(8).cast::<i32>();
                                                            let l99 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l98 as u32,
                                                                match l99 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l100 = *base.add(16).cast::<i32>();
                                                                            l100
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V138::VariantValue(e138)
                                                    }
                                                    2 => {
                                                        let e138 = {
                                                            let l101 = *base.add(8).cast::<i32>();
                                                            l101 as u32
                                                        };
                                                        V138::EnumValue(e138)
                                                    }
                                                    3 => {
                                                        let e138 = {
                                                            let l102 = *base.add(8).cast::<*mut u8>();
                                                            let l103 = *base.add(12).cast::<usize>();
                                                            let base105 = l102;
                                                            let len105 = l103;
                                                            let mut result105 = _rt::Vec::with_capacity(len105);
                                                            for i in 0..len105 {
                                                                let base = base105.add(i * 1);
                                                                let e105 = {
                                                                    let l104 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l104 as u8)
                                                                };
                                                                result105.push(e105);
                                                            }
                                                            _rt::cabi_dealloc(base105, len105 * 1, 1);
                                                            result105
                                                        };
                                                        V138::FlagsValue(e138)
                                                    }
                                                    4 => {
                                                        let e138 = {
                                                            let l106 = *base.add(8).cast::<*mut u8>();
                                                            let l107 = *base.add(12).cast::<usize>();
                                                            let len108 = l107;
                                                            _rt::Vec::from_raw_parts(l106.cast(), len108, len108)
                                                        };
                                                        V138::TupleValue(e138)
                                                    }
                                                    5 => {
                                                        let e138 = {
                                                            let l109 = *base.add(8).cast::<*mut u8>();
                                                            let l110 = *base.add(12).cast::<usize>();
                                                            let len111 = l110;
                                                            _rt::Vec::from_raw_parts(l109.cast(), len111, len111)
                                                        };
                                                        V138::ListValue(e138)
                                                    }
                                                    6 => {
                                                        let e138 = {
                                                            let l112 = i32::from(*base.add(8).cast::<u8>());
                                                            match l112 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l113 = *base.add(12).cast::<i32>();
                                                                        l113
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V138::OptionValue(e138)
                                                    }
                                                    7 => {
                                                        let e138 = {
                                                            let l114 = i32::from(*base.add(8).cast::<u8>());
                                                            match l114 {
                                                                0 => {
                                                                    let e = {
                                                                        let l115 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l115 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l116 = *base.add(16).cast::<i32>();
                                                                                    l116
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l117 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l117 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l118 = *base.add(16).cast::<i32>();
                                                                                    l118
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V138::ResultValue(e138)
                                                    }
                                                    8 => {
                                                        let e138 = {
                                                            let l119 = i32::from(*base.add(8).cast::<u8>());
                                                            l119 as u8
                                                        };
                                                        V138::PrimU8(e138)
                                                    }
                                                    9 => {
                                                        let e138 = {
                                                            let l120 = i32::from(*base.add(8).cast::<u16>());
                                                            l120 as u16
                                                        };
                                                        V138::PrimU16(e138)
                                                    }
                                                    10 => {
                                                        let e138 = {
                                                            let l121 = *base.add(8).cast::<i32>();
                                                            l121 as u32
                                                        };
                                                        V138::PrimU32(e138)
                                                    }
                                                    11 => {
                                                        let e138 = {
                                                            let l122 = *base.add(8).cast::<i64>();
                                                            l122 as u64
                                                        };
                                                        V138::PrimU64(e138)
                                                    }
                                                    12 => {
                                                        let e138 = {
                                                            let l123 = i32::from(*base.add(8).cast::<i8>());
                                                            l123 as i8
                                                        };
                                                        V138::PrimS8(e138)
                                                    }
                                                    13 => {
                                                        let e138 = {
                                                            let l124 = i32::from(*base.add(8).cast::<i16>());
                                                            l124 as i16
                                                        };
                                                        V138::PrimS16(e138)
                                                    }
                                                    14 => {
                                                        let e138 = {
                                                            let l125 = *base.add(8).cast::<i32>();
                                                            l125
                                                        };
                                                        V138::PrimS32(e138)
                                                    }
                                                    15 => {
                                                        let e138 = {
                                                            let l126 = *base.add(8).cast::<i64>();
                                                            l126
                                                        };
                                                        V138::PrimS64(e138)
                                                    }
                                                    16 => {
                                                        let e138 = {
                                                            let l127 = *base.add(8).cast::<f32>();
                                                            l127
                                                        };
                                                        V138::PrimFloat32(e138)
                                                    }
                                                    17 => {
                                                        let e138 = {
                                                            let l128 = *base.add(8).cast::<f64>();
                                                            l128
                                                        };
                                                        V138::PrimFloat64(e138)
                                                    }
                                                    18 => {
                                                        let e138 = {
                                                            let l129 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l129 as u32)
                                                        };
                                                        V138::PrimChar(e138)
                                                    }
                                                    19 => {
                                                        let e138 = {
                                                            let l130 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l130 as u8)
                                                        };
                                                        V138::PrimBool(e138)
                                                    }
                                                    20 => {
                                                        let e138 = {
                                                            let l131 = *base.add(8).cast::<*mut u8>();
                                                            let l132 = *base.add(12).cast::<usize>();
                                                            let len133 = l132;
                                                            let bytes133 = _rt::Vec::from_raw_parts(
                                                                l131.cast(),
                                                                len133,
                                                                len133,
                                                            );
                                                            _rt::string_lift(bytes133)
                                                        };
                                                        V138::PrimString(e138)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e138 = {
                                                            let l134 = *base.add(8).cast::<*mut u8>();
                                                            let l135 = *base.add(12).cast::<usize>();
                                                            let len136 = l135;
                                                            let bytes136 = _rt::Vec::from_raw_parts(
                                                                l134.cast(),
                                                                len136,
                                                                len136,
                                                            );
                                                            let l137 = *base.add(16).cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes136),
                                                                },
                                                                l137 as u64,
                                                            )
                                                        };
                                                        V138::Handle(e138)
                                                    }
                                                };
                                                v138
                                            };
                                            result139.push(e139);
                                        }
                                        _rt::cabi_dealloc(base139, len139 * 24, 8);
                                        let l140 = *base.add(40).cast::<*mut u8>();
                                        let l141 = *base.add(44).cast::<usize>();
                                        let base187 = l140;
                                        let len187 = l141;
                                        let mut result187 = _rt::Vec::with_capacity(len187);
                                        for i in 0..len187 {
                                            let base = base187.add(i * 24);
                                            let e187 = {
                                                let l142 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V186;
                                                let v186 = match l142 {
                                                    0 => {
                                                        let e186 = {
                                                            let l143 = *base.add(8).cast::<*mut u8>();
                                                            let l144 = *base.add(12).cast::<usize>();
                                                            let len145 = l144;
                                                            _rt::Vec::from_raw_parts(l143.cast(), len145, len145)
                                                        };
                                                        V186::RecordValue(e186)
                                                    }
                                                    1 => {
                                                        let e186 = {
                                                            let l146 = *base.add(8).cast::<i32>();
                                                            let l147 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l146 as u32,
                                                                match l147 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l148 = *base.add(16).cast::<i32>();
                                                                            l148
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V186::VariantValue(e186)
                                                    }
                                                    2 => {
                                                        let e186 = {
                                                            let l149 = *base.add(8).cast::<i32>();
                                                            l149 as u32
                                                        };
                                                        V186::EnumValue(e186)
                                                    }
                                                    3 => {
                                                        let e186 = {
                                                            let l150 = *base.add(8).cast::<*mut u8>();
                                                            let l151 = *base.add(12).cast::<usize>();
                                                            let base153 = l150;
                                                            let len153 = l151;
                                                            let mut result153 = _rt::Vec::with_capacity(len153);
                                                            for i in 0..len153 {
                                                                let base = base153.add(i * 1);
                                                                let e153 = {
                                                                    let l152 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l152 as u8)
                                                                };
                                                                result153.push(e153);
                                                            }
                                                            _rt::cabi_dealloc(base153, len153 * 1, 1);
                                                            result153
                                                        };
                                                        V186::FlagsValue(e186)
                                                    }
                                                    4 => {
                                                        let e186 = {
                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                            let l155 = *base.add(12).cast::<usize>();
                                                            let len156 = l155;
                                                            _rt::Vec::from_raw_parts(l154.cast(), len156, len156)
                                                        };
                                                        V186::TupleValue(e186)
                                                    }
                                                    5 => {
                                                        let e186 = {
                                                            let l157 = *base.add(8).cast::<*mut u8>();
                                                            let l158 = *base.add(12).cast::<usize>();
                                                            let len159 = l158;
                                                            _rt::Vec::from_raw_parts(l157.cast(), len159, len159)
                                                        };
                                                        V186::ListValue(e186)
                                                    }
                                                    6 => {
                                                        let e186 = {
                                                            let l160 = i32::from(*base.add(8).cast::<u8>());
                                                            match l160 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l161 = *base.add(12).cast::<i32>();
                                                                        l161
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V186::OptionValue(e186)
                                                    }
                                                    7 => {
                                                        let e186 = {
                                                            let l162 = i32::from(*base.add(8).cast::<u8>());
                                                            match l162 {
                                                                0 => {
                                                                    let e = {
                                                                        let l163 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l163 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l164 = *base.add(16).cast::<i32>();
                                                                                    l164
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l165 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l165 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l166 = *base.add(16).cast::<i32>();
                                                                                    l166
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V186::ResultValue(e186)
                                                    }
                                                    8 => {
                                                        let e186 = {
                                                            let l167 = i32::from(*base.add(8).cast::<u8>());
                                                            l167 as u8
                                                        };
                                                        V186::PrimU8(e186)
                                                    }
                                                    9 => {
                                                        let e186 = {
                                                            let l168 = i32::from(*base.add(8).cast::<u16>());
                                                            l168 as u16
                                                        };
                                                        V186::PrimU16(e186)
                                                    }
                                                    10 => {
                                                        let e186 = {
                                                            let l169 = *base.add(8).cast::<i32>();
                                                            l169 as u32
                                                        };
                                                        V186::PrimU32(e186)
                                                    }
                                                    11 => {
                                                        let e186 = {
                                                            let l170 = *base.add(8).cast::<i64>();
                                                            l170 as u64
                                                        };
                                                        V186::PrimU64(e186)
                                                    }
                                                    12 => {
                                                        let e186 = {
                                                            let l171 = i32::from(*base.add(8).cast::<i8>());
                                                            l171 as i8
                                                        };
                                                        V186::PrimS8(e186)
                                                    }
                                                    13 => {
                                                        let e186 = {
                                                            let l172 = i32::from(*base.add(8).cast::<i16>());
                                                            l172 as i16
                                                        };
                                                        V186::PrimS16(e186)
                                                    }
                                                    14 => {
                                                        let e186 = {
                                                            let l173 = *base.add(8).cast::<i32>();
                                                            l173
                                                        };
                                                        V186::PrimS32(e186)
                                                    }
                                                    15 => {
                                                        let e186 = {
                                                            let l174 = *base.add(8).cast::<i64>();
                                                            l174
                                                        };
                                                        V186::PrimS64(e186)
                                                    }
                                                    16 => {
                                                        let e186 = {
                                                            let l175 = *base.add(8).cast::<f32>();
                                                            l175
                                                        };
                                                        V186::PrimFloat32(e186)
                                                    }
                                                    17 => {
                                                        let e186 = {
                                                            let l176 = *base.add(8).cast::<f64>();
                                                            l176
                                                        };
                                                        V186::PrimFloat64(e186)
                                                    }
                                                    18 => {
                                                        let e186 = {
                                                            let l177 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l177 as u32)
                                                        };
                                                        V186::PrimChar(e186)
                                                    }
                                                    19 => {
                                                        let e186 = {
                                                            let l178 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l178 as u8)
                                                        };
                                                        V186::PrimBool(e186)
                                                    }
                                                    20 => {
                                                        let e186 = {
                                                            let l179 = *base.add(8).cast::<*mut u8>();
                                                            let l180 = *base.add(12).cast::<usize>();
                                                            let len181 = l180;
                                                            let bytes181 = _rt::Vec::from_raw_parts(
                                                                l179.cast(),
                                                                len181,
                                                                len181,
                                                            );
                                                            _rt::string_lift(bytes181)
                                                        };
                                                        V186::PrimString(e186)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e186 = {
                                                            let l182 = *base.add(8).cast::<*mut u8>();
                                                            let l183 = *base.add(12).cast::<usize>();
                                                            let len184 = l183;
                                                            let bytes184 = _rt::Vec::from_raw_parts(
                                                                l182.cast(),
                                                                len184,
                                                                len184,
                                                            );
                                                            let l185 = *base.add(16).cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes184),
                                                                },
                                                                l185 as u64,
                                                            )
                                                        };
                                                        V186::Handle(e186)
                                                    }
                                                };
                                                v186
                                            };
                                            result187.push(e187);
                                        }
                                        _rt::cabi_dealloc(base187, len187 * 24, 8);
                                        let l188 = i32::from(*base.add(48).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::WrappedFunctionType as V191;
                                        let v191 = match l188 {
                                            0 => V191::ReadLocal,
                                            1 => V191::WriteLocal,
                                            2 => V191::ReadRemote,
                                            3 => V191::WriteRemote,
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e191 = {
                                                    let l189 = i32::from(*base.add(56).cast::<u8>());
                                                    match l189 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l190 = *base.add(64).cast::<i64>();
                                                                l190 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                V191::WriteRemoteBatched(e191)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::ImportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l87 as u64,
                                                nanoseconds: l88 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes91),
                                            request: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result139,
                                            },
                                            response: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result187,
                                            },
                                            wrapped_function_type: v191,
                                        }
                                    };
                                    V554::ImportedFunctionInvoked(e554)
                                }
                                2 => {
                                    let e554 = {
                                        let l192 = *base.add(8).cast::<i64>();
                                        let l193 = *base.add(16).cast::<i32>();
                                        let l194 = *base.add(24).cast::<*mut u8>();
                                        let l195 = *base.add(28).cast::<usize>();
                                        let len196 = l195;
                                        let bytes196 = _rt::Vec::from_raw_parts(
                                            l194.cast(),
                                            len196,
                                            len196,
                                        );
                                        let l197 = *base.add(32).cast::<*mut u8>();
                                        let l198 = *base.add(36).cast::<usize>();
                                        let base247 = l197;
                                        let len247 = l198;
                                        let mut result247 = _rt::Vec::with_capacity(len247);
                                        for i in 0..len247 {
                                            let base = base247.add(i * 8);
                                            let e247 = {
                                                let l199 = *base.add(0).cast::<*mut u8>();
                                                let l200 = *base.add(4).cast::<usize>();
                                                let base246 = l199;
                                                let len246 = l200;
                                                let mut result246 = _rt::Vec::with_capacity(len246);
                                                for i in 0..len246 {
                                                    let base = base246.add(i * 24);
                                                    let e246 = {
                                                        let l201 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::rpc::types::WitNode as V245;
                                                        let v245 = match l201 {
                                                            0 => {
                                                                let e245 = {
                                                                    let l202 = *base.add(8).cast::<*mut u8>();
                                                                    let l203 = *base.add(12).cast::<usize>();
                                                                    let len204 = l203;
                                                                    _rt::Vec::from_raw_parts(l202.cast(), len204, len204)
                                                                };
                                                                V245::RecordValue(e245)
                                                            }
                                                            1 => {
                                                                let e245 = {
                                                                    let l205 = *base.add(8).cast::<i32>();
                                                                    let l206 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l205 as u32,
                                                                        match l206 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l207 = *base.add(16).cast::<i32>();
                                                                                    l207
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                V245::VariantValue(e245)
                                                            }
                                                            2 => {
                                                                let e245 = {
                                                                    let l208 = *base.add(8).cast::<i32>();
                                                                    l208 as u32
                                                                };
                                                                V245::EnumValue(e245)
                                                            }
                                                            3 => {
                                                                let e245 = {
                                                                    let l209 = *base.add(8).cast::<*mut u8>();
                                                                    let l210 = *base.add(12).cast::<usize>();
                                                                    let base212 = l209;
                                                                    let len212 = l210;
                                                                    let mut result212 = _rt::Vec::with_capacity(len212);
                                                                    for i in 0..len212 {
                                                                        let base = base212.add(i * 1);
                                                                        let e212 = {
                                                                            let l211 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l211 as u8)
                                                                        };
                                                                        result212.push(e212);
                                                                    }
                                                                    _rt::cabi_dealloc(base212, len212 * 1, 1);
                                                                    result212
                                                                };
                                                                V245::FlagsValue(e245)
                                                            }
                                                            4 => {
                                                                let e245 = {
                                                                    let l213 = *base.add(8).cast::<*mut u8>();
                                                                    let l214 = *base.add(12).cast::<usize>();
                                                                    let len215 = l214;
                                                                    _rt::Vec::from_raw_parts(l213.cast(), len215, len215)
                                                                };
                                                                V245::TupleValue(e245)
                                                            }
                                                            5 => {
                                                                let e245 = {
                                                                    let l216 = *base.add(8).cast::<*mut u8>();
                                                                    let l217 = *base.add(12).cast::<usize>();
                                                                    let len218 = l217;
                                                                    _rt::Vec::from_raw_parts(l216.cast(), len218, len218)
                                                                };
                                                                V245::ListValue(e245)
                                                            }
                                                            6 => {
                                                                let e245 = {
                                                                    let l219 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l219 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l220 = *base.add(12).cast::<i32>();
                                                                                l220
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V245::OptionValue(e245)
                                                            }
                                                            7 => {
                                                                let e245 = {
                                                                    let l221 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l221 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l222 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l222 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l223 = *base.add(16).cast::<i32>();
                                                                                            l223
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l224 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l224 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l225 = *base.add(16).cast::<i32>();
                                                                                            l225
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V245::ResultValue(e245)
                                                            }
                                                            8 => {
                                                                let e245 = {
                                                                    let l226 = i32::from(*base.add(8).cast::<u8>());
                                                                    l226 as u8
                                                                };
                                                                V245::PrimU8(e245)
                                                            }
                                                            9 => {
                                                                let e245 = {
                                                                    let l227 = i32::from(*base.add(8).cast::<u16>());
                                                                    l227 as u16
                                                                };
                                                                V245::PrimU16(e245)
                                                            }
                                                            10 => {
                                                                let e245 = {
                                                                    let l228 = *base.add(8).cast::<i32>();
                                                                    l228 as u32
                                                                };
                                                                V245::PrimU32(e245)
                                                            }
                                                            11 => {
                                                                let e245 = {
                                                                    let l229 = *base.add(8).cast::<i64>();
                                                                    l229 as u64
                                                                };
                                                                V245::PrimU64(e245)
                                                            }
                                                            12 => {
                                                                let e245 = {
                                                                    let l230 = i32::from(*base.add(8).cast::<i8>());
                                                                    l230 as i8
                                                                };
                                                                V245::PrimS8(e245)
                                                            }
                                                            13 => {
                                                                let e245 = {
                                                                    let l231 = i32::from(*base.add(8).cast::<i16>());
                                                                    l231 as i16
                                                                };
                                                                V245::PrimS16(e245)
                                                            }
                                                            14 => {
                                                                let e245 = {
                                                                    let l232 = *base.add(8).cast::<i32>();
                                                                    l232
                                                                };
                                                                V245::PrimS32(e245)
                                                            }
                                                            15 => {
                                                                let e245 = {
                                                                    let l233 = *base.add(8).cast::<i64>();
                                                                    l233
                                                                };
                                                                V245::PrimS64(e245)
                                                            }
                                                            16 => {
                                                                let e245 = {
                                                                    let l234 = *base.add(8).cast::<f32>();
                                                                    l234
                                                                };
                                                                V245::PrimFloat32(e245)
                                                            }
                                                            17 => {
                                                                let e245 = {
                                                                    let l235 = *base.add(8).cast::<f64>();
                                                                    l235
                                                                };
                                                                V245::PrimFloat64(e245)
                                                            }
                                                            18 => {
                                                                let e245 = {
                                                                    let l236 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l236 as u32)
                                                                };
                                                                V245::PrimChar(e245)
                                                            }
                                                            19 => {
                                                                let e245 = {
                                                                    let l237 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l237 as u8)
                                                                };
                                                                V245::PrimBool(e245)
                                                            }
                                                            20 => {
                                                                let e245 = {
                                                                    let l238 = *base.add(8).cast::<*mut u8>();
                                                                    let l239 = *base.add(12).cast::<usize>();
                                                                    let len240 = l239;
                                                                    let bytes240 = _rt::Vec::from_raw_parts(
                                                                        l238.cast(),
                                                                        len240,
                                                                        len240,
                                                                    );
                                                                    _rt::string_lift(bytes240)
                                                                };
                                                                V245::PrimString(e245)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e245 = {
                                                                    let l241 = *base.add(8).cast::<*mut u8>();
                                                                    let l242 = *base.add(12).cast::<usize>();
                                                                    let len243 = l242;
                                                                    let bytes243 = _rt::Vec::from_raw_parts(
                                                                        l241.cast(),
                                                                        len243,
                                                                        len243,
                                                                    );
                                                                    let l244 = *base.add(16).cast::<i64>();
                                                                    (
                                                                        super::super::super::super::golem::rpc::types::Uri {
                                                                            value: _rt::string_lift(bytes243),
                                                                        },
                                                                        l244 as u64,
                                                                    )
                                                                };
                                                                V245::Handle(e245)
                                                            }
                                                        };
                                                        v245
                                                    };
                                                    result246.push(e246);
                                                }
                                                _rt::cabi_dealloc(base246, len246 * 24, 8);
                                                super::super::super::super::golem::rpc::types::WitValue {
                                                    nodes: result246,
                                                }
                                            };
                                            result247.push(e247);
                                        }
                                        _rt::cabi_dealloc(base247, len247 * 8, 4);
                                        let l248 = *base.add(40).cast::<*mut u8>();
                                        let l249 = *base.add(44).cast::<usize>();
                                        let len250 = l249;
                                        let bytes250 = _rt::Vec::from_raw_parts(
                                            l248.cast(),
                                            len250,
                                            len250,
                                        );
                                        super::super::super::super::golem::api::oplog::ExportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l192 as u64,
                                                nanoseconds: l193 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes196),
                                            request: result247,
                                            idempotency_key: _rt::string_lift(bytes250),
                                        }
                                    };
                                    V554::ExportedFunctionInvoked(e554)
                                }
                                3 => {
                                    let e554 = {
                                        let l251 = *base.add(8).cast::<i64>();
                                        let l252 = *base.add(16).cast::<i32>();
                                        let l253 = *base.add(24).cast::<*mut u8>();
                                        let l254 = *base.add(28).cast::<usize>();
                                        let base300 = l253;
                                        let len300 = l254;
                                        let mut result300 = _rt::Vec::with_capacity(len300);
                                        for i in 0..len300 {
                                            let base = base300.add(i * 24);
                                            let e300 = {
                                                let l255 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V299;
                                                let v299 = match l255 {
                                                    0 => {
                                                        let e299 = {
                                                            let l256 = *base.add(8).cast::<*mut u8>();
                                                            let l257 = *base.add(12).cast::<usize>();
                                                            let len258 = l257;
                                                            _rt::Vec::from_raw_parts(l256.cast(), len258, len258)
                                                        };
                                                        V299::RecordValue(e299)
                                                    }
                                                    1 => {
                                                        let e299 = {
                                                            let l259 = *base.add(8).cast::<i32>();
                                                            let l260 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l259 as u32,
                                                                match l260 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l261 = *base.add(16).cast::<i32>();
                                                                            l261
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V299::VariantValue(e299)
                                                    }
                                                    2 => {
                                                        let e299 = {
                                                            let l262 = *base.add(8).cast::<i32>();
                                                            l262 as u32
                                                        };
                                                        V299::EnumValue(e299)
                                                    }
                                                    3 => {
                                                        let e299 = {
                                                            let l263 = *base.add(8).cast::<*mut u8>();
                                                            let l264 = *base.add(12).cast::<usize>();
                                                            let base266 = l263;
                                                            let len266 = l264;
                                                            let mut result266 = _rt::Vec::with_capacity(len266);
                                                            for i in 0..len266 {
                                                                let base = base266.add(i * 1);
                                                                let e266 = {
                                                                    let l265 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l265 as u8)
                                                                };
                                                                result266.push(e266);
                                                            }
                                                            _rt::cabi_dealloc(base266, len266 * 1, 1);
                                                            result266
                                                        };
                                                        V299::FlagsValue(e299)
                                                    }
                                                    4 => {
                                                        let e299 = {
                                                            let l267 = *base.add(8).cast::<*mut u8>();
                                                            let l268 = *base.add(12).cast::<usize>();
                                                            let len269 = l268;
                                                            _rt::Vec::from_raw_parts(l267.cast(), len269, len269)
                                                        };
                                                        V299::TupleValue(e299)
                                                    }
                                                    5 => {
                                                        let e299 = {
                                                            let l270 = *base.add(8).cast::<*mut u8>();
                                                            let l271 = *base.add(12).cast::<usize>();
                                                            let len272 = l271;
                                                            _rt::Vec::from_raw_parts(l270.cast(), len272, len272)
                                                        };
                                                        V299::ListValue(e299)
                                                    }
                                                    6 => {
                                                        let e299 = {
                                                            let l273 = i32::from(*base.add(8).cast::<u8>());
                                                            match l273 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l274 = *base.add(12).cast::<i32>();
                                                                        l274
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V299::OptionValue(e299)
                                                    }
                                                    7 => {
                                                        let e299 = {
                                                            let l275 = i32::from(*base.add(8).cast::<u8>());
                                                            match l275 {
                                                                0 => {
                                                                    let e = {
                                                                        let l276 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l276 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l277 = *base.add(16).cast::<i32>();
                                                                                    l277
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l278 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l278 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l279 = *base.add(16).cast::<i32>();
                                                                                    l279
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V299::ResultValue(e299)
                                                    }
                                                    8 => {
                                                        let e299 = {
                                                            let l280 = i32::from(*base.add(8).cast::<u8>());
                                                            l280 as u8
                                                        };
                                                        V299::PrimU8(e299)
                                                    }
                                                    9 => {
                                                        let e299 = {
                                                            let l281 = i32::from(*base.add(8).cast::<u16>());
                                                            l281 as u16
                                                        };
                                                        V299::PrimU16(e299)
                                                    }
                                                    10 => {
                                                        let e299 = {
                                                            let l282 = *base.add(8).cast::<i32>();
                                                            l282 as u32
                                                        };
                                                        V299::PrimU32(e299)
                                                    }
                                                    11 => {
                                                        let e299 = {
                                                            let l283 = *base.add(8).cast::<i64>();
                                                            l283 as u64
                                                        };
                                                        V299::PrimU64(e299)
                                                    }
                                                    12 => {
                                                        let e299 = {
                                                            let l284 = i32::from(*base.add(8).cast::<i8>());
                                                            l284 as i8
                                                        };
                                                        V299::PrimS8(e299)
                                                    }
                                                    13 => {
                                                        let e299 = {
                                                            let l285 = i32::from(*base.add(8).cast::<i16>());
                                                            l285 as i16
                                                        };
                                                        V299::PrimS16(e299)
                                                    }
                                                    14 => {
                                                        let e299 = {
                                                            let l286 = *base.add(8).cast::<i32>();
                                                            l286
                                                        };
                                                        V299::PrimS32(e299)
                                                    }
                                                    15 => {
                                                        let e299 = {
                                                            let l287 = *base.add(8).cast::<i64>();
                                                            l287
                                                        };
                                                        V299::PrimS64(e299)
                                                    }
                                                    16 => {
                                                        let e299 = {
                                                            let l288 = *base.add(8).cast::<f32>();
                                                            l288
                                                        };
                                                        V299::PrimFloat32(e299)
                                                    }
                                                    17 => {
                                                        let e299 = {
                                                            let l289 = *base.add(8).cast::<f64>();
                                                            l289
                                                        };
                                                        V299::PrimFloat64(e299)
                                                    }
                                                    18 => {
                                                        let e299 = {
                                                            let l290 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l290 as u32)
                                                        };
                                                        V299::PrimChar(e299)
                                                    }
                                                    19 => {
                                                        let e299 = {
                                                            let l291 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l291 as u8)
                                                        };
                                                        V299::PrimBool(e299)
                                                    }
                                                    20 => {
                                                        let e299 = {
                                                            let l292 = *base.add(8).cast::<*mut u8>();
                                                            let l293 = *base.add(12).cast::<usize>();
                                                            let len294 = l293;
                                                            let bytes294 = _rt::Vec::from_raw_parts(
                                                                l292.cast(),
                                                                len294,
                                                                len294,
                                                            );
                                                            _rt::string_lift(bytes294)
                                                        };
                                                        V299::PrimString(e299)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e299 = {
                                                            let l295 = *base.add(8).cast::<*mut u8>();
                                                            let l296 = *base.add(12).cast::<usize>();
                                                            let len297 = l296;
                                                            let bytes297 = _rt::Vec::from_raw_parts(
                                                                l295.cast(),
                                                                len297,
                                                                len297,
                                                            );
                                                            let l298 = *base.add(16).cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes297),
                                                                },
                                                                l298 as u64,
                                                            )
                                                        };
                                                        V299::Handle(e299)
                                                    }
                                                };
                                                v299
                                            };
                                            result300.push(e300);
                                        }
                                        _rt::cabi_dealloc(base300, len300 * 24, 8);
                                        let l301 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::ExportedFunctionCompletedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l251 as u64,
                                                nanoseconds: l252 as u32,
                                            },
                                            response: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result300,
                                            },
                                            consumed_fuel: l301,
                                        }
                                    };
                                    V554::ExportedFunctionCompleted(e554)
                                }
                                4 => {
                                    let e554 = {
                                        let l302 = *base.add(8).cast::<i64>();
                                        let l303 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l302 as u64,
                                            nanoseconds: l303 as u32,
                                        }
                                    };
                                    V554::Suspend(e554)
                                }
                                5 => {
                                    let e554 = {
                                        let l304 = *base.add(8).cast::<i64>();
                                        let l305 = *base.add(16).cast::<i32>();
                                        let l306 = *base.add(24).cast::<*mut u8>();
                                        let l307 = *base.add(28).cast::<usize>();
                                        let len308 = l307;
                                        let bytes308 = _rt::Vec::from_raw_parts(
                                            l306.cast(),
                                            len308,
                                            len308,
                                        );
                                        super::super::super::super::golem::api::oplog::ErrorParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l304 as u64,
                                                nanoseconds: l305 as u32,
                                            },
                                            error: _rt::string_lift(bytes308),
                                        }
                                    };
                                    V554::Error(e554)
                                }
                                6 => {
                                    let e554 = {
                                        let l309 = *base.add(8).cast::<i64>();
                                        let l310 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l309 as u64,
                                            nanoseconds: l310 as u32,
                                        }
                                    };
                                    V554::NoOp(e554)
                                }
                                7 => {
                                    let e554 = {
                                        let l311 = *base.add(8).cast::<i64>();
                                        let l312 = *base.add(16).cast::<i32>();
                                        let l313 = *base.add(24).cast::<i64>();
                                        let l314 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::JumpParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l311 as u64,
                                                nanoseconds: l312 as u32,
                                            },
                                            start: l313 as u64,
                                            end: l314 as u64,
                                        }
                                    };
                                    V554::Jump(e554)
                                }
                                8 => {
                                    let e554 = {
                                        let l315 = *base.add(8).cast::<i64>();
                                        let l316 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l315 as u64,
                                            nanoseconds: l316 as u32,
                                        }
                                    };
                                    V554::Interrupted(e554)
                                }
                                9 => {
                                    let e554 = {
                                        let l317 = *base.add(8).cast::<i64>();
                                        let l318 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l317 as u64,
                                            nanoseconds: l318 as u32,
                                        }
                                    };
                                    V554::Exited(e554)
                                }
                                10 => {
                                    let e554 = {
                                        let l319 = *base.add(8).cast::<i64>();
                                        let l320 = *base.add(16).cast::<i32>();
                                        let l321 = *base.add(24).cast::<i32>();
                                        let l322 = *base.add(32).cast::<i64>();
                                        let l323 = *base.add(40).cast::<i64>();
                                        let l324 = *base.add(48).cast::<f64>();
                                        let l325 = i32::from(*base.add(56).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::ChangeRetryPolicyParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l319 as u64,
                                                nanoseconds: l320 as u32,
                                            },
                                            retry_policy: super::super::super::super::golem::api::host::RetryPolicy {
                                                max_attempts: l321 as u32,
                                                min_delay: l322 as u64,
                                                max_delay: l323 as u64,
                                                multiplier: l324,
                                                max_jitter_factor: match l325 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l326 = *base.add(64).cast::<f64>();
                                                            l326
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                        }
                                    };
                                    V554::ChangeRetryPolicy(e554)
                                }
                                11 => {
                                    let e554 = {
                                        let l327 = *base.add(8).cast::<i64>();
                                        let l328 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l327 as u64,
                                            nanoseconds: l328 as u32,
                                        }
                                    };
                                    V554::BeginAtomicRegion(e554)
                                }
                                12 => {
                                    let e554 = {
                                        let l329 = *base.add(8).cast::<i64>();
                                        let l330 = *base.add(16).cast::<i32>();
                                        let l331 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndAtomicRegionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l329 as u64,
                                                nanoseconds: l330 as u32,
                                            },
                                            begin_index: l331 as u64,
                                        }
                                    };
                                    V554::EndAtomicRegion(e554)
                                }
                                13 => {
                                    let e554 = {
                                        let l332 = *base.add(8).cast::<i64>();
                                        let l333 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l332 as u64,
                                            nanoseconds: l333 as u32,
                                        }
                                    };
                                    V554::BeginRemoteWrite(e554)
                                }
                                14 => {
                                    let e554 = {
                                        let l334 = *base.add(8).cast::<i64>();
                                        let l335 = *base.add(16).cast::<i32>();
                                        let l336 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndRemoteWriteParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l334 as u64,
                                                nanoseconds: l335 as u32,
                                            },
                                            begin_index: l336 as u64,
                                        }
                                    };
                                    V554::EndRemoteWrite(e554)
                                }
                                15 => {
                                    let e554 = {
                                        let l337 = *base.add(8).cast::<i64>();
                                        let l338 = *base.add(16).cast::<i32>();
                                        let l339 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::WorkerInvocation as V399;
                                        let v399 = match l339 {
                                            0 => {
                                                let e399 = {
                                                    let l340 = *base.add(32).cast::<*mut u8>();
                                                    let l341 = *base.add(36).cast::<usize>();
                                                    let len342 = l341;
                                                    let bytes342 = _rt::Vec::from_raw_parts(
                                                        l340.cast(),
                                                        len342,
                                                        len342,
                                                    );
                                                    let l343 = *base.add(40).cast::<*mut u8>();
                                                    let l344 = *base.add(44).cast::<usize>();
                                                    let len345 = l344;
                                                    let bytes345 = _rt::Vec::from_raw_parts(
                                                        l343.cast(),
                                                        len345,
                                                        len345,
                                                    );
                                                    let l346 = i32::from(*base.add(48).cast::<u8>());
                                                    super::super::super::super::golem::api::oplog::ExportedFunctionInvocationParameters {
                                                        idempotency_key: _rt::string_lift(bytes342),
                                                        function_name: _rt::string_lift(bytes345),
                                                        input: match l346 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l347 = *base.add(52).cast::<*mut u8>();
                                                                    let l348 = *base.add(56).cast::<usize>();
                                                                    let base397 = l347;
                                                                    let len397 = l348;
                                                                    let mut result397 = _rt::Vec::with_capacity(len397);
                                                                    for i in 0..len397 {
                                                                        let base = base397.add(i * 8);
                                                                        let e397 = {
                                                                            let l349 = *base.add(0).cast::<*mut u8>();
                                                                            let l350 = *base.add(4).cast::<usize>();
                                                                            let base396 = l349;
                                                                            let len396 = l350;
                                                                            let mut result396 = _rt::Vec::with_capacity(len396);
                                                                            for i in 0..len396 {
                                                                                let base = base396.add(i * 24);
                                                                                let e396 = {
                                                                                    let l351 = i32::from(*base.add(0).cast::<u8>());
                                                                                    use super::super::super::super::golem::rpc::types::WitNode as V395;
                                                                                    let v395 = match l351 {
                                                                                        0 => {
                                                                                            let e395 = {
                                                                                                let l352 = *base.add(8).cast::<*mut u8>();
                                                                                                let l353 = *base.add(12).cast::<usize>();
                                                                                                let len354 = l353;
                                                                                                _rt::Vec::from_raw_parts(l352.cast(), len354, len354)
                                                                                            };
                                                                                            V395::RecordValue(e395)
                                                                                        }
                                                                                        1 => {
                                                                                            let e395 = {
                                                                                                let l355 = *base.add(8).cast::<i32>();
                                                                                                let l356 = i32::from(*base.add(12).cast::<u8>());
                                                                                                (
                                                                                                    l355 as u32,
                                                                                                    match l356 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l357 = *base.add(16).cast::<i32>();
                                                                                                                l357
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                )
                                                                                            };
                                                                                            V395::VariantValue(e395)
                                                                                        }
                                                                                        2 => {
                                                                                            let e395 = {
                                                                                                let l358 = *base.add(8).cast::<i32>();
                                                                                                l358 as u32
                                                                                            };
                                                                                            V395::EnumValue(e395)
                                                                                        }
                                                                                        3 => {
                                                                                            let e395 = {
                                                                                                let l359 = *base.add(8).cast::<*mut u8>();
                                                                                                let l360 = *base.add(12).cast::<usize>();
                                                                                                let base362 = l359;
                                                                                                let len362 = l360;
                                                                                                let mut result362 = _rt::Vec::with_capacity(len362);
                                                                                                for i in 0..len362 {
                                                                                                    let base = base362.add(i * 1);
                                                                                                    let e362 = {
                                                                                                        let l361 = i32::from(*base.add(0).cast::<u8>());
                                                                                                        _rt::bool_lift(l361 as u8)
                                                                                                    };
                                                                                                    result362.push(e362);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base362, len362 * 1, 1);
                                                                                                result362
                                                                                            };
                                                                                            V395::FlagsValue(e395)
                                                                                        }
                                                                                        4 => {
                                                                                            let e395 = {
                                                                                                let l363 = *base.add(8).cast::<*mut u8>();
                                                                                                let l364 = *base.add(12).cast::<usize>();
                                                                                                let len365 = l364;
                                                                                                _rt::Vec::from_raw_parts(l363.cast(), len365, len365)
                                                                                            };
                                                                                            V395::TupleValue(e395)
                                                                                        }
                                                                                        5 => {
                                                                                            let e395 = {
                                                                                                let l366 = *base.add(8).cast::<*mut u8>();
                                                                                                let l367 = *base.add(12).cast::<usize>();
                                                                                                let len368 = l367;
                                                                                                _rt::Vec::from_raw_parts(l366.cast(), len368, len368)
                                                                                            };
                                                                                            V395::ListValue(e395)
                                                                                        }
                                                                                        6 => {
                                                                                            let e395 = {
                                                                                                let l369 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l369 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l370 = *base.add(12).cast::<i32>();
                                                                                                            l370
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V395::OptionValue(e395)
                                                                                        }
                                                                                        7 => {
                                                                                            let e395 = {
                                                                                                let l371 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l371 {
                                                                                                    0 => {
                                                                                                        let e = {
                                                                                                            let l372 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l372 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l373 = *base.add(16).cast::<i32>();
                                                                                                                        l373
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Ok(e)
                                                                                                    }
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l374 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l374 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l375 = *base.add(16).cast::<i32>();
                                                                                                                        l375
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Err(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V395::ResultValue(e395)
                                                                                        }
                                                                                        8 => {
                                                                                            let e395 = {
                                                                                                let l376 = i32::from(*base.add(8).cast::<u8>());
                                                                                                l376 as u8
                                                                                            };
                                                                                            V395::PrimU8(e395)
                                                                                        }
                                                                                        9 => {
                                                                                            let e395 = {
                                                                                                let l377 = i32::from(*base.add(8).cast::<u16>());
                                                                                                l377 as u16
                                                                                            };
                                                                                            V395::PrimU16(e395)
                                                                                        }
                                                                                        10 => {
                                                                                            let e395 = {
                                                                                                let l378 = *base.add(8).cast::<i32>();
                                                                                                l378 as u32
                                                                                            };
                                                                                            V395::PrimU32(e395)
                                                                                        }
                                                                                        11 => {
                                                                                            let e395 = {
                                                                                                let l379 = *base.add(8).cast::<i64>();
                                                                                                l379 as u64
                                                                                            };
                                                                                            V395::PrimU64(e395)
                                                                                        }
                                                                                        12 => {
                                                                                            let e395 = {
                                                                                                let l380 = i32::from(*base.add(8).cast::<i8>());
                                                                                                l380 as i8
                                                                                            };
                                                                                            V395::PrimS8(e395)
                                                                                        }
                                                                                        13 => {
                                                                                            let e395 = {
                                                                                                let l381 = i32::from(*base.add(8).cast::<i16>());
                                                                                                l381 as i16
                                                                                            };
                                                                                            V395::PrimS16(e395)
                                                                                        }
                                                                                        14 => {
                                                                                            let e395 = {
                                                                                                let l382 = *base.add(8).cast::<i32>();
                                                                                                l382
                                                                                            };
                                                                                            V395::PrimS32(e395)
                                                                                        }
                                                                                        15 => {
                                                                                            let e395 = {
                                                                                                let l383 = *base.add(8).cast::<i64>();
                                                                                                l383
                                                                                            };
                                                                                            V395::PrimS64(e395)
                                                                                        }
                                                                                        16 => {
                                                                                            let e395 = {
                                                                                                let l384 = *base.add(8).cast::<f32>();
                                                                                                l384
                                                                                            };
                                                                                            V395::PrimFloat32(e395)
                                                                                        }
                                                                                        17 => {
                                                                                            let e395 = {
                                                                                                let l385 = *base.add(8).cast::<f64>();
                                                                                                l385
                                                                                            };
                                                                                            V395::PrimFloat64(e395)
                                                                                        }
                                                                                        18 => {
                                                                                            let e395 = {
                                                                                                let l386 = *base.add(8).cast::<i32>();
                                                                                                _rt::char_lift(l386 as u32)
                                                                                            };
                                                                                            V395::PrimChar(e395)
                                                                                        }
                                                                                        19 => {
                                                                                            let e395 = {
                                                                                                let l387 = i32::from(*base.add(8).cast::<u8>());
                                                                                                _rt::bool_lift(l387 as u8)
                                                                                            };
                                                                                            V395::PrimBool(e395)
                                                                                        }
                                                                                        20 => {
                                                                                            let e395 = {
                                                                                                let l388 = *base.add(8).cast::<*mut u8>();
                                                                                                let l389 = *base.add(12).cast::<usize>();
                                                                                                let len390 = l389;
                                                                                                let bytes390 = _rt::Vec::from_raw_parts(
                                                                                                    l388.cast(),
                                                                                                    len390,
                                                                                                    len390,
                                                                                                );
                                                                                                _rt::string_lift(bytes390)
                                                                                            };
                                                                                            V395::PrimString(e395)
                                                                                        }
                                                                                        n => {
                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                            let e395 = {
                                                                                                let l391 = *base.add(8).cast::<*mut u8>();
                                                                                                let l392 = *base.add(12).cast::<usize>();
                                                                                                let len393 = l392;
                                                                                                let bytes393 = _rt::Vec::from_raw_parts(
                                                                                                    l391.cast(),
                                                                                                    len393,
                                                                                                    len393,
                                                                                                );
                                                                                                let l394 = *base.add(16).cast::<i64>();
                                                                                                (
                                                                                                    super::super::super::super::golem::rpc::types::Uri {
                                                                                                        value: _rt::string_lift(bytes393),
                                                                                                    },
                                                                                                    l394 as u64,
                                                                                                )
                                                                                            };
                                                                                            V395::Handle(e395)
                                                                                        }
                                                                                    };
                                                                                    v395
                                                                                };
                                                                                result396.push(e396);
                                                                            }
                                                                            _rt::cabi_dealloc(base396, len396 * 24, 8);
                                                                            super::super::super::super::golem::rpc::types::WitValue {
                                                                                nodes: result396,
                                                                            }
                                                                        };
                                                                        result397.push(e397);
                                                                    }
                                                                    _rt::cabi_dealloc(base397, len397 * 8, 4);
                                                                    result397
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V399::ExportedFunction(e399)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e399 = {
                                                    let l398 = *base.add(32).cast::<i64>();
                                                    l398 as u64
                                                };
                                                V399::ManualUpdate(e399)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingWorkerInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l337 as u64,
                                                nanoseconds: l338 as u32,
                                            },
                                            invocation: v399,
                                        }
                                    };
                                    V554::PendingWorkerInvocation(e554)
                                }
                                16 => {
                                    let e554 = {
                                        let l400 = *base.add(8).cast::<i64>();
                                        let l401 = *base.add(16).cast::<i32>();
                                        let l402 = *base.add(24).cast::<i64>();
                                        let l403 = i32::from(*base.add(32).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::UpdateDescription as V407;
                                        let v407 = match l403 {
                                            0 => V407::AutoUpdate,
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e407 = {
                                                    let l404 = *base.add(36).cast::<*mut u8>();
                                                    let l405 = *base.add(40).cast::<usize>();
                                                    let len406 = l405;
                                                    _rt::Vec::from_raw_parts(l404.cast(), len406, len406)
                                                };
                                                V407::SnapshotBased(e407)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l400 as u64,
                                                nanoseconds: l401 as u32,
                                            },
                                            target_version: l402 as u64,
                                            update_description: v407,
                                        }
                                    };
                                    V554::PendingUpdate(e554)
                                }
                                17 => {
                                    let e554 = {
                                        let l408 = *base.add(8).cast::<i64>();
                                        let l409 = *base.add(16).cast::<i32>();
                                        let l410 = *base.add(24).cast::<i64>();
                                        let l411 = *base.add(32).cast::<i64>();
                                        let l412 = *base.add(40).cast::<*mut u8>();
                                        let l413 = *base.add(44).cast::<usize>();
                                        let base431 = l412;
                                        let len431 = l413;
                                        let mut result431 = _rt::Vec::with_capacity(len431);
                                        for i in 0..len431 {
                                            let base = base431.add(i * 40);
                                            let e431 = {
                                                let l414 = *base.add(0).cast::<i64>();
                                                let l415 = *base.add(8).cast::<i64>();
                                                let l416 = *base.add(16).cast::<*mut u8>();
                                                let l417 = *base.add(20).cast::<usize>();
                                                let len418 = l417;
                                                let bytes418 = _rt::Vec::from_raw_parts(
                                                    l416.cast(),
                                                    len418,
                                                    len418,
                                                );
                                                let l419 = *base.add(24).cast::<*mut u8>();
                                                let l420 = *base.add(28).cast::<usize>();
                                                let len421 = l420;
                                                let bytes421 = _rt::Vec::from_raw_parts(
                                                    l419.cast(),
                                                    len421,
                                                    len421,
                                                );
                                                let l422 = *base.add(32).cast::<*mut u8>();
                                                let l423 = *base.add(36).cast::<usize>();
                                                let base430 = l422;
                                                let len430 = l423;
                                                let mut result430 = _rt::Vec::with_capacity(len430);
                                                for i in 0..len430 {
                                                    let base = base430.add(i * 16);
                                                    let e430 = {
                                                        let l424 = *base.add(0).cast::<*mut u8>();
                                                        let l425 = *base.add(4).cast::<usize>();
                                                        let len426 = l425;
                                                        let bytes426 = _rt::Vec::from_raw_parts(
                                                            l424.cast(),
                                                            len426,
                                                            len426,
                                                        );
                                                        let l427 = *base.add(8).cast::<*mut u8>();
                                                        let l428 = *base.add(12).cast::<usize>();
                                                        let len429 = l428;
                                                        let bytes429 = _rt::Vec::from_raw_parts(
                                                            l427.cast(),
                                                            len429,
                                                            len429,
                                                        );
                                                        (_rt::string_lift(bytes426), _rt::string_lift(bytes429))
                                                    };
                                                    result430.push(e430);
                                                }
                                                _rt::cabi_dealloc(base430, len430 * 16, 4);
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    installation_id: super::super::super::super::golem::api::host::Uuid {
                                                        high_bits: l414 as u64,
                                                        low_bits: l415 as u64,
                                                    },
                                                    name: _rt::string_lift(bytes418),
                                                    version: _rt::string_lift(bytes421),
                                                    parameters: result430,
                                                }
                                            };
                                            result431.push(e431);
                                        }
                                        _rt::cabi_dealloc(base431, len431 * 40, 8);
                                        super::super::super::super::golem::api::oplog::SuccessfulUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l408 as u64,
                                                nanoseconds: l409 as u32,
                                            },
                                            target_version: l410 as u64,
                                            new_component_size: l411 as u64,
                                            new_active_plugins: result431,
                                        }
                                    };
                                    V554::SuccessfulUpdate(e554)
                                }
                                18 => {
                                    let e554 = {
                                        let l432 = *base.add(8).cast::<i64>();
                                        let l433 = *base.add(16).cast::<i32>();
                                        let l434 = *base.add(24).cast::<i64>();
                                        let l435 = i32::from(*base.add(32).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::FailedUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l432 as u64,
                                                nanoseconds: l433 as u32,
                                            },
                                            target_version: l434 as u64,
                                            details: match l435 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l436 = *base.add(36).cast::<*mut u8>();
                                                        let l437 = *base.add(40).cast::<usize>();
                                                        let len438 = l437;
                                                        let bytes438 = _rt::Vec::from_raw_parts(
                                                            l436.cast(),
                                                            len438,
                                                            len438,
                                                        );
                                                        _rt::string_lift(bytes438)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V554::FailedUpdate(e554)
                                }
                                19 => {
                                    let e554 = {
                                        let l439 = *base.add(8).cast::<i64>();
                                        let l440 = *base.add(16).cast::<i32>();
                                        let l441 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::GrowMemoryParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l439 as u64,
                                                nanoseconds: l440 as u32,
                                            },
                                            delta: l441 as u64,
                                        }
                                    };
                                    V554::GrowMemory(e554)
                                }
                                20 => {
                                    let e554 = {
                                        let l442 = *base.add(8).cast::<i64>();
                                        let l443 = *base.add(16).cast::<i32>();
                                        let l444 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::CreateResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l442 as u64,
                                                nanoseconds: l443 as u32,
                                            },
                                            resource_id: l444 as u64,
                                        }
                                    };
                                    V554::CreateResource(e554)
                                }
                                21 => {
                                    let e554 = {
                                        let l445 = *base.add(8).cast::<i64>();
                                        let l446 = *base.add(16).cast::<i32>();
                                        let l447 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::DropResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l445 as u64,
                                                nanoseconds: l446 as u32,
                                            },
                                            resource_id: l447 as u64,
                                        }
                                    };
                                    V554::DropResource(e554)
                                }
                                22 => {
                                    let e554 = {
                                        let l448 = *base.add(8).cast::<i64>();
                                        let l449 = *base.add(16).cast::<i32>();
                                        let l450 = *base.add(24).cast::<i64>();
                                        let l451 = *base.add(32).cast::<*mut u8>();
                                        let l452 = *base.add(36).cast::<usize>();
                                        let len453 = l452;
                                        let bytes453 = _rt::Vec::from_raw_parts(
                                            l451.cast(),
                                            len453,
                                            len453,
                                        );
                                        let l454 = *base.add(40).cast::<*mut u8>();
                                        let l455 = *base.add(44).cast::<usize>();
                                        let base504 = l454;
                                        let len504 = l455;
                                        let mut result504 = _rt::Vec::with_capacity(len504);
                                        for i in 0..len504 {
                                            let base = base504.add(i * 8);
                                            let e504 = {
                                                let l456 = *base.add(0).cast::<*mut u8>();
                                                let l457 = *base.add(4).cast::<usize>();
                                                let base503 = l456;
                                                let len503 = l457;
                                                let mut result503 = _rt::Vec::with_capacity(len503);
                                                for i in 0..len503 {
                                                    let base = base503.add(i * 24);
                                                    let e503 = {
                                                        let l458 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::rpc::types::WitNode as V502;
                                                        let v502 = match l458 {
                                                            0 => {
                                                                let e502 = {
                                                                    let l459 = *base.add(8).cast::<*mut u8>();
                                                                    let l460 = *base.add(12).cast::<usize>();
                                                                    let len461 = l460;
                                                                    _rt::Vec::from_raw_parts(l459.cast(), len461, len461)
                                                                };
                                                                V502::RecordValue(e502)
                                                            }
                                                            1 => {
                                                                let e502 = {
                                                                    let l462 = *base.add(8).cast::<i32>();
                                                                    let l463 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l462 as u32,
                                                                        match l463 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l464 = *base.add(16).cast::<i32>();
                                                                                    l464
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                V502::VariantValue(e502)
                                                            }
                                                            2 => {
                                                                let e502 = {
                                                                    let l465 = *base.add(8).cast::<i32>();
                                                                    l465 as u32
                                                                };
                                                                V502::EnumValue(e502)
                                                            }
                                                            3 => {
                                                                let e502 = {
                                                                    let l466 = *base.add(8).cast::<*mut u8>();
                                                                    let l467 = *base.add(12).cast::<usize>();
                                                                    let base469 = l466;
                                                                    let len469 = l467;
                                                                    let mut result469 = _rt::Vec::with_capacity(len469);
                                                                    for i in 0..len469 {
                                                                        let base = base469.add(i * 1);
                                                                        let e469 = {
                                                                            let l468 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l468 as u8)
                                                                        };
                                                                        result469.push(e469);
                                                                    }
                                                                    _rt::cabi_dealloc(base469, len469 * 1, 1);
                                                                    result469
                                                                };
                                                                V502::FlagsValue(e502)
                                                            }
                                                            4 => {
                                                                let e502 = {
                                                                    let l470 = *base.add(8).cast::<*mut u8>();
                                                                    let l471 = *base.add(12).cast::<usize>();
                                                                    let len472 = l471;
                                                                    _rt::Vec::from_raw_parts(l470.cast(), len472, len472)
                                                                };
                                                                V502::TupleValue(e502)
                                                            }
                                                            5 => {
                                                                let e502 = {
                                                                    let l473 = *base.add(8).cast::<*mut u8>();
                                                                    let l474 = *base.add(12).cast::<usize>();
                                                                    let len475 = l474;
                                                                    _rt::Vec::from_raw_parts(l473.cast(), len475, len475)
                                                                };
                                                                V502::ListValue(e502)
                                                            }
                                                            6 => {
                                                                let e502 = {
                                                                    let l476 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l476 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l477 = *base.add(12).cast::<i32>();
                                                                                l477
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V502::OptionValue(e502)
                                                            }
                                                            7 => {
                                                                let e502 = {
                                                                    let l478 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l478 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l479 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l479 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l480 = *base.add(16).cast::<i32>();
                                                                                            l480
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l481 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l481 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l482 = *base.add(16).cast::<i32>();
                                                                                            l482
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V502::ResultValue(e502)
                                                            }
                                                            8 => {
                                                                let e502 = {
                                                                    let l483 = i32::from(*base.add(8).cast::<u8>());
                                                                    l483 as u8
                                                                };
                                                                V502::PrimU8(e502)
                                                            }
                                                            9 => {
                                                                let e502 = {
                                                                    let l484 = i32::from(*base.add(8).cast::<u16>());
                                                                    l484 as u16
                                                                };
                                                                V502::PrimU16(e502)
                                                            }
                                                            10 => {
                                                                let e502 = {
                                                                    let l485 = *base.add(8).cast::<i32>();
                                                                    l485 as u32
                                                                };
                                                                V502::PrimU32(e502)
                                                            }
                                                            11 => {
                                                                let e502 = {
                                                                    let l486 = *base.add(8).cast::<i64>();
                                                                    l486 as u64
                                                                };
                                                                V502::PrimU64(e502)
                                                            }
                                                            12 => {
                                                                let e502 = {
                                                                    let l487 = i32::from(*base.add(8).cast::<i8>());
                                                                    l487 as i8
                                                                };
                                                                V502::PrimS8(e502)
                                                            }
                                                            13 => {
                                                                let e502 = {
                                                                    let l488 = i32::from(*base.add(8).cast::<i16>());
                                                                    l488 as i16
                                                                };
                                                                V502::PrimS16(e502)
                                                            }
                                                            14 => {
                                                                let e502 = {
                                                                    let l489 = *base.add(8).cast::<i32>();
                                                                    l489
                                                                };
                                                                V502::PrimS32(e502)
                                                            }
                                                            15 => {
                                                                let e502 = {
                                                                    let l490 = *base.add(8).cast::<i64>();
                                                                    l490
                                                                };
                                                                V502::PrimS64(e502)
                                                            }
                                                            16 => {
                                                                let e502 = {
                                                                    let l491 = *base.add(8).cast::<f32>();
                                                                    l491
                                                                };
                                                                V502::PrimFloat32(e502)
                                                            }
                                                            17 => {
                                                                let e502 = {
                                                                    let l492 = *base.add(8).cast::<f64>();
                                                                    l492
                                                                };
                                                                V502::PrimFloat64(e502)
                                                            }
                                                            18 => {
                                                                let e502 = {
                                                                    let l493 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l493 as u32)
                                                                };
                                                                V502::PrimChar(e502)
                                                            }
                                                            19 => {
                                                                let e502 = {
                                                                    let l494 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l494 as u8)
                                                                };
                                                                V502::PrimBool(e502)
                                                            }
                                                            20 => {
                                                                let e502 = {
                                                                    let l495 = *base.add(8).cast::<*mut u8>();
                                                                    let l496 = *base.add(12).cast::<usize>();
                                                                    let len497 = l496;
                                                                    let bytes497 = _rt::Vec::from_raw_parts(
                                                                        l495.cast(),
                                                                        len497,
                                                                        len497,
                                                                    );
                                                                    _rt::string_lift(bytes497)
                                                                };
                                                                V502::PrimString(e502)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e502 = {
                                                                    let l498 = *base.add(8).cast::<*mut u8>();
                                                                    let l499 = *base.add(12).cast::<usize>();
                                                                    let len500 = l499;
                                                                    let bytes500 = _rt::Vec::from_raw_parts(
                                                                        l498.cast(),
                                                                        len500,
                                                                        len500,
                                                                    );
                                                                    let l501 = *base.add(16).cast::<i64>();
                                                                    (
                                                                        super::super::super::super::golem::rpc::types::Uri {
                                                                            value: _rt::string_lift(bytes500),
                                                                        },
                                                                        l501 as u64,
                                                                    )
                                                                };
                                                                V502::Handle(e502)
                                                            }
                                                        };
                                                        v502
                                                    };
                                                    result503.push(e503);
                                                }
                                                _rt::cabi_dealloc(base503, len503 * 24, 8);
                                                super::super::super::super::golem::rpc::types::WitValue {
                                                    nodes: result503,
                                                }
                                            };
                                            result504.push(e504);
                                        }
                                        _rt::cabi_dealloc(base504, len504 * 8, 4);
                                        super::super::super::super::golem::api::oplog::DescribeResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l448 as u64,
                                                nanoseconds: l449 as u32,
                                            },
                                            resource_id: l450 as u64,
                                            resource_name: _rt::string_lift(bytes453),
                                            resource_params: result504,
                                        }
                                    };
                                    V554::DescribeResource(e554)
                                }
                                23 => {
                                    let e554 = {
                                        let l505 = *base.add(8).cast::<i64>();
                                        let l506 = *base.add(16).cast::<i32>();
                                        let l507 = i32::from(*base.add(24).cast::<u8>());
                                        let l508 = *base.add(28).cast::<*mut u8>();
                                        let l509 = *base.add(32).cast::<usize>();
                                        let len510 = l509;
                                        let bytes510 = _rt::Vec::from_raw_parts(
                                            l508.cast(),
                                            len510,
                                            len510,
                                        );
                                        let l511 = *base.add(36).cast::<*mut u8>();
                                        let l512 = *base.add(40).cast::<usize>();
                                        let len513 = l512;
                                        let bytes513 = _rt::Vec::from_raw_parts(
                                            l511.cast(),
                                            len513,
                                            len513,
                                        );
                                        super::super::super::super::golem::api::oplog::LogParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l505 as u64,
                                                nanoseconds: l506 as u32,
                                            },
                                            level: super::super::super::super::golem::api::oplog::LogLevel::_lift(
                                                l507 as u8,
                                            ),
                                            context: _rt::string_lift(bytes510),
                                            message: _rt::string_lift(bytes513),
                                        }
                                    };
                                    V554::Log(e554)
                                }
                                24 => {
                                    let e554 = {
                                        let l514 = *base.add(8).cast::<i64>();
                                        let l515 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l514 as u64,
                                            nanoseconds: l515 as u32,
                                        }
                                    };
                                    V554::Restart(e554)
                                }
                                25 => {
                                    let e554 = {
                                        let l516 = *base.add(8).cast::<i64>();
                                        let l517 = *base.add(16).cast::<i32>();
                                        let l518 = *base.add(24).cast::<i64>();
                                        let l519 = *base.add(32).cast::<i64>();
                                        let l520 = *base.add(40).cast::<*mut u8>();
                                        let l521 = *base.add(44).cast::<usize>();
                                        let len522 = l521;
                                        let bytes522 = _rt::Vec::from_raw_parts(
                                            l520.cast(),
                                            len522,
                                            len522,
                                        );
                                        let l523 = *base.add(48).cast::<*mut u8>();
                                        let l524 = *base.add(52).cast::<usize>();
                                        let len525 = l524;
                                        let bytes525 = _rt::Vec::from_raw_parts(
                                            l523.cast(),
                                            len525,
                                            len525,
                                        );
                                        let l526 = *base.add(56).cast::<*mut u8>();
                                        let l527 = *base.add(60).cast::<usize>();
                                        let base534 = l526;
                                        let len534 = l527;
                                        let mut result534 = _rt::Vec::with_capacity(len534);
                                        for i in 0..len534 {
                                            let base = base534.add(i * 16);
                                            let e534 = {
                                                let l528 = *base.add(0).cast::<*mut u8>();
                                                let l529 = *base.add(4).cast::<usize>();
                                                let len530 = l529;
                                                let bytes530 = _rt::Vec::from_raw_parts(
                                                    l528.cast(),
                                                    len530,
                                                    len530,
                                                );
                                                let l531 = *base.add(8).cast::<*mut u8>();
                                                let l532 = *base.add(12).cast::<usize>();
                                                let len533 = l532;
                                                let bytes533 = _rt::Vec::from_raw_parts(
                                                    l531.cast(),
                                                    len533,
                                                    len533,
                                                );
                                                (_rt::string_lift(bytes530), _rt::string_lift(bytes533))
                                            };
                                            result534.push(e534);
                                        }
                                        _rt::cabi_dealloc(base534, len534 * 16, 4);
                                        super::super::super::super::golem::api::oplog::ActivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l516 as u64,
                                                nanoseconds: l517 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                installation_id: super::super::super::super::golem::api::host::Uuid {
                                                    high_bits: l518 as u64,
                                                    low_bits: l519 as u64,
                                                },
                                                name: _rt::string_lift(bytes522),
                                                version: _rt::string_lift(bytes525),
                                                parameters: result534,
                                            },
                                        }
                                    };
                                    V554::ActivatePlugin(e554)
                                }
                                n => {
                                    debug_assert_eq!(n, 26, "invalid enum discriminant");
                                    let e554 = {
                                        let l535 = *base.add(8).cast::<i64>();
                                        let l536 = *base.add(16).cast::<i32>();
                                        let l537 = *base.add(24).cast::<i64>();
                                        let l538 = *base.add(32).cast::<i64>();
                                        let l539 = *base.add(40).cast::<*mut u8>();
                                        let l540 = *base.add(44).cast::<usize>();
                                        let len541 = l540;
                                        let bytes541 = _rt::Vec::from_raw_parts(
                                            l539.cast(),
                                            len541,
                                            len541,
                                        );
                                        let l542 = *base.add(48).cast::<*mut u8>();
                                        let l543 = *base.add(52).cast::<usize>();
                                        let len544 = l543;
                                        let bytes544 = _rt::Vec::from_raw_parts(
                                            l542.cast(),
                                            len544,
                                            len544,
                                        );
                                        let l545 = *base.add(56).cast::<*mut u8>();
                                        let l546 = *base.add(60).cast::<usize>();
                                        let base553 = l545;
                                        let len553 = l546;
                                        let mut result553 = _rt::Vec::with_capacity(len553);
                                        for i in 0..len553 {
                                            let base = base553.add(i * 16);
                                            let e553 = {
                                                let l547 = *base.add(0).cast::<*mut u8>();
                                                let l548 = *base.add(4).cast::<usize>();
                                                let len549 = l548;
                                                let bytes549 = _rt::Vec::from_raw_parts(
                                                    l547.cast(),
                                                    len549,
                                                    len549,
                                                );
                                                let l550 = *base.add(8).cast::<*mut u8>();
                                                let l551 = *base.add(12).cast::<usize>();
                                                let len552 = l551;
                                                let bytes552 = _rt::Vec::from_raw_parts(
                                                    l550.cast(),
                                                    len552,
                                                    len552,
                                                );
                                                (_rt::string_lift(bytes549), _rt::string_lift(bytes552))
                                            };
                                            result553.push(e553);
                                        }
                                        _rt::cabi_dealloc(base553, len553 * 16, 4);
                                        super::super::super::super::golem::api::oplog::DeactivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l535 as u64,
                                                nanoseconds: l536 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                installation_id: super::super::super::super::golem::api::host::Uuid {
                                                    high_bits: l537 as u64,
                                                    low_bits: l538 as u64,
                                                },
                                                name: _rt::string_lift(bytes541),
                                                version: _rt::string_lift(bytes544),
                                                parameters: result553,
                                            },
                                        }
                                    };
                                    V554::DeactivatePlugin(e554)
                                }
                            };
                            v554
                        };
                        result555.push(e555);
                    }
                    _rt::cabi_dealloc(base555, len555 * 136, 8);
                    let result556 = T::process(
                        ProcessorBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::golem::api::host::WorkerId {
                            component_id: super::super::super::super::golem::api::host::ComponentId {
                                uuid: super::super::super::super::golem::api::host::Uuid {
                                    high_bits: l1 as u64,
                                    low_bits: l2 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        super::super::super::super::golem::api::host::WorkerMetadata {
                            worker_id: super::super::super::super::golem::api::host::WorkerId {
                                component_id: super::super::super::super::golem::api::host::ComponentId {
                                    uuid: super::super::super::super::golem::api::host::Uuid {
                                        high_bits: l6 as u64,
                                        low_bits: l7 as u64,
                                    },
                                },
                                worker_name: _rt::string_lift(bytes10),
                            },
                            args: result16,
                            env: result25,
                            status: super::super::super::super::golem::api::host::WorkerStatus::_lift(
                                l26 as u8,
                            ),
                            component_version: l27 as u64,
                            retry_count: l28 as u64,
                        },
                        l29 as u64,
                        result555,
                    );
                    _rt::cabi_dealloc(arg0, 112, 8);
                    let ptr557 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result556 {
                        Ok(_) => {
                            *ptr557.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr557.add(0).cast::<u8>() = (1i32) as u8;
                            let vec558 = (e.into_bytes()).into_boxed_slice();
                            let ptr558 = vec558.as_ptr().cast::<u8>();
                            let len558 = vec558.len();
                            ::core::mem::forget(vec558);
                            *ptr557.add(8).cast::<usize>() = len558;
                            *ptr557.add(4).cast::<*mut u8>() = ptr558.cast_mut();
                        }
                    };
                    ptr557
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_processor_process<T: GuestProcessor>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    type Processor: GuestProcessor;
                }
                pub trait GuestProcessor: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:api/oplog-processor@1.1.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]processor"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:api/oplog-processor@1.1.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]processor"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Initializes an oplog processor for a given component where the plugin was installed to.
                    /// The `account-info` parameters contains details of the account the installation belongs to.
                    /// The `component-id` parameter contains the identifier of the component the plugin was installed to.
                    /// The `config` parameter contains the configuration parameters for the plugin, as specified in the plugin installation
                    /// for the component.
                    fn new(
                        account_info: AccountInfo,
                        component_id: ComponentId,
                        config: _rt::Vec<(_rt::String, _rt::String)>,
                    ) -> Self;
                    /// Called when one of the workers the plugin is activated on has written new entries to its oplog.
                    /// The `worker-id` parameter identifies the worker.
                    /// The `metadata` parameter contains the latest metadata of the worker.
                    /// The `first-entry-index` parameter contains the index of the first entry in the list of `entries`.
                    /// The `entries` parameteter always contains at least one element.
                    fn process(
                        &self,
                        worker_id: WorkerId,
                        metadata: WorkerMetadata,
                        first_entry_index: OplogIndex,
                        entries: _rt::Vec<OplogEntry>,
                    ) -> Result<(), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_api_oplog_processor_1_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:api/oplog-processor@1.1.0#[constructor]processor"] unsafe
                        extern "C" fn export_constructor_processor(arg0 : * mut u8, arg1
                        : usize, arg2 : i64, arg3 : i64, arg4 : * mut u8, arg5 : usize,)
                        -> i32 { $($path_to_types)*::
                        _export_constructor_processor_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Processor > (arg0, arg1, arg2, arg3, arg4, arg5) }
                        #[export_name =
                        "golem:api/oplog-processor@1.1.0#[method]processor.process"]
                        unsafe extern "C" fn export_method_processor_process(arg0 : * mut
                        u8,) -> * mut u8 { $($path_to_types)*::
                        _export_method_processor_process_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Processor > (arg0) } #[export_name
                        =
                        "cabi_post_golem:api/oplog-processor@1.1.0#[method]processor.process"]
                        unsafe extern "C" fn _post_return_method_processor_process(arg0 :
                        * mut u8,) { $($path_to_types)*::
                        __post_return_method_processor_process::<<$ty as
                        $($path_to_types)*:: Guest >::Processor > (arg0) } const _ : () =
                        { #[doc(hidden)] #[export_name =
                        "golem:api/oplog-processor@1.1.0#[dtor]processor"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: Processor::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Processor > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_api_oplog_processor_1_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
        }
        pub mod component {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_invoked_functions_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_invoked_functions();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * 8,
                        4,
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 8);
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_invoked_functions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                }
                pub trait Guest {
                    fn get_invoked_functions() -> _rt::Vec<_rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_component_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:component/api#get-invoked-functions"] unsafe extern "C" fn
                        export_get_invoked_functions() -> * mut u8 { $($path_to_types)*::
                        _export_get_invoked_functions_cabi::<$ty > () } #[export_name =
                        "cabi_post_golem:component/api#get-invoked-functions"] unsafe
                        extern "C" fn _post_return_get_invoked_functions(arg0 : * mut
                        u8,) { $($path_to_types)*::
                        __post_return_get_invoked_functions::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_component_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::boxed::Box;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_oplog_processor_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::component::api::__export_golem_component_api_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::component::api);
        $($path_to_types_root)*::
        exports::golem::api::oplog_processor::__export_golem_api_oplog_processor_1_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::api::oplog_processor);
    };
}
#[doc(inline)]
pub(crate) use __export_oplog_processor_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:component:oplog-processor:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 7359] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb98\x01A\x02\x01A\x1e\
\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\
\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-\
clock@0.2.0\x05\0\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\
\0\x7f\x04\0\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16\
[method]pollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04\
poll\x01\x06\x03\0\x12wasi:io/poll@0.2.0\x05\x01\x02\x03\0\x01\x08pollable\x01B*\
\x02\x03\x02\x01\x02\x04\0\x08pollable\x03\0\0\x01z\x04\0\x0anode-index\x03\0\x02\
\x01r\x01\x05values\x04\0\x03uri\x03\0\x04\x01p\x03\x01k\x03\x01o\x02y\x07\x01p\x7f\
\x01j\x01\x07\x01\x07\x01o\x02\x05w\x01q\x16\x0crecord-value\x01\x06\0\x0dvarian\
t-value\x01\x08\0\x0aenum-value\x01y\0\x0bflags-value\x01\x09\0\x0btuple-value\x01\
\x06\0\x0alist-value\x01\x06\0\x0coption-value\x01\x07\0\x0cresult-value\x01\x0a\
\0\x07prim-u8\x01}\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07\
prim-s8\x01~\0\x08prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-\
float32\x01v\0\x0cprim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\
\x0bprim-string\x01s\0\x06handle\x01\x0b\0\x04\0\x08wit-node\x03\0\x0c\x01p\x0d\x01\
r\x01\x05nodes\x0e\x04\0\x09wit-value\x03\0\x0f\x01q\x04\x0eprotocol-error\x01s\0\
\x06denied\x01s\0\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09r\
pc-error\x03\0\x11\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\
\x01i\x13\x01@\x01\x08location\x05\0\x15\x04\0\x15[constructor]wasm-rpc\x01\x16\x01\
h\x13\x01p\x10\x01j\x01\x10\x01\x12\x01@\x03\x04self\x17\x0dfunction-names\x0ffu\
nction-params\x18\0\x19\x04\0![method]wasm-rpc.invoke-and-await\x01\x1a\x01j\0\x01\
\x12\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-params\x18\0\x1b\x04\0\x17\
[method]wasm-rpc.invoke\x01\x1c\x01i\x14\x01@\x03\x04self\x17\x0dfunction-names\x0f\
function-params\x18\0\x1d\x04\0'[method]wasm-rpc.async-invoke-and-await\x01\x1e\x01\
h\x14\x01i\x01\x01@\x01\x04self\x1f\0\x20\x04\0&[method]future-invoke-result.sub\
scribe\x01!\x01k\x19\x01@\x01\x04self\x1f\0\"\x04\0\x20[method]future-invoke-res\
ult.get\x01#\x03\0\x15golem:rpc/types@0.1.0\x05\x03\x01B\x0f\x02\x03\x02\x01\x02\
\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01w\x04\0\x08duratio\
n\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\0\x0aresolution\x01\
\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-instant\x01\x09\x01@\
\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\0!wasi:clocks/mon\
otonic-clock@0.2.0\x05\x04\x02\x03\0\x02\x03uri\x02\x03\0\x03\x08duration\x01Bg\x02\
\x03\x02\x01\x05\x04\0\x03uri\x03\0\0\x02\x03\x02\x01\x06\x04\0\x08duration\x03\0\
\x02\x01w\x04\0\x0boplog-index\x03\0\x04\x01w\x04\0\x11component-version\x03\0\x06\
\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\x08\x01r\x01\x04uuid\x09\
\x04\0\x0ccomponent-id\x03\0\x0a\x01r\x02\x0ccomponent-id\x0b\x0bworker-names\x04\
\0\x09worker-id\x03\0\x0c\x01r\x02\x09worker-id\x0d\x09oplog-idx\x05\x04\0\x0apr\
omise-id\x03\0\x0e\x01r\x01\x05values\x04\0\x0aaccount-id\x03\0\x10\x01ku\x01r\x05\
\x0cmax-attemptsy\x09min-delay\x03\x09max-delay\x03\x0amultiplieru\x11max-jitter\
-factor\x12\x04\0\x0cretry-policy\x03\0\x13\x01q\x03\x0fpersist-nothing\0\0\x1bp\
ersist-remote-side-effects\0\0\x05smart\0\0\x04\0\x11persistence-level\x03\0\x15\
\x01m\x02\x09automatic\x0esnapshot-based\x04\0\x0bupdate-mode\x03\0\x17\x01m\x06\
\x05equal\x09not-equal\x0dgreater-equal\x07greater\x0aless-equal\x04less\x04\0\x11\
filter-comparator\x03\0\x19\x01m\x04\x05equal\x09not-equal\x04like\x08not-like\x04\
\0\x18string-filter-comparator\x03\0\x1b\x01m\x07\x07running\x04idle\x09suspende\
d\x0binterrupted\x08retrying\x06failed\x06exited\x04\0\x0dworker-status\x03\0\x1d\
\x01r\x02\x0acomparator\x1c\x05values\x04\0\x12worker-name-filter\x03\0\x1f\x01r\
\x02\x0acomparator\x1a\x05value\x1e\x04\0\x14worker-status-filter\x03\0!\x01r\x02\
\x0acomparator\x1a\x05valuew\x04\0\x15worker-version-filter\x03\0#\x01r\x02\x0ac\
omparator\x1a\x05valuew\x04\0\x18worker-created-at-filter\x03\0%\x01r\x03\x04nam\
es\x0acomparator\x1c\x05values\x04\0\x11worker-env-filter\x03\0'\x01q\x05\x04nam\
e\x01\x20\0\x06status\x01\"\0\x07version\x01$\0\x0acreated-at\x01&\0\x03env\x01(\
\0\x04\0\x16worker-property-filter\x03\0)\x01p*\x01r\x01\x07filters+\x04\0\x11wo\
rker-all-filter\x03\0,\x01p-\x01r\x01\x07filters.\x04\0\x11worker-any-filter\x03\
\0/\x01ps\x01o\x02ss\x01p2\x01r\x06\x09worker-id\x0d\x04args1\x03env3\x06status\x1e\
\x11component-versionw\x0bretry-countw\x04\0\x0fworker-metadata\x03\04\x04\0\x0b\
get-workers\x03\x01\x01k0\x01i6\x01@\x03\x0ccomponent-id\x0b\x06filter7\x07preci\
se\x7f\08\x04\0\x18[constructor]get-workers\x019\x01h6\x01p5\x01k;\x01@\x01\x04s\
elf:\0<\x04\0\x1c[method]get-workers.get-next\x01=\x01@\0\0\x0f\x04\0\x0ecreate-\
promise\x01>\x01p}\x01@\x01\x0apromise-id\x0f\0?\x04\0\x0dawait-promise\x01@\x01\
@\x02\x0apromise-id\x0f\x04data?\0\x7f\x04\0\x10complete-promise\x01A\x01@\x01\x0a\
promise-id\x0f\x01\0\x04\0\x0edelete-promise\x01B\x01@\0\0\x05\x04\0\x0fget-oplo\
g-index\x01C\x01@\x01\x09oplog-idx\x05\x01\0\x04\0\x0fset-oplog-index\x01D\x01@\x01\
\x08replicas}\x01\0\x04\0\x0coplog-commit\x01E\x04\0\x14mark-begin-operation\x01\
C\x01@\x01\x05begin\x05\x01\0\x04\0\x12mark-end-operation\x01F\x01@\0\0\x14\x04\0\
\x10get-retry-policy\x01G\x01@\x01\x10new-retry-policy\x14\x01\0\x04\0\x10set-re\
try-policy\x01H\x01@\0\0\x16\x04\0\x1bget-oplog-persistence-level\x01I\x01@\x01\x15\
new-persistence-level\x16\x01\0\x04\0\x1bset-oplog-persistence-level\x01J\x01@\0\
\0\x7f\x04\0\x14get-idempotence-mode\x01K\x01@\x01\x0aidempotent\x7f\x01\0\x04\0\
\x14set-idempotence-mode\x01L\x01@\0\0\x09\x04\0\x18generate-idempotency-key\x01\
M\x01@\x03\x09worker-id\x0d\x0etarget-version\x07\x04mode\x18\x01\0\x04\0\x0dupd\
ate-worker\x01N\x01@\0\05\x04\0\x11get-self-metadata\x01O\x01k5\x01@\x01\x09work\
er-id\x0d\0\xd0\0\x04\0\x13get-worker-metadata\x01Q\x03\0\x14golem:api/host@1.1.\
0\x05\x07\x02\x03\0\0\x08datetime\x02\x03\0\x02\x09wit-value\x02\x03\0\x04\x0aac\
count-id\x02\x03\0\x04\x11component-version\x02\x03\0\x04\x0boplog-index\x02\x03\
\0\x04\x0cretry-policy\x02\x03\0\x04\x04uuid\x02\x03\0\x04\x09worker-id\x01Be\x02\
\x03\x02\x01\x08\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\x09\x04\0\x09wit-valu\
e\x03\0\x02\x02\x03\x02\x01\x0a\x04\0\x0aaccount-id\x03\0\x04\x02\x03\x02\x01\x0b\
\x04\0\x11component-version\x03\0\x06\x02\x03\x02\x01\x0c\x04\0\x0boplog-index\x03\
\0\x08\x02\x03\x02\x01\x0d\x04\0\x0cretry-policy\x03\0\x0a\x02\x03\x02\x01\x0e\x04\
\0\x04uuid\x03\0\x0c\x02\x03\x02\x01\x0f\x04\0\x09worker-id\x03\0\x0e\x01k\x09\x01\
q\x05\x0aread-local\0\0\x0bwrite-local\0\0\x0bread-remote\0\0\x0cwrite-remote\0\0\
\x14write-remote-batched\x01\x10\0\x04\0\x15wrapped-function-type\x03\0\x11\x01o\
\x02ss\x01p\x13\x01r\x04\x0finstallation-id\x0d\x04names\x07versions\x0aparamete\
rs\x14\x04\0\x1fplugin-installation-description\x03\0\x15\x01ps\x01k\x0f\x01p\x16\
\x01r\x0a\x09timestamp\x01\x09worker-id\x0f\x11component-version\x07\x04args\x17\
\x03env\x14\x0aaccount-id\x05\x06parent\x18\x0ecomponent-sizew\x20initial-total-\
linear-memory-sizew\x16initial-active-plugins\x19\x04\0\x11create-parameters\x03\
\0\x1a\x01r\x05\x09timestamp\x01\x0dfunction-names\x07request\x03\x08response\x03\
\x15wrapped-function-type\x12\x04\0$imported-function-invoked-parameters\x03\0\x1c\
\x01p\x03\x01r\x04\x09timestamp\x01\x0dfunction-names\x07request\x1e\x0fidempote\
ncy-keys\x04\0$exported-function-invoked-parameters\x03\0\x1f\x01r\x03\x09timest\
amp\x01\x08response\x03\x0dconsumed-fuelx\x04\0&exported-function-completed-para\
meters\x03\0!\x01r\x02\x09timestamp\x01\x05errors\x04\0\x10error-parameters\x03\0\
#\x01r\x03\x09timestamp\x01\x05start\x09\x03end\x09\x04\0\x0fjump-parameters\x03\
\0%\x01r\x02\x09timestamp\x01\x0cretry-policy\x0b\x04\0\x1echange-retry-policy-p\
arameters\x03\0'\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\x1cend-atomi\
c-region-parameters\x03\0)\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\x1b\
end-remote-write-parameters\x03\0+\x01k\x1e\x01r\x03\x0fidempotency-keys\x0dfunc\
tion-names\x05input-\x04\0'exported-function-invocation-parameters\x03\0.\x01q\x02\
\x11exported-function\x01/\0\x0dmanual-update\x01\x07\0\x04\0\x11worker-invocati\
on\x03\00\x01r\x02\x09timestamp\x01\x0ainvocation1\x04\0$pending-worker-invocati\
on-parameters\x03\02\x01p}\x01q\x02\x0bauto-update\0\0\x0esnapshot-based\x014\0\x04\
\0\x12update-description\x03\05\x01r\x03\x09timestamp\x01\x0etarget-version\x07\x12\
update-description6\x04\0\x19pending-update-parameters\x03\07\x01r\x04\x09timest\
amp\x01\x0etarget-version\x07\x12new-component-sizew\x12new-active-plugins\x19\x04\
\0\x1csuccessful-update-parameters\x03\09\x01ks\x01r\x03\x09timestamp\x01\x0etar\
get-version\x07\x07details;\x04\0\x18failed-update-parameters\x03\0<\x01r\x02\x09\
timestamp\x01\x05deltaw\x04\0\x16grow-memory-parameters\x03\0>\x01w\x04\0\x12wor\
ker-resource-id\x03\0@\x01r\x02\x09timestamp\x01\x0bresource-id\xc1\0\x04\0\x1ac\
reate-resource-parameters\x03\0B\x01r\x02\x09timestamp\x01\x0bresource-id\xc1\0\x04\
\0\x18drop-resource-parameters\x03\0D\x01r\x04\x09timestamp\x01\x0bresource-id\xc1\
\0\x0dresource-names\x0fresource-params\x1e\x04\0\x1cdescribe-resource-parameter\
s\x03\0F\x01m\x08\x06stdout\x06stderr\x05trace\x05debug\x04info\x04warn\x05error\
\x08critical\x04\0\x09log-level\x03\0H\x01r\x04\x09timestamp\x01\x05level\xc9\0\x07\
contexts\x07messages\x04\0\x0elog-parameters\x03\0J\x01r\x02\x09timestamp\x01\x06\
plugin\x16\x04\0\x1aactivate-plugin-parameters\x03\0L\x01r\x02\x09timestamp\x01\x06\
plugin\x16\x04\0\x1cdeactivate-plugin-parameters\x03\0N\x01q\x1b\x06create\x01\x1b\
\0\x19imported-function-invoked\x01\x1d\0\x19exported-function-invoked\x01\x20\0\
\x1bexported-function-completed\x01\"\0\x07suspend\x01\x01\0\x05error\x01$\0\x05\
no-op\x01\x01\0\x04jump\x01&\0\x0binterrupted\x01\x01\0\x06exited\x01\x01\0\x13c\
hange-retry-policy\x01(\0\x13begin-atomic-region\x01\x01\0\x11end-atomic-region\x01\
*\0\x12begin-remote-write\x01\x01\0\x10end-remote-write\x01,\0\x19pending-worker\
-invocation\x013\0\x0epending-update\x018\0\x11successful-update\x01:\0\x0dfaile\
d-update\x01=\0\x0bgrow-memory\x01?\0\x0fcreate-resource\x01\xc3\0\0\x0ddrop-res\
ource\x01\xc5\0\0\x11describe-resource\x01\xc7\0\0\x03log\x01\xcb\0\0\x07restart\
\x01\x01\0\x0factivate-plugin\x01\xcd\0\0\x11deactivate-plugin\x01\xcf\0\0\x04\0\
\x0boplog-entry\x03\0P\x04\0\x09get-oplog\x03\x01\x04\0\x0csearch-oplog\x03\x01\x01\
iR\x01@\x02\x09worker-id\x0f\x05start\x09\0\xd4\0\x04\0\x16[constructor]get-oplo\
g\x01U\x01hR\x01p\xd1\0\x01k\xd7\0\x01@\x01\x04self\xd6\0\0\xd8\0\x04\0\x1a[meth\
od]get-oplog.get-next\x01Y\x01iS\x01@\x02\x09worker-id\x0f\x04texts\0\xda\0\x04\0\
\x19[constructor]search-oplog\x01[\x01hS\x01o\x02\x09\xd1\0\x01p\xdd\0\x01k\xde\0\
\x01@\x01\x04self\xdc\0\0\xdf\0\x04\0\x1d[method]search-oplog.get-next\x01`\x03\0\
\x15golem:api/oplog@1.1.0\x05\x10\x01B\x03\x01ps\x01@\0\0\0\x04\0\x15get-invoked\
-functions\x01\x01\x04\0\x13golem:component/api\x05\x11\x02\x03\0\x04\x0ccompone\
nt-id\x02\x03\0\x04\x0fworker-metadata\x02\x03\0\x05\x0boplog-entry\x01B\x1d\x02\
\x03\x02\x01\x08\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\x09\x04\0\x09wit-valu\
e\x03\0\x02\x02\x03\x02\x01\x0a\x04\0\x0aaccount-id\x03\0\x04\x02\x03\x02\x01\x12\
\x04\0\x0ccomponent-id\x03\0\x06\x02\x03\x02\x01\x0c\x04\0\x0boplog-index\x03\0\x08\
\x02\x03\x02\x01\x0f\x04\0\x09worker-id\x03\0\x0a\x02\x03\x02\x01\x13\x04\0\x0fw\
orker-metadata\x03\0\x0c\x02\x03\x02\x01\x14\x04\0\x0boplog-entry\x03\0\x0e\x01r\
\x01\x0aaccount-id\x05\x04\0\x0caccount-info\x03\0\x10\x04\0\x09processor\x03\x01\
\x01o\x02ss\x01p\x13\x01i\x12\x01@\x03\x0caccount-info\x11\x0ccomponent-id\x07\x06\
config\x14\0\x15\x04\0\x16[constructor]processor\x01\x16\x01h\x12\x01p\x0f\x01j\0\
\x01s\x01@\x05\x04self\x17\x09worker-id\x0b\x08metadata\x0d\x11first-entry-index\
\x09\x07entries\x18\0\x19\x04\0\x19[method]processor.process\x01\x1a\x04\0\x1fgo\
lem:api/oplog-processor@1.1.0\x05\x15\x04\0\x1fgolem:component/oplog-processor\x04\
\0\x0b\x15\x01\0\x0foplog-processor\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
