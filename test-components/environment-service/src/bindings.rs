// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod golem {
    pub mod it {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#get-environment"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_environment() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_environment();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Ok(e) => { {
                *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                let vec5 = e;
                let len5 = vec5.len() as i32;
                let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 16, 4);
                let result5 = if layout5.size() != 0
                {
                  let ptr = alloc::alloc(layout5);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout5);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec5.into_iter().enumerate() {
                  let base = result5 as i32 + (i as i32) * 16;
                  {
                    let (t2_0, t2_1, ) = e;
                    let vec3 = (t2_0.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((base + 4) as *mut i32) = len3;
                    *((base + 0) as *mut i32) = ptr3;
                    let vec4 = (t2_1.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((base + 12) as *mut i32) = len4;
                    *((base + 8) as *mut i32) = ptr4;
                  }
                }
                *((ptr1 + 8) as *mut i32) = len5;
                *((ptr1 + 4) as *mut i32) = result5 as i32;
              } },
              Err(e) => { {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let vec6 = (e.into_bytes()).into_boxed_slice();
                let ptr6 = vec6.as_ptr() as i32;
                let len6 = vec6.len() as i32;
                ::core::mem::forget(vec6);
                *((ptr1 + 8) as *mut i32) = len6;
                *((ptr1 + 4) as *mut i32) = ptr6;
              } },
            };ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#get-environment"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_environment(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l5 = *((arg0 + 4) as *const i32);
                  let l6 = *((arg0 + 8) as *const i32);
                  let base7 = l5;
                  let len7 = l6;
                  for i in 0..len7 {
                    let base = base7 + i *16;
                    {
                      let l1 = *((base + 0) as *const i32);
                      let l2 = *((base + 4) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                      let l3 = *((base + 8) as *const i32);
                      let l4 = *((base + 12) as *const i32);
                      wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                    }
                  }
                  wit_bindgen::rt::dealloc(base7, (len7 as usize) * 16, 4);
                },
                _ => {
                  let l8 = *((arg0 + 4) as *const i32);
                  let l9 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l8, (l9) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#get-arguments"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_arguments() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_arguments();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Ok(e) => { {
                *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                let vec3 = e;
                let len3 = vec3.len() as i32;
                let layout3 = alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
                let result3 = if layout3.size() != 0
                {
                  let ptr = alloc::alloc(layout3);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout3);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec3.into_iter().enumerate() {
                  let base = result3 as i32 + (i as i32) * 8;
                  {
                    let vec2 = (e.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr() as i32;
                    let len2 = vec2.len() as i32;
                    ::core::mem::forget(vec2);
                    *((base + 4) as *mut i32) = len2;
                    *((base + 0) as *mut i32) = ptr2;
                  }
                }
                *((ptr1 + 8) as *mut i32) = len3;
                *((ptr1 + 4) as *mut i32) = result3 as i32;
              } },
              Err(e) => { {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let vec4 = (e.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr1 + 8) as *mut i32) = len4;
                *((ptr1 + 4) as *mut i32) = ptr4;
              } },
            };ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#get-arguments"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_arguments(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  let base5 = l3;
                  let len5 = l4;
                  for i in 0..len5 {
                    let base = base5 + i *8;
                    {
                      let l1 = *((base + 0) as *const i32);
                      let l2 = *((base + 4) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    }
                  }
                  wit_bindgen::rt::dealloc(base5, (len5 as usize) * 8, 4);
                },
                _ => {
                  let l6 = *((arg0 + 4) as *const i32);
                  let l7 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l6, (l7) as usize, 1);
                },
              }
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn get_environment() -> Result<wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,wit_bindgen::rt::string::String,)>,wit_bindgen::rt::string::String>;
          fn get_arguments() -> Result<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>,wit_bindgen::rt::string::String>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:environment-service"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 387] = [3, 0, 19, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 45, 115, 101, 114, 118, 105, 99, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 94, 1, 65, 2, 1, 66, 9, 1, 111, 2, 115, 115, 1, 112, 0, 1, 106, 1, 1, 1, 115, 1, 64, 0, 0, 2, 4, 0, 15, 103, 101, 116, 45, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 1, 3, 1, 112, 115, 1, 106, 1, 4, 1, 115, 1, 64, 0, 0, 5, 4, 0, 13, 103, 101, 116, 45, 97, 114, 103, 117, 109, 101, 110, 116, 115, 1, 6, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 130, 1, 1, 65, 2, 1, 65, 2, 1, 66, 9, 1, 111, 2, 115, 115, 1, 112, 0, 1, 106, 1, 1, 1, 115, 1, 64, 0, 0, 2, 4, 0, 15, 103, 101, 116, 45, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 1, 3, 1, 112, 115, 1, 106, 1, 4, 1, 115, 1, 64, 0, 0, 5, 4, 0, 13, 103, 101, 116, 45, 97, 114, 103, 117, 109, 101, 110, 116, 115, 1, 6, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 4, 1, 28, 103, 111, 108, 101, 109, 58, 105, 116, 47, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 45, 115, 101, 114, 118, 105, 99, 101, 4, 0, 11, 25, 1, 0, 19, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 45, 115, 101, 114, 118, 105, 99, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
