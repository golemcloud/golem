// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod logging {
        #[allow(dead_code, clippy::all)]
        pub mod logging {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            /// A log level, describing a kind of message.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Level {
                /// Describes messages about the values of variables and the flow of
                /// control within a program.
                Trace,
                /// Describes messages likely to be of interest to someone debugging a
                /// program.
                Debug,
                /// Describes messages likely to be of interest to someone monitoring a
                /// program.
                Info,
                /// Describes messages indicating hazardous situations.
                Warn,
                /// Describes messages indicating serious errors.
                Error,
                /// Describes messages indicating fatal errors.
                Critical,
            }
            impl ::core::fmt::Debug for Level {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Level::Trace => f.debug_tuple("Level::Trace").finish(),
                        Level::Debug => f.debug_tuple("Level::Debug").finish(),
                        Level::Info => f.debug_tuple("Level::Info").finish(),
                        Level::Warn => f.debug_tuple("Level::Warn").finish(),
                        Level::Error => f.debug_tuple("Level::Error").finish(),
                        Level::Critical => f.debug_tuple("Level::Critical").finish(),
                    }
                }
            }

            impl Level {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Level {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Level::Trace,
                        1 => Level::Debug,
                        2 => Level::Info,
                        3 => Level::Warn,
                        4 => Level::Error,
                        5 => Level::Critical,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            /// Emit a log message.
            ///
            /// A log message has a `level` describing what kind of message is being
            /// sent, a context, which is an uninterpreted string meant to help
            /// consumers group similar messages, and a string containing the message
            /// text.
            pub fn log(level: Level, context: &str, message: &str) {
                unsafe {
                    let vec0 = context;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = message;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:logging/logging")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(
                        level.clone() as i32,
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                    );
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod wasi {
        #[allow(dead_code)]
        pub mod logging {
            #[allow(dead_code, clippy::all)]
            pub mod logging {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// A log level, describing a kind of message.
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Level {
                    /// Describes messages about the values of variables and the flow of
                    /// control within a program.
                    Trace,
                    /// Describes messages likely to be of interest to someone debugging a
                    /// program.
                    Debug,
                    /// Describes messages likely to be of interest to someone monitoring a
                    /// program.
                    Info,
                    /// Describes messages indicating hazardous situations.
                    Warn,
                    /// Describes messages indicating serious errors.
                    Error,
                    /// Describes messages indicating fatal errors.
                    Critical,
                }
                impl ::core::fmt::Debug for Level {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Level::Trace => f.debug_tuple("Level::Trace").finish(),
                            Level::Debug => f.debug_tuple("Level::Debug").finish(),
                            Level::Info => f.debug_tuple("Level::Info").finish(),
                            Level::Warn => f.debug_tuple("Level::Warn").finish(),
                            Level::Error => f.debug_tuple("Level::Error").finish(),
                            Level::Critical => f.debug_tuple("Level::Critical").finish(),
                        }
                    }
                }

                impl Level {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> Level {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => Level::Trace,
                            1 => Level::Debug,
                            2 => Level::Info,
                            3 => Level::Warn,
                            4 => Level::Error,
                            5 => Level::Critical,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_log_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    T::log(
                        Level::_lift(arg0 as u8),
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                }
                pub trait Guest {
                    /// Emit a log message.
                    ///
                    /// A log message has a `level` describing what kind of message is being
                    /// sent, a context, which is an uninterpreted string meant to help
                    /// consumers group similar messages, and a string containing the message
                    /// text.
                    fn log(level: Level, context: _rt::String, message: _rt::String);
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_logging_logging_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "wasi:logging/logging#log"]
          unsafe extern "C" fn export_log(arg0: i32,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,) {
            $($path_to_types)*::_export_log_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_wasi_logging_logging_cabi;
            }
        }
    }
}
mod _rt {

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_example_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasi::logging::logging::__export_wasi_logging_logging_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::logging::logging);
  )
}
#[doc(inline)]
pub(crate) use __export_example_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:example:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 396] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x8e\x02\x01A\x02\x01\
A\x04\x01B\x04\x01m\x06\x05trace\x05debug\x04info\x04warn\x05error\x08critical\x04\
\0\x05level\x03\0\0\x01@\x03\x05level\x01\x07contexts\x07messages\x01\0\x04\0\x03\
log\x01\x02\x03\x01\x14wasi:logging/logging\x05\0\x01B\x04\x01m\x06\x05trace\x05\
debug\x04info\x04warn\x05error\x08critical\x04\0\x05level\x03\0\0\x01@\x03\x05le\
vel\x01\x07contexts\x07messages\x01\0\x04\0\x03log\x01\x02\x04\x01\x14wasi:loggi\
ng/logging\x05\x01\x04\x01\x19component:adapter/example\x04\0\x0b\x0d\x01\0\x07e\
xample\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208\
.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
