// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "run"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_run() -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let result0 = <_GuestImpl as Guest>::run();
    let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
    let (t2_0, t2_1, t2_2, t2_3, ) = result0;
    *((ptr1 + 0) as *mut i32) = wit_bindgen::rt::as_i32(t2_0);
    let vec5 = t2_1;
    let len5 = vec5.len() as i32;
    let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 12, 4);
    let result5 = if layout5.size() != 0
    {
      let ptr = alloc::alloc(layout5);
      if ptr.is_null()
      {
        alloc::handle_alloc_error(layout5);
      }
      ptr
    }else {{
      ::core::ptr::null_mut()
    }};
    for (i, e) in vec5.into_iter().enumerate() {
      let base = result5 as i32 + (i as i32) * 12;
      {
        let (t3_0, t3_1, ) = e;
        let vec4 = (t3_0.into_bytes()).into_boxed_slice();
        let ptr4 = vec4.as_ptr() as i32;
        let len4 = vec4.len() as i32;
        ::core::mem::forget(vec4);
        *((base + 4) as *mut i32) = len4;
        *((base + 0) as *mut i32) = ptr4;
        *((base + 8) as *mut u8) = (match t3_1 { true => 1, false => 0 }) as u8;
      }
    }
    *((ptr1 + 8) as *mut i32) = len5;
    *((ptr1 + 4) as *mut i32) = result5 as i32;
    let vec8 = t2_2;
    let len8 = vec8.len() as i32;
    let layout8 = alloc::Layout::from_size_align_unchecked(vec8.len() * 12, 4);
    let result8 = if layout8.size() != 0
    {
      let ptr = alloc::alloc(layout8);
      if ptr.is_null()
      {
        alloc::handle_alloc_error(layout8);
      }
      ptr
    }else {{
      ::core::ptr::null_mut()
    }};
    for (i, e) in vec8.into_iter().enumerate() {
      let base = result8 as i32 + (i as i32) * 12;
      {
        let (t6_0, t6_1, ) = e;
        let vec7 = (t6_0.into_bytes()).into_boxed_slice();
        let ptr7 = vec7.as_ptr() as i32;
        let len7 = vec7.len() as i32;
        ::core::mem::forget(vec7);
        *((base + 4) as *mut i32) = len7;
        *((base + 0) as *mut i32) = ptr7;
        *((base + 8) as *mut u8) = (match t6_1 { true => 1, false => 0 }) as u8;
      }
    }
    *((ptr1 + 16) as *mut i32) = len8;
    *((ptr1 + 12) as *mut i32) = result8 as i32;
    *((ptr1 + 20) as *mut i32) = wit_bindgen::rt::as_i32(t2_3);
    ptr1
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_run"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_run(arg0: i32,) {
      let l2 = *((arg0 + 4) as *const i32);
      let l3 = *((arg0 + 8) as *const i32);
      let base4 = l2;
      let len4 = l3;
      for i in 0..len4 {
        let base = base4 + i *12;
        {
          let l0 = *((base + 0) as *const i32);
          let l1 = *((base + 4) as *const i32);
          wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
        }
      }
      wit_bindgen::rt::dealloc(base4, (len4 as usize) * 12, 4);
      let l7 = *((arg0 + 12) as *const i32);
      let l8 = *((arg0 + 16) as *const i32);
      let base9 = l7;
      let len9 = l8;
      for i in 0..len9 {
        let base = base9 + i *12;
        {
          let l5 = *((base + 0) as *const i32);
          let l6 = *((base + 4) as *const i32);
          wit_bindgen::rt::dealloc(l5, (l6) as usize, 1);
        }
      }
      wit_bindgen::rt::dealloc(base9, (len9 as usize) * 12, 4);
    }
  };
};
use super::Component as _GuestImpl;
pub trait Guest {
  fn run() -> (u32,wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,bool,)>,wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,bool,)>,u32,);
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, vec::Vec, string::String};

#[repr(align(4))]
struct _RetArea([u8; 24]);
static mut _RET_AREA: _RetArea = _RetArea([0; 24]);

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:directories"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 192] = [3, 0, 11, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 0, 97, 115, 109, 13, 0, 1, 0, 7, 59, 1, 65, 2, 1, 65, 5, 1, 111, 2, 115, 127, 1, 112, 0, 1, 111, 4, 121, 1, 1, 121, 1, 64, 0, 0, 2, 4, 0, 3, 114, 117, 110, 1, 3, 4, 1, 20, 103, 111, 108, 101, 109, 58, 105, 116, 47, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 4, 0, 11, 17, 1, 0, 11, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
