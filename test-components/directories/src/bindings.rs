// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_run_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::run();
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let (t2_0, t2_1, t2_2, t2_3) = result0;
    *ptr1.add(0).cast::<i32>() = _rt::as_i32(t2_0);
    let vec5 = t2_1;
    let len5 = vec5.len();
    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 12, 4);
    let result5 = if layout5.size() != 0 {
        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
        if ptr.is_null() {
            _rt::alloc::handle_alloc_error(layout5);
        }
        ptr
    } else {
        ::core::ptr::null_mut()
    };
    for (i, e) in vec5.into_iter().enumerate() {
        let base = result5.add(i * 12);
        {
            let (t3_0, t3_1) = e;
            let vec4 = (t3_0.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr().cast::<u8>();
            let len4 = vec4.len();
            ::core::mem::forget(vec4);
            *base.add(4).cast::<usize>() = len4;
            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
            *base.add(8).cast::<u8>() = (match t3_1 {
                true => 1,
                false => 0,
            }) as u8;
        }
    }
    *ptr1.add(8).cast::<usize>() = len5;
    *ptr1.add(4).cast::<*mut u8>() = result5;
    let vec8 = t2_2;
    let len8 = vec8.len();
    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(vec8.len() * 12, 4);
    let result8 = if layout8.size() != 0 {
        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
        if ptr.is_null() {
            _rt::alloc::handle_alloc_error(layout8);
        }
        ptr
    } else {
        ::core::ptr::null_mut()
    };
    for (i, e) in vec8.into_iter().enumerate() {
        let base = result8.add(i * 12);
        {
            let (t6_0, t6_1) = e;
            let vec7 = (t6_0.into_bytes()).into_boxed_slice();
            let ptr7 = vec7.as_ptr().cast::<u8>();
            let len7 = vec7.len();
            ::core::mem::forget(vec7);
            *base.add(4).cast::<usize>() = len7;
            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
            *base.add(8).cast::<u8>() = (match t6_1 {
                true => 1,
                false => 0,
            }) as u8;
        }
    }
    *ptr1.add(16).cast::<usize>() = len8;
    *ptr1.add(12).cast::<*mut u8>() = result8;
    *ptr1.add(20).cast::<i32>() = _rt::as_i32(t2_3);
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_run<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(4).cast::<*mut u8>();
    let l1 = *arg0.add(8).cast::<usize>();
    let base4 = l0;
    let len4 = l1;
    for i in 0..len4 {
        let base = base4.add(i * 12);
        {
            let l2 = *base.add(0).cast::<*mut u8>();
            let l3 = *base.add(4).cast::<usize>();
            _rt::cabi_dealloc(l2, l3, 1);
        }
    }
    _rt::cabi_dealloc(base4, len4 * 12, 4);
    let l5 = *arg0.add(12).cast::<*mut u8>();
    let l6 = *arg0.add(16).cast::<usize>();
    let base9 = l5;
    let len9 = l6;
    for i in 0..len9 {
        let base = base9.add(i * 12);
        {
            let l7 = *base.add(0).cast::<*mut u8>();
            let l8 = *base.add(4).cast::<usize>();
            _rt::cabi_dealloc(l7, l8, 1);
        }
    }
    _rt::cabi_dealloc(base9, len9 * 12, 4);
}
pub trait Guest {
    fn run() -> (u32, _rt::Vec<(_rt::String, bool)>, _rt::Vec<(_rt::String, bool)>, u32);
}
#[doc(hidden)]
macro_rules! __export_world_directories_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[export_name = "run"] unsafe extern "C" fn export_run() -> *
        mut u8 { $($path_to_types)*:: _export_run_cabi::<$ty > () } #[export_name =
        "cabi_post_run"] unsafe extern "C" fn _post_return_run(arg0 : * mut u8,) {
        $($path_to_types)*:: __post_return_run::<$ty > (arg0) } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_directories_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 24]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 24]);
#[rustfmt::skip]
mod _rt {
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_directories_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_directories_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_directories_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:it:directories:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 188] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07;\x01A\x02\x01A\x05\x01\
o\x02s\x7f\x01p\0\x01o\x04y\x01\x01y\x01@\0\0\x02\x04\0\x03run\x01\x03\x04\0\x14\
golem:it/directories\x04\0\x0b\x11\x01\0\x0bdirectories\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
