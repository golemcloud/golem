// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod golem {
    pub mod it {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        #[derive(Clone)]
        pub struct ProductItem {
          pub product_id: wit_bindgen::rt::string::String,
          pub name: wit_bindgen::rt::string::String,
          pub price: f32,
          pub quantity: u32,
        }
        impl ::core::fmt::Debug for ProductItem {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("ProductItem").field("product-id", &self.product_id).field("name", &self.name).field("price", &self.price).field("quantity", &self.quantity).finish()
          }
        }
        #[derive(Clone)]
        pub struct OrderConfirmation {
          pub order_id: wit_bindgen::rt::string::String,
        }
        impl ::core::fmt::Debug for OrderConfirmation {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("OrderConfirmation").field("order-id", &self.order_id).finish()
          }
        }
        #[derive(Clone)]
        pub enum CheckoutResult{
          Error(wit_bindgen::rt::string::String),
          Success(OrderConfirmation),
        }
        impl ::core::fmt::Debug for CheckoutResult {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              CheckoutResult::Error(e) => {
                f.debug_tuple("CheckoutResult::Error").field(e).finish()
              }
              CheckoutResult::Success(e) => {
                f.debug_tuple("CheckoutResult::Success").field(e).finish()
              }
            }
          }
        }
        
        pub use super::super::super::super::super::Cart as Cart;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "golem:it/api#[dtor]cart"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<Cart>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for Cart{
          unsafe fn new(_rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]golem:it/api")]
              extern "C" {
                #[link_name = "[resource-new]cart"]
                fn new(_: usize) -> u32;
              }
              new(_rep)
            }
          }
          
          unsafe fn rep(_handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]golem:it/api")]
              extern "C" {
                #[link_name = "[resource-rep]cart"]
                fn rep(_: u32) -> usize;
              }
              rep(_handle)
            }
          }
        }
        pub type OwnCart = wit_bindgen::rt::Resource<Cart>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for Cart{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]golem:it/api")]
              extern "C" {
                #[link_name = "[resource-drop]cart"]
                fn drop(_: u32);
              }
              
              drop(_handle);
            }
          }
        }
        
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#[constructor]cart"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_constructor_cart(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = OwnCart::new(<_CartImpl as GuestCart>::new(wit_bindgen::rt::string_lift(bytes0)));
            wit_bindgen::rt::Resource::into_handle(result1) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#[method]cart.add-item"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_cart_add_item(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: f32,arg6: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg2 as usize;
            let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
            let len1 = arg4 as usize;
            let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
            <_CartImpl as GuestCart>::add_item(wit_bindgen::rt::Resource::<Cart>::lift_borrow(arg0 as u32 as usize), ProductItem{
              product_id: wit_bindgen::rt::string_lift(bytes0),
              name: wit_bindgen::rt::string_lift(bytes1),
              price: arg5,
              quantity: arg6 as u32,
            });
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#[method]cart.remove-item"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_cart_remove_item(arg0: i32,arg1: i32,arg2: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg2 as usize;
            let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
            <_CartImpl as GuestCart>::remove_item(wit_bindgen::rt::Resource::<Cart>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#[method]cart.update-item-quantity"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_cart_update_item_quantity(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg2 as usize;
            let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
            <_CartImpl as GuestCart>::update_item_quantity(wit_bindgen::rt::Resource::<Cart>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), arg3 as u32);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#[method]cart.checkout"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_cart_checkout(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_CartImpl as GuestCart>::checkout(wit_bindgen::rt::Resource::<Cart>::lift_borrow(arg0 as u32 as usize));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              CheckoutResult::Error(e) => {
                *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                let vec2 = (e.into_bytes()).into_boxed_slice();
                let ptr2 = vec2.as_ptr() as i32;
                let len2 = vec2.len() as i32;
                ::core::mem::forget(vec2);
                *((ptr1 + 8) as *mut i32) = len2;
                *((ptr1 + 4) as *mut i32) = ptr2;
              },
              CheckoutResult::Success(e) => {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let OrderConfirmation{ order_id:order_id3, } = e;
                let vec4 = (order_id3.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr1 + 8) as *mut i32) = len4;
                *((ptr1 + 4) as *mut i32) = ptr4;
              },
            }
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#[method]cart.checkout"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_method_cart_checkout(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#[method]cart.get-cart-contents"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_cart_get_cart_contents(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_CartImpl as GuestCart>::get_cart_contents(wit_bindgen::rt::Resource::<Cart>::lift_borrow(arg0 as u32 as usize));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec5 = result0;
            let len5 = vec5.len() as i32;
            let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 4);
            let result5 = if layout5.size() != 0
            {
              let ptr = alloc::alloc(layout5);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout5);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec5.into_iter().enumerate() {
              let base = result5 as i32 + (i as i32) * 24;
              {
                let ProductItem{ product_id:product_id2, name:name2, price:price2, quantity:quantity2, } = e;
                let vec3 = (product_id2.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((base + 4) as *mut i32) = len3;
                *((base + 0) as *mut i32) = ptr3;
                let vec4 = (name2.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((base + 12) as *mut i32) = len4;
                *((base + 8) as *mut i32) = ptr4;
                *((base + 16) as *mut f32) = wit_bindgen::rt::as_f32(price2);
                *((base + 20) as *mut i32) = wit_bindgen::rt::as_i32(quantity2);
              }
            }
            *((ptr1 + 4) as *mut i32) = len5;
            *((ptr1 + 0) as *mut i32) = result5 as i32;
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#[method]cart.get-cart-contents"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_method_cart_get_cart_contents(arg0: i32,) {
              let l4 = *((arg0 + 0) as *const i32);
              let l5 = *((arg0 + 4) as *const i32);
              let base6 = l4;
              let len6 = l5;
              for i in 0..len6 {
                let base = base6 + i *24;
                {
                  let l0 = *((base + 0) as *const i32);
                  let l1 = *((base + 4) as *const i32);
                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                  let l2 = *((base + 8) as *const i32);
                  let l3 = *((base + 12) as *const i32);
                  wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                }
              }
              wit_bindgen::rt::dealloc(base6, (len6 as usize) * 24, 4);
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#[method]cart.merge-with"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_cart_merge_with(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_CartImpl as GuestCart>::merge_with(wit_bindgen::rt::Resource::<Cart>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::Resource::<Cart>::lift_borrow(arg1 as u32 as usize));
          }
        };
        use super::super::super::super::super::Cart as _CartImpl;
        pub trait GuestCart {
          fn new(user_id: wit_bindgen::rt::string::String,) -> Self;
          fn add_item(&self,item: ProductItem,);
          fn remove_item(&self,product_id: wit_bindgen::rt::string::String,);
          fn update_item_quantity(&self,product_id: wit_bindgen::rt::string::String,quantity: u32,);
          fn checkout(&self,) -> CheckoutResult;
          fn get_cart_contents(&self,) -> wit_bindgen::rt::vec::Vec::<ProductItem>;
          fn merge_with(&self,other_cart: &Cart,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:shopping-cart"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1308] = [3, 0, 13, 115, 104, 111, 112, 112, 105, 110, 103, 45, 99, 97, 114, 116, 0, 97, 115, 109, 13, 0, 1, 0, 7, 179, 4, 1, 65, 2, 1, 66, 26, 1, 114, 4, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 4, 110, 97, 109, 101, 115, 5, 112, 114, 105, 99, 101, 118, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 4, 0, 12, 112, 114, 111, 100, 117, 99, 116, 45, 105, 116, 101, 109, 3, 0, 0, 1, 112, 1, 1, 114, 4, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 5, 105, 116, 101, 109, 115, 2, 5, 116, 111, 116, 97, 108, 118, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 3, 1, 114, 1, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 4, 0, 18, 111, 114, 100, 101, 114, 45, 99, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 3, 0, 5, 1, 113, 2, 5, 101, 114, 114, 111, 114, 1, 115, 0, 7, 115, 117, 99, 99, 101, 115, 115, 1, 6, 0, 4, 0, 15, 99, 104, 101, 99, 107, 111, 117, 116, 45, 114, 101, 115, 117, 108, 116, 3, 0, 7, 4, 0, 4, 99, 97, 114, 116, 3, 1, 1, 105, 9, 1, 64, 1, 7, 117, 115, 101, 114, 45, 105, 100, 115, 0, 10, 4, 0, 17, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 99, 97, 114, 116, 1, 11, 1, 104, 9, 1, 64, 2, 4, 115, 101, 108, 102, 12, 4, 105, 116, 101, 109, 1, 1, 0, 4, 0, 21, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 97, 100, 100, 45, 105, 116, 101, 109, 1, 13, 1, 64, 2, 4, 115, 101, 108, 102, 12, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 1, 0, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 114, 101, 109, 111, 118, 101, 45, 105, 116, 101, 109, 1, 14, 1, 64, 3, 4, 115, 101, 108, 102, 12, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 1, 0, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 117, 112, 100, 97, 116, 101, 45, 105, 116, 101, 109, 45, 113, 117, 97, 110, 116, 105, 116, 121, 1, 15, 1, 64, 1, 4, 115, 101, 108, 102, 12, 0, 8, 4, 0, 21, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 99, 104, 101, 99, 107, 111, 117, 116, 1, 16, 1, 64, 1, 4, 115, 101, 108, 102, 12, 0, 2, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 1, 17, 1, 64, 2, 4, 115, 101, 108, 102, 12, 10, 111, 116, 104, 101, 114, 45, 99, 97, 114, 116, 12, 1, 0, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 109, 101, 114, 103, 101, 45, 119, 105, 116, 104, 1, 18, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 209, 4, 1, 65, 2, 1, 65, 2, 1, 66, 26, 1, 114, 4, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 4, 110, 97, 109, 101, 115, 5, 112, 114, 105, 99, 101, 118, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 4, 0, 12, 112, 114, 111, 100, 117, 99, 116, 45, 105, 116, 101, 109, 3, 0, 0, 1, 112, 1, 1, 114, 4, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 5, 105, 116, 101, 109, 115, 2, 5, 116, 111, 116, 97, 108, 118, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 3, 1, 114, 1, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 4, 0, 18, 111, 114, 100, 101, 114, 45, 99, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 3, 0, 5, 1, 113, 2, 5, 101, 114, 114, 111, 114, 1, 115, 0, 7, 115, 117, 99, 99, 101, 115, 115, 1, 6, 0, 4, 0, 15, 99, 104, 101, 99, 107, 111, 117, 116, 45, 114, 101, 115, 117, 108, 116, 3, 0, 7, 4, 0, 4, 99, 97, 114, 116, 3, 1, 1, 105, 9, 1, 64, 1, 7, 117, 115, 101, 114, 45, 105, 100, 115, 0, 10, 4, 0, 17, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 99, 97, 114, 116, 1, 11, 1, 104, 9, 1, 64, 2, 4, 115, 101, 108, 102, 12, 4, 105, 116, 101, 109, 1, 1, 0, 4, 0, 21, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 97, 100, 100, 45, 105, 116, 101, 109, 1, 13, 1, 64, 2, 4, 115, 101, 108, 102, 12, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 1, 0, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 114, 101, 109, 111, 118, 101, 45, 105, 116, 101, 109, 1, 14, 1, 64, 3, 4, 115, 101, 108, 102, 12, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 1, 0, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 117, 112, 100, 97, 116, 101, 45, 105, 116, 101, 109, 45, 113, 117, 97, 110, 116, 105, 116, 121, 1, 15, 1, 64, 1, 4, 115, 101, 108, 102, 12, 0, 8, 4, 0, 21, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 99, 104, 101, 99, 107, 111, 117, 116, 1, 16, 1, 64, 1, 4, 115, 101, 108, 102, 12, 0, 2, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 1, 17, 1, 64, 2, 4, 115, 101, 108, 102, 12, 10, 111, 116, 104, 101, 114, 45, 99, 97, 114, 116, 12, 1, 0, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 99, 97, 114, 116, 46, 109, 101, 114, 103, 101, 45, 119, 105, 116, 104, 1, 18, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 4, 1, 22, 103, 111, 108, 101, 109, 58, 105, 116, 47, 115, 104, 111, 112, 112, 105, 110, 103, 45, 99, 97, 114, 116, 4, 0, 11, 19, 1, 0, 13, 115, 104, 111, 112, 112, 105, 110, 103, 45, 99, 97, 114, 116, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
