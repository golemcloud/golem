// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod auction {
  pub mod auction {
    
    #[allow(clippy::all)]
    pub mod api {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub struct BidderId {
        pub bidder_id: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for BidderId {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("BidderId").field("bidder-id", &self.bidder_id).finish()
        }
      }
      #[derive(Clone)]
      pub struct AuctionId {
        pub auction_id: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for AuctionId {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("AuctionId").field("auction-id", &self.auction_id).finish()
        }
      }
      pub type Deadline = u64;
      #[derive(Clone)]
      pub struct Auction {
        pub auction_id: AuctionId,
        pub name: wit_bindgen::rt::string::String,
        pub description: wit_bindgen::rt::string::String,
        pub limit_price: f32,
        pub expiration: Deadline,
      }
      impl ::core::fmt::Debug for Auction {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Auction").field("auction-id", &self.auction_id).field("name", &self.name).field("description", &self.description).field("limit-price", &self.limit_price).field("expiration", &self.expiration).finish()
        }
      }
      #[derive(Clone, Copy)]
      pub enum BidResult{
        AuctionExpired,
        PriceTooLow,
        Success,
      }
      impl ::core::fmt::Debug for BidResult {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            BidResult::AuctionExpired => {
              f.debug_tuple("BidResult::AuctionExpired").finish()
            }
            BidResult::PriceTooLow => {
              f.debug_tuple("BidResult::PriceTooLow").finish()
            }
            BidResult::Success => {
              f.debug_tuple("BidResult::Success").finish()
            }
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn initialize(auction: &Auction,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let Auction{ auction_id:auction_id0, name:name0, description:description0, limit_price:limit_price0, expiration:expiration0, } = auction;
          let AuctionId{ auction_id:auction_id1, } = auction_id0;
          let vec2 = auction_id1;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          let vec3 = name0;
          let ptr3 = vec3.as_ptr() as i32;
          let len3 = vec3.len() as i32;
          let vec4 = description0;
          let ptr4 = vec4.as_ptr() as i32;
          let len4 = vec4.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "auction:auction/api")]
          extern "C" {
            #[link_name = "initialize"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: f32, _: i64, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: f32, _: i64, ){ unreachable!() }
          wit_import(ptr2, len2, ptr3, len3, ptr4, len4, wit_bindgen::rt::as_f32(limit_price0), wit_bindgen::rt::as_i64(expiration0));
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn bid(bidder_id: &BidderId,price: f32,) -> BidResult{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let BidderId{ bidder_id:bidder_id0, } = bidder_id;
          let vec1 = bidder_id0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "auction:auction/api")]
          extern "C" {
            #[link_name = "bid"]
            fn wit_import(_: i32, _: i32, _: f32, ) -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: f32, ) -> i32{ unreachable!() }
          let ret = wit_import(ptr1, len1, wit_bindgen::rt::as_f32(price));
          let v2 = match ret {
            0 => {
              BidResult::AuctionExpired
            }
            1 => {
              BidResult::PriceTooLow
            }
            n => {
              debug_assert_eq!(n, 2, "invalid enum discriminant");
              BidResult::Success
            }
          };
          v2
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn close_auction() -> Option<BidderId>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "auction:auction/api")]
          extern "C" {
            #[link_name = "close-auction"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => None,
            1 => {
              let e = {
                let l2 = *((ptr0 + 4) as *const i32);
                let l3 = *((ptr0 + 8) as *const i32);
                let len4 = l3 as usize;
                let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                
                BidderId{
                  bidder_id: wit_bindgen::rt::string_lift(bytes4),
                }
              };
              Some(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      
    }
    
  }
  pub mod auction_stub {
    
    #[allow(clippy::all)]
    pub mod stub_auction {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Uri = super::super::super::golem::rpc::types::Uri;
      pub type BidderId = super::super::super::auction::auction::api::BidderId;
      pub type Auction = super::super::super::auction::auction::api::Auction;
      pub type BidResult = super::super::super::auction::auction::api::BidResult;
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Api{
        handle: wit_bindgen::rt::Resource<Api>,
      }
      
      impl Api{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Api{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "auction:auction-stub/stub-auction")]
            extern "C" {
              #[link_name = "[resource-drop]api"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl Api {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(location: &Uri,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let super::super::super::golem::rpc::types::Uri{ value:value0, } = location;
            let vec1 = value0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "auction:auction-stub/stub-auction")]
            extern "C" {
              #[link_name = "[constructor]api"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr1, len1);
            Api::from_handle(ret as u32)
          }
        }
      }
      impl Api {
        #[allow(unused_unsafe, clippy::all)]
        pub fn initialize(&self,auction: &Auction,){
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let super::super::super::auction::auction::api::Auction{ auction_id:auction_id0, name:name0, description:description0, limit_price:limit_price0, expiration:expiration0, } = auction;
            let super::super::super::auction::auction::api::AuctionId{ auction_id:auction_id1, } = auction_id0;
            let vec2 = auction_id1;
            let ptr2 = vec2.as_ptr() as i32;
            let len2 = vec2.len() as i32;
            let vec3 = name0;
            let ptr3 = vec3.as_ptr() as i32;
            let len3 = vec3.len() as i32;
            let vec4 = description0;
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "auction:auction-stub/stub-auction")]
            extern "C" {
              #[link_name = "[method]api.initialize"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: f32, _: i64, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: f32, _: i64, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr2, len2, ptr3, len3, ptr4, len4, wit_bindgen::rt::as_f32(limit_price0), wit_bindgen::rt::as_i64(expiration0));
          }
        }
      }
      impl Api {
        #[allow(unused_unsafe, clippy::all)]
        pub fn bid(&self,bidder_id: &BidderId,price: f32,) -> BidResult{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let super::super::super::auction::auction::api::BidderId{ bidder_id:bidder_id0, } = bidder_id;
            let vec1 = bidder_id0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "auction:auction-stub/stub-auction")]
            extern "C" {
              #[link_name = "[method]api.bid"]
              fn wit_import(_: i32, _: i32, _: i32, _: f32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: f32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32, ptr1, len1, wit_bindgen::rt::as_f32(price));
            use super::super::super::auction::auction::api::BidResult as V2;
            let v2 = match ret {
              0 => {
                V2::AuctionExpired
              }
              1 => {
                V2::PriceTooLow
              }
              n => {
                debug_assert_eq!(n, 2, "invalid enum discriminant");
                V2::Success
              }
            };
            v2
          }
        }
      }
      impl Api {
        #[allow(unused_unsafe, clippy::all)]
        pub fn close_auction(&self,) -> Option<BidderId>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "auction:auction-stub/stub-auction")]
            extern "C" {
              #[link_name = "[method]api.close-auction"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => None,
              1 => {
                let e = {
                  let l2 = *((ptr0 + 4) as *const i32);
                  let l3 = *((ptr0 + 8) as *const i32);
                  let len4 = l3 as usize;
                  let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                  
                  super::super::super::auction::auction::api::BidderId{
                    bidder_id: wit_bindgen::rt::string_lift(bytes4),
                  }
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
  }
}
pub mod golem {
  pub mod rpc {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type NodeIndex = i32;
      #[derive(Clone)]
      pub enum WitNode{
        RecordValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        VariantValue((u32,Option<NodeIndex>,)),
        EnumValue(u32),
        FlagsValue(wit_bindgen::rt::vec::Vec::<bool>),
        TupleValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        ListValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        OptionValue(Option<NodeIndex>),
        ResultValue(Result<Option<NodeIndex>,Option<NodeIndex>>),
        PrimU8(u8),
        PrimU16(u16),
        PrimU32(u32),
        PrimU64(u64),
        PrimS8(i8),
        PrimS16(i16),
        PrimS32(i32),
        PrimS64(i64),
        PrimFloat32(f32),
        PrimFloat64(f64),
        PrimChar(char),
        PrimBool(bool),
        PrimString(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for WitNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            WitNode::RecordValue(e) => {
              f.debug_tuple("WitNode::RecordValue").field(e).finish()
            }
            WitNode::VariantValue(e) => {
              f.debug_tuple("WitNode::VariantValue").field(e).finish()
            }
            WitNode::EnumValue(e) => {
              f.debug_tuple("WitNode::EnumValue").field(e).finish()
            }
            WitNode::FlagsValue(e) => {
              f.debug_tuple("WitNode::FlagsValue").field(e).finish()
            }
            WitNode::TupleValue(e) => {
              f.debug_tuple("WitNode::TupleValue").field(e).finish()
            }
            WitNode::ListValue(e) => {
              f.debug_tuple("WitNode::ListValue").field(e).finish()
            }
            WitNode::OptionValue(e) => {
              f.debug_tuple("WitNode::OptionValue").field(e).finish()
            }
            WitNode::ResultValue(e) => {
              f.debug_tuple("WitNode::ResultValue").field(e).finish()
            }
            WitNode::PrimU8(e) => {
              f.debug_tuple("WitNode::PrimU8").field(e).finish()
            }
            WitNode::PrimU16(e) => {
              f.debug_tuple("WitNode::PrimU16").field(e).finish()
            }
            WitNode::PrimU32(e) => {
              f.debug_tuple("WitNode::PrimU32").field(e).finish()
            }
            WitNode::PrimU64(e) => {
              f.debug_tuple("WitNode::PrimU64").field(e).finish()
            }
            WitNode::PrimS8(e) => {
              f.debug_tuple("WitNode::PrimS8").field(e).finish()
            }
            WitNode::PrimS16(e) => {
              f.debug_tuple("WitNode::PrimS16").field(e).finish()
            }
            WitNode::PrimS32(e) => {
              f.debug_tuple("WitNode::PrimS32").field(e).finish()
            }
            WitNode::PrimS64(e) => {
              f.debug_tuple("WitNode::PrimS64").field(e).finish()
            }
            WitNode::PrimFloat32(e) => {
              f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
            }
            WitNode::PrimFloat64(e) => {
              f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
            }
            WitNode::PrimChar(e) => {
              f.debug_tuple("WitNode::PrimChar").field(e).finish()
            }
            WitNode::PrimBool(e) => {
              f.debug_tuple("WitNode::PrimBool").field(e).finish()
            }
            WitNode::PrimString(e) => {
              f.debug_tuple("WitNode::PrimString").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct WitValue {
        pub nodes: wit_bindgen::rt::vec::Vec::<WitNode>,
      }
      impl ::core::fmt::Debug for WitValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
        }
      }
      #[derive(Clone)]
      pub struct Uri {
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Uri {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Uri").field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub enum RpcError{
        ProtocolError(wit_bindgen::rt::string::String),
        Denied(wit_bindgen::rt::string::String),
        NotFound(wit_bindgen::rt::string::String),
        RemoteInternalError(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            RpcError::ProtocolError(e) => {
              f.debug_tuple("RpcError::ProtocolError").field(e).finish()
            }
            RpcError::Denied(e) => {
              f.debug_tuple("RpcError::Denied").field(e).finish()
            }
            RpcError::NotFound(e) => {
              f.debug_tuple("RpcError::NotFound").field(e).finish()
            }
            RpcError::RemoteInternalError(e) => {
              f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for RpcError {}
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct WasmRpc{
        handle: wit_bindgen::rt::Resource<WasmRpc>,
      }
      
      impl WasmRpc{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for WasmRpc{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[resource-drop]wasm-rpc"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(location: &Uri,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let Uri{ value:value0, } = location;
            let vec1 = value0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[constructor]wasm-rpc"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr1, len1);
            WasmRpc::from_handle(ret as u32)
          }
        }
      }
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn invoke_and_await(&self,function_name: &str,function_params: &[WitValue],) -> Result<WitValue,RpcError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let mut cleanup_list = Vec::new();
            
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = function_name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec9 = function_params;
            let len9 = vec9.len() as i32;
            let layout9 = alloc::Layout::from_size_align_unchecked(vec9.len() * 8, 4);
            let result9 = if layout9.size() != 0
            {
              let ptr = alloc::alloc(layout9);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout9);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec9.into_iter().enumerate() {
              let base = result9 as i32 + (i as i32) * 8;
              {
                let WitValue{ nodes:nodes1, } = e;
                let vec8 = nodes1;
                let len8 = vec8.len() as i32;
                let layout8 = alloc::Layout::from_size_align_unchecked(vec8.len() * 24, 8);
                let result8 = if layout8.size() != 0
                {
                  let ptr = alloc::alloc(layout8);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout8);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec8.into_iter().enumerate() {
                  let base = result8 as i32 + (i as i32) * 24;
                  {
                    match e {
                      WitNode::RecordValue(e) => {
                        *((base + 0) as *mut u8) = (0i32) as u8;
                        let vec2 = e;
                        let ptr2 = vec2.as_ptr() as i32;
                        let len2 = vec2.len() as i32;
                        *((base + 12) as *mut i32) = len2;
                        *((base + 8) as *mut i32) = ptr2;
                      },
                      WitNode::VariantValue(e) => {
                        *((base + 0) as *mut u8) = (1i32) as u8;
                        let (t3_0, t3_1, ) = e;
                        *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                        match t3_1 {
                          Some(e) => {
                            *((base + 12) as *mut u8) = (1i32) as u8;
                            *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          None => {
                            {
                              *((base + 12) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };},
                        WitNode::EnumValue(e) => {
                          *((base + 0) as *mut u8) = (2i32) as u8;
                          *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                        },
                        WitNode::FlagsValue(e) => {
                          *((base + 0) as *mut u8) = (3i32) as u8;
                          let vec4 = e;
                          let len4 = vec4.len() as i32;
                          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                          let result4 = if layout4.size() != 0
                          {
                            let ptr = alloc::alloc(layout4);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout4);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4 as i32 + (i as i32) * 1;
                            {
                              *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                            }
                          }
                          *((base + 12) as *mut i32) = len4;
                          *((base + 8) as *mut i32) = result4 as i32;
                          cleanup_list.extend_from_slice(&[(result4, layout4),]);
                        },
                        WitNode::TupleValue(e) => {
                          *((base + 0) as *mut u8) = (4i32) as u8;
                          let vec5 = e;
                          let ptr5 = vec5.as_ptr() as i32;
                          let len5 = vec5.len() as i32;
                          *((base + 12) as *mut i32) = len5;
                          *((base + 8) as *mut i32) = ptr5;
                        },
                        WitNode::ListValue(e) => {
                          *((base + 0) as *mut u8) = (5i32) as u8;
                          let vec6 = e;
                          let ptr6 = vec6.as_ptr() as i32;
                          let len6 = vec6.len() as i32;
                          *((base + 12) as *mut i32) = len6;
                          *((base + 8) as *mut i32) = ptr6;
                        },
                        WitNode::OptionValue(e) => {
                          *((base + 0) as *mut u8) = (6i32) as u8;
                          match e {
                            Some(e) => {
                              *((base + 8) as *mut u8) = (1i32) as u8;
                              *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            },
                            None => {
                              {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                              }
                            },
                          };},
                          WitNode::ResultValue(e) => {
                            *((base + 0) as *mut u8) = (7i32) as u8;
                            match e {
                              Ok(e) => { {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                                match e {
                                  Some(e) => {
                                    *((base + 12) as *mut u8) = (1i32) as u8;
                                    *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  None => {
                                    {
                                      *((base + 12) as *mut u8) = (0i32) as u8;
                                    }
                                  },
                                };} },
                                Err(e) => { {
                                  *((base + 8) as *mut u8) = (1i32) as u8;
                                  match e {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };} },
                                };},
                                WitNode::PrimU8(e) => {
                                  *((base + 0) as *mut u8) = (8i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimU16(e) => {
                                  *((base + 0) as *mut u8) = (9i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimU32(e) => {
                                  *((base + 0) as *mut u8) = (10i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimU64(e) => {
                                  *((base + 0) as *mut u8) = (11i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimS8(e) => {
                                  *((base + 0) as *mut u8) = (12i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimS16(e) => {
                                  *((base + 0) as *mut u8) = (13i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimS32(e) => {
                                  *((base + 0) as *mut u8) = (14i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimS64(e) => {
                                  *((base + 0) as *mut u8) = (15i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimFloat32(e) => {
                                  *((base + 0) as *mut u8) = (16i32) as u8;
                                  *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                },
                                WitNode::PrimFloat64(e) => {
                                  *((base + 0) as *mut u8) = (17i32) as u8;
                                  *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                },
                                WitNode::PrimChar(e) => {
                                  *((base + 0) as *mut u8) = (18i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimBool(e) => {
                                  *((base + 0) as *mut u8) = (19i32) as u8;
                                  *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                },
                                WitNode::PrimString(e) => {
                                  *((base + 0) as *mut u8) = (20i32) as u8;
                                  let vec7 = e;
                                  let ptr7 = vec7.as_ptr() as i32;
                                  let len7 = vec7.len() as i32;
                                  *((base + 12) as *mut i32) = len7;
                                  *((base + 8) as *mut i32) = ptr7;
                                },
                              }
                            }
                          }
                          *((base + 4) as *mut i32) = len8;
                          *((base + 0) as *mut i32) = result8 as i32;
                          cleanup_list.extend_from_slice(&[(result8, layout8),]);
                        }
                      }
                      let ptr10 = ret_area.as_mut_ptr() as i32;
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                      extern "C" {
                        #[link_name = "[method]wasm-rpc.invoke-and-await"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, ptr0, len0, result9 as i32, len9, ptr10);
                      let l11 = i32::from(*((ptr10 + 0) as *const u8));
                      if layout9.size() != 0 {
                        alloc::dealloc(result9, layout9);
                      }
                      for (ptr, layout) in cleanup_list {
                        
                        if layout.size() != 0 {
                          
                          alloc::dealloc(ptr, layout);
                          
                        }
                        
                      }
                      match l11 {
                        0 => {
                          let e = {
                            let l12 = *((ptr10 + 4) as *const i32);
                            let l13 = *((ptr10 + 8) as *const i32);
                            let base55 = l12;
                            let len55 = l13;
                            let mut result55 = Vec::with_capacity(len55 as usize);
                            for i in 0..len55 {
                              let base = base55 + i * 24;
                              let e55 = {
                                let l14 = i32::from(*((base + 0) as *const u8));
                                let v54 = match l14 {
                                  0 => {
                                    let e54 = {
                                      let l15 = *((base + 8) as *const i32);
                                      let l16 = *((base + 12) as *const i32);
                                      let len17 = l16 as usize;
                                      
                                      Vec::from_raw_parts(l15 as *mut _, len17, len17)
                                    };
                                    WitNode::RecordValue(e54)
                                  }
                                  1 => {
                                    let e54 = {
                                      let l18 = *((base + 8) as *const i32);
                                      let l19 = i32::from(*((base + 12) as *const u8));
                                      
                                      (l18 as u32, match l19 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l20 = *((base + 16) as *const i32);
                                            
                                            l20
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      })
                                    };
                                    WitNode::VariantValue(e54)
                                  }
                                  2 => {
                                    let e54 = {
                                      let l21 = *((base + 8) as *const i32);
                                      
                                      l21 as u32
                                    };
                                    WitNode::EnumValue(e54)
                                  }
                                  3 => {
                                    let e54 = {
                                      let l22 = *((base + 8) as *const i32);
                                      let l23 = *((base + 12) as *const i32);
                                      let base25 = l22;
                                      let len25 = l23;
                                      let mut result25 = Vec::with_capacity(len25 as usize);
                                      for i in 0..len25 {
                                        let base = base25 + i * 1;
                                        let e25 = {
                                          let l24 = i32::from(*((base + 0) as *const u8));
                                          
                                          wit_bindgen::rt::bool_lift(l24 as u8)
                                        };
                                        result25.push(e25);
                                      }
                                      wit_bindgen::rt::dealloc(base25, (len25 as usize) * 1, 1);
                                      
                                      result25
                                    };
                                    WitNode::FlagsValue(e54)
                                  }
                                  4 => {
                                    let e54 = {
                                      let l26 = *((base + 8) as *const i32);
                                      let l27 = *((base + 12) as *const i32);
                                      let len28 = l27 as usize;
                                      
                                      Vec::from_raw_parts(l26 as *mut _, len28, len28)
                                    };
                                    WitNode::TupleValue(e54)
                                  }
                                  5 => {
                                    let e54 = {
                                      let l29 = *((base + 8) as *const i32);
                                      let l30 = *((base + 12) as *const i32);
                                      let len31 = l30 as usize;
                                      
                                      Vec::from_raw_parts(l29 as *mut _, len31, len31)
                                    };
                                    WitNode::ListValue(e54)
                                  }
                                  6 => {
                                    let e54 = {
                                      let l32 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l32 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l33 = *((base + 12) as *const i32);
                                            
                                            l33
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::OptionValue(e54)
                                  }
                                  7 => {
                                    let e54 = {
                                      let l34 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l34 {
                                        0 => {
                                          let e = {
                                            let l35 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l35 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l36 = *((base + 16) as *const i32);
                                                  
                                                  l36
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l37 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l37 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l38 = *((base + 16) as *const i32);
                                                  
                                                  l38
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::ResultValue(e54)
                                  }
                                  8 => {
                                    let e54 = {
                                      let l39 = i32::from(*((base + 8) as *const u8));
                                      
                                      l39 as u8
                                    };
                                    WitNode::PrimU8(e54)
                                  }
                                  9 => {
                                    let e54 = {
                                      let l40 = i32::from(*((base + 8) as *const u16));
                                      
                                      l40 as u16
                                    };
                                    WitNode::PrimU16(e54)
                                  }
                                  10 => {
                                    let e54 = {
                                      let l41 = *((base + 8) as *const i32);
                                      
                                      l41 as u32
                                    };
                                    WitNode::PrimU32(e54)
                                  }
                                  11 => {
                                    let e54 = {
                                      let l42 = *((base + 8) as *const i64);
                                      
                                      l42 as u64
                                    };
                                    WitNode::PrimU64(e54)
                                  }
                                  12 => {
                                    let e54 = {
                                      let l43 = i32::from(*((base + 8) as *const i8));
                                      
                                      l43 as i8
                                    };
                                    WitNode::PrimS8(e54)
                                  }
                                  13 => {
                                    let e54 = {
                                      let l44 = i32::from(*((base + 8) as *const i16));
                                      
                                      l44 as i16
                                    };
                                    WitNode::PrimS16(e54)
                                  }
                                  14 => {
                                    let e54 = {
                                      let l45 = *((base + 8) as *const i32);
                                      
                                      l45
                                    };
                                    WitNode::PrimS32(e54)
                                  }
                                  15 => {
                                    let e54 = {
                                      let l46 = *((base + 8) as *const i64);
                                      
                                      l46
                                    };
                                    WitNode::PrimS64(e54)
                                  }
                                  16 => {
                                    let e54 = {
                                      let l47 = *((base + 8) as *const f32);
                                      
                                      l47
                                    };
                                    WitNode::PrimFloat32(e54)
                                  }
                                  17 => {
                                    let e54 = {
                                      let l48 = *((base + 8) as *const f64);
                                      
                                      l48
                                    };
                                    WitNode::PrimFloat64(e54)
                                  }
                                  18 => {
                                    let e54 = {
                                      let l49 = *((base + 8) as *const i32);
                                      
                                      wit_bindgen::rt::char_lift(l49 as u32)
                                    };
                                    WitNode::PrimChar(e54)
                                  }
                                  19 => {
                                    let e54 = {
                                      let l50 = i32::from(*((base + 8) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l50 as u8)
                                    };
                                    WitNode::PrimBool(e54)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                    let e54 = {
                                      let l51 = *((base + 8) as *const i32);
                                      let l52 = *((base + 12) as *const i32);
                                      let len53 = l52 as usize;
                                      let bytes53 = Vec::from_raw_parts(l51 as *mut _, len53, len53);
                                      
                                      wit_bindgen::rt::string_lift(bytes53)
                                    };
                                    WitNode::PrimString(e54)
                                  }
                                };
                                
                                v54
                              };
                              result55.push(e55);
                            }
                            wit_bindgen::rt::dealloc(base55, (len55 as usize) * 24, 8);
                            
                            WitValue{
                              nodes: result55,
                            }
                          };
                          Ok(e)
                        }
                        1 => {
                          let e = {
                            let l56 = i32::from(*((ptr10 + 4) as *const u8));
                            let v69 = match l56 {
                              0 => {
                                let e69 = {
                                  let l57 = *((ptr10 + 8) as *const i32);
                                  let l58 = *((ptr10 + 12) as *const i32);
                                  let len59 = l58 as usize;
                                  let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                  
                                  wit_bindgen::rt::string_lift(bytes59)
                                };
                                RpcError::ProtocolError(e69)
                              }
                              1 => {
                                let e69 = {
                                  let l60 = *((ptr10 + 8) as *const i32);
                                  let l61 = *((ptr10 + 12) as *const i32);
                                  let len62 = l61 as usize;
                                  let bytes62 = Vec::from_raw_parts(l60 as *mut _, len62, len62);
                                  
                                  wit_bindgen::rt::string_lift(bytes62)
                                };
                                RpcError::Denied(e69)
                              }
                              2 => {
                                let e69 = {
                                  let l63 = *((ptr10 + 8) as *const i32);
                                  let l64 = *((ptr10 + 12) as *const i32);
                                  let len65 = l64 as usize;
                                  let bytes65 = Vec::from_raw_parts(l63 as *mut _, len65, len65);
                                  
                                  wit_bindgen::rt::string_lift(bytes65)
                                };
                                RpcError::NotFound(e69)
                              }
                              n => {
                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                let e69 = {
                                  let l66 = *((ptr10 + 8) as *const i32);
                                  let l67 = *((ptr10 + 12) as *const i32);
                                  let len68 = l67 as usize;
                                  let bytes68 = Vec::from_raw_parts(l66 as *mut _, len68, len68);
                                  
                                  wit_bindgen::rt::string_lift(bytes68)
                                };
                                RpcError::RemoteInternalError(e69)
                              }
                            };
                            
                            v69
                          };
                          Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                      }
                    }
                  }
                }
                
              }
              
            }
          }
          pub mod exports {
            pub mod auction {
              pub mod registry {
                
                #[allow(clippy::all)]
                pub mod api {
                  #[used]
                  #[doc(hidden)]
                  #[cfg(target_arch = "wasm32")]
                  static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                  pub type BidderId = super::super::super::super::auction::auction::api::BidderId;
                  pub type AuctionId = super::super::super::super::auction::auction::api::AuctionId;
                  pub type Deadline = super::super::super::super::auction::auction::api::Deadline;
                  pub type Auction = super::super::super::super::auction::auction::api::Auction;
                  const _: () = {
                    
                    #[doc(hidden)]
                    #[export_name = "auction:registry/api#create-bidder"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_create_bidder(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
                      #[allow(unused_imports)]
                      use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                      
                      // Before executing any other code, use this function to run all static
                      // constructors, if they have not yet been run. This is a hack required
                      // to work around wasi-libc ctors calling import functions to initialize
                      // the environment.
                      //
                      // This functionality will be removed once rust 1.69.0 is stable, at which
                      // point wasi-libc will no longer have this behavior.
                      //
                      // See
                      // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                      // for more details.
                      #[cfg(target_arch="wasm32")]
                      wit_bindgen::rt::run_ctors_once();
                      
                      let len0 = arg1 as usize;
                      let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                      let len1 = arg3 as usize;
                      let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
                      let result2 = <_GuestImpl as Guest>::create_bidder(wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1));
                      let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                      let super::super::super::super::auction::auction::api::BidderId{ bidder_id:bidder_id4, } = result2;
                      let vec5 = (bidder_id4.into_bytes()).into_boxed_slice();
                      let ptr5 = vec5.as_ptr() as i32;
                      let len5 = vec5.len() as i32;
                      ::core::mem::forget(vec5);
                      *((ptr3 + 4) as *mut i32) = len5;
                      *((ptr3 + 0) as *mut i32) = ptr5;
                      ptr3
                    }
                    
                    const _: () = {
                      #[doc(hidden)]
                      #[export_name = "cabi_post_auction:registry/api#create-bidder"]
                      #[allow(non_snake_case)]
                      unsafe extern "C" fn __post_return_create_bidder(arg0: i32,) {
                        let l0 = *((arg0 + 0) as *const i32);
                        let l1 = *((arg0 + 4) as *const i32);
                        wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                      }
                    };
                  };
                  const _: () = {
                    
                    #[doc(hidden)]
                    #[export_name = "auction:registry/api#create-auction"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_create_auction(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: f32,arg5: i64,) -> i32 {
                      #[allow(unused_imports)]
                      use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                      
                      // Before executing any other code, use this function to run all static
                      // constructors, if they have not yet been run. This is a hack required
                      // to work around wasi-libc ctors calling import functions to initialize
                      // the environment.
                      //
                      // This functionality will be removed once rust 1.69.0 is stable, at which
                      // point wasi-libc will no longer have this behavior.
                      //
                      // See
                      // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                      // for more details.
                      #[cfg(target_arch="wasm32")]
                      wit_bindgen::rt::run_ctors_once();
                      
                      let len0 = arg1 as usize;
                      let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                      let len1 = arg3 as usize;
                      let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
                      let result2 = <_GuestImpl as Guest>::create_auction(wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1), arg4, arg5 as u64);
                      let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                      let super::super::super::super::auction::auction::api::AuctionId{ auction_id:auction_id4, } = result2;
                      let vec5 = (auction_id4.into_bytes()).into_boxed_slice();
                      let ptr5 = vec5.as_ptr() as i32;
                      let len5 = vec5.len() as i32;
                      ::core::mem::forget(vec5);
                      *((ptr3 + 4) as *mut i32) = len5;
                      *((ptr3 + 0) as *mut i32) = ptr5;
                      ptr3
                    }
                    
                    const _: () = {
                      #[doc(hidden)]
                      #[export_name = "cabi_post_auction:registry/api#create-auction"]
                      #[allow(non_snake_case)]
                      unsafe extern "C" fn __post_return_create_auction(arg0: i32,) {
                        let l0 = *((arg0 + 0) as *const i32);
                        let l1 = *((arg0 + 4) as *const i32);
                        wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                      }
                    };
                  };
                  const _: () = {
                    
                    #[doc(hidden)]
                    #[export_name = "auction:registry/api#get-auctions"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_get_auctions() -> i32 {
                      #[allow(unused_imports)]
                      use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                      
                      // Before executing any other code, use this function to run all static
                      // constructors, if they have not yet been run. This is a hack required
                      // to work around wasi-libc ctors calling import functions to initialize
                      // the environment.
                      //
                      // This functionality will be removed once rust 1.69.0 is stable, at which
                      // point wasi-libc will no longer have this behavior.
                      //
                      // See
                      // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                      // for more details.
                      #[cfg(target_arch="wasm32")]
                      wit_bindgen::rt::run_ctors_once();
                      
                      let result0 = <_GuestImpl as Guest>::get_auctions();
                      let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                      let vec7 = result0;
                      let len7 = vec7.len() as i32;
                      let layout7 = alloc::Layout::from_size_align_unchecked(vec7.len() * 40, 8);
                      let result7 = if layout7.size() != 0
                      {
                        let ptr = alloc::alloc(layout7);
                        if ptr.is_null()
                        {
                          alloc::handle_alloc_error(layout7);
                        }
                        ptr
                      }else {{
                        ::core::ptr::null_mut()
                      }};
                      for (i, e) in vec7.into_iter().enumerate() {
                        let base = result7 as i32 + (i as i32) * 40;
                        {
                          let super::super::super::super::auction::auction::api::Auction{ auction_id:auction_id2, name:name2, description:description2, limit_price:limit_price2, expiration:expiration2, } = e;
                          let super::super::super::super::auction::auction::api::AuctionId{ auction_id:auction_id3, } = auction_id2;
                          let vec4 = (auction_id3.into_bytes()).into_boxed_slice();
                          let ptr4 = vec4.as_ptr() as i32;
                          let len4 = vec4.len() as i32;
                          ::core::mem::forget(vec4);
                          *((base + 4) as *mut i32) = len4;
                          *((base + 0) as *mut i32) = ptr4;
                          let vec5 = (name2.into_bytes()).into_boxed_slice();
                          let ptr5 = vec5.as_ptr() as i32;
                          let len5 = vec5.len() as i32;
                          ::core::mem::forget(vec5);
                          *((base + 12) as *mut i32) = len5;
                          *((base + 8) as *mut i32) = ptr5;
                          let vec6 = (description2.into_bytes()).into_boxed_slice();
                          let ptr6 = vec6.as_ptr() as i32;
                          let len6 = vec6.len() as i32;
                          ::core::mem::forget(vec6);
                          *((base + 20) as *mut i32) = len6;
                          *((base + 16) as *mut i32) = ptr6;
                          *((base + 24) as *mut f32) = wit_bindgen::rt::as_f32(limit_price2);
                          *((base + 32) as *mut i64) = wit_bindgen::rt::as_i64(expiration2);
                        }
                      }
                      *((ptr1 + 4) as *mut i32) = len7;
                      *((ptr1 + 0) as *mut i32) = result7 as i32;
                      ptr1
                    }
                    
                    const _: () = {
                      #[doc(hidden)]
                      #[export_name = "cabi_post_auction:registry/api#get-auctions"]
                      #[allow(non_snake_case)]
                      unsafe extern "C" fn __post_return_get_auctions(arg0: i32,) {
                        let l6 = *((arg0 + 0) as *const i32);
                        let l7 = *((arg0 + 4) as *const i32);
                        let base8 = l6;
                        let len8 = l7;
                        for i in 0..len8 {
                          let base = base8 + i *40;
                          {
                            let l0 = *((base + 0) as *const i32);
                            let l1 = *((base + 4) as *const i32);
                            wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                            let l2 = *((base + 8) as *const i32);
                            let l3 = *((base + 12) as *const i32);
                            wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                            let l4 = *((base + 16) as *const i32);
                            let l5 = *((base + 20) as *const i32);
                            wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                          }
                        }
                        wit_bindgen::rt::dealloc(base8, (len8 as usize) * 40, 8);
                      }
                    };
                  };
                  use super::super::super::super::super::Component as _GuestImpl;
                  pub trait Guest {
                    fn create_bidder(name: wit_bindgen::rt::string::String,address: wit_bindgen::rt::string::String,) -> BidderId;
                    fn create_auction(name: wit_bindgen::rt::string::String,description: wit_bindgen::rt::string::String,limit_price: f32,expiration: Deadline,) -> AuctionId;
                    fn get_auctions() -> wit_bindgen::rt::vec::Vec::<Auction>;
                  }
                  
                  #[allow(unused_imports)]
                  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                  
                  #[repr(align(4))]
                  struct _RetArea([u8; 8]);
                  static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
                  
                }
                
              }
            }
          }
          
          #[cfg(target_arch = "wasm32")]
          #[link_section = "component-type:auction-registry"]
          #[doc(hidden)]
          pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2371] = [3, 0, 16, 97, 117, 99, 116, 105, 111, 110, 45, 114, 101, 103, 105, 115, 116, 114, 121, 0, 97, 115, 109, 13, 0, 1, 0, 7, 148, 4, 1, 65, 8, 1, 66, 10, 1, 114, 1, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 115, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 0, 1, 114, 1, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 115, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 2, 1, 119, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 4, 1, 114, 5, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 4, 110, 97, 109, 101, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 11, 108, 105, 109, 105, 116, 45, 112, 114, 105, 99, 101, 118, 10, 101, 120, 112, 105, 114, 97, 116, 105, 111, 110, 5, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 6, 1, 113, 3, 15, 97, 117, 99, 116, 105, 111, 110, 45, 101, 120, 112, 105, 114, 101, 100, 0, 0, 13, 112, 114, 105, 99, 101, 45, 116, 111, 111, 45, 108, 111, 119, 0, 0, 7, 115, 117, 99, 99, 101, 115, 115, 0, 0, 4, 0, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 3, 0, 8, 3, 1, 19, 97, 117, 99, 116, 105, 111, 110, 58, 97, 117, 99, 116, 105, 111, 110, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 2, 3, 0, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 2, 3, 0, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 2, 3, 0, 0, 7, 97, 117, 99, 116, 105, 111, 110, 1, 66, 15, 2, 3, 2, 1, 1, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 2, 2, 3, 2, 1, 3, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 4, 2, 3, 2, 1, 4, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 6, 1, 64, 2, 4, 110, 97, 109, 101, 115, 7, 97, 100, 100, 114, 101, 115, 115, 115, 0, 1, 4, 0, 13, 99, 114, 101, 97, 116, 101, 45, 98, 105, 100, 100, 101, 114, 1, 8, 1, 64, 4, 4, 110, 97, 109, 101, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 11, 108, 105, 109, 105, 116, 45, 112, 114, 105, 99, 101, 118, 10, 101, 120, 112, 105, 114, 97, 116, 105, 111, 110, 5, 0, 3, 4, 0, 14, 99, 114, 101, 97, 116, 101, 45, 97, 117, 99, 116, 105, 111, 110, 1, 9, 1, 112, 7, 1, 64, 0, 0, 10, 4, 0, 12, 103, 101, 116, 45, 97, 117, 99, 116, 105, 111, 110, 115, 1, 11, 4, 1, 20, 97, 117, 99, 116, 105, 111, 110, 58, 114, 101, 103, 105, 115, 116, 114, 121, 47, 97, 112, 105, 5, 5, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 145, 13, 1, 65, 2, 1, 65, 14, 1, 66, 25, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 112, 1, 1, 107, 1, 1, 111, 2, 121, 3, 1, 112, 127, 1, 106, 1, 3, 1, 3, 1, 113, 21, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 2, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 4, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 121, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 5, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 2, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 2, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 3, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 6, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 7, 1, 112, 8, 1, 114, 1, 5, 110, 111, 100, 101, 115, 9, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 10, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 12, 1, 113, 4, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 6, 100, 101, 110, 105, 101, 100, 1, 115, 0, 9, 110, 111, 116, 45, 102, 111, 117, 110, 100, 1, 115, 0, 21, 114, 101, 109, 111, 116, 101, 45, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 0, 9, 114, 112, 99, 45, 101, 114, 114, 111, 114, 3, 0, 14, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 1, 105, 16, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 13, 0, 17, 4, 0, 21, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 97, 115, 109, 45, 114, 112, 99, 1, 18, 1, 104, 16, 1, 112, 11, 1, 106, 1, 11, 1, 15, 1, 64, 3, 4, 115, 101, 108, 102, 19, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 20, 0, 21, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 1, 22, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 17, 1, 114, 1, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 115, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 0, 1, 114, 1, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 115, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 2, 1, 119, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 4, 1, 114, 5, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 4, 110, 97, 109, 101, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 11, 108, 105, 109, 105, 116, 45, 112, 114, 105, 99, 101, 118, 10, 101, 120, 112, 105, 114, 97, 116, 105, 111, 110, 5, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 6, 1, 113, 3, 15, 97, 117, 99, 116, 105, 111, 110, 45, 101, 120, 112, 105, 114, 101, 100, 0, 0, 13, 112, 114, 105, 99, 101, 45, 116, 111, 111, 45, 108, 111, 119, 0, 0, 7, 115, 117, 99, 99, 101, 115, 115, 0, 0, 4, 0, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 3, 0, 8, 1, 64, 1, 7, 97, 117, 99, 116, 105, 111, 110, 7, 1, 0, 4, 0, 10, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 10, 1, 64, 2, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 1, 5, 112, 114, 105, 99, 101, 118, 0, 9, 4, 0, 3, 98, 105, 100, 1, 11, 1, 107, 1, 1, 64, 0, 0, 12, 4, 0, 13, 99, 108, 111, 115, 101, 45, 97, 117, 99, 116, 105, 111, 110, 1, 13, 3, 1, 19, 97, 117, 99, 116, 105, 111, 110, 58, 97, 117, 99, 116, 105, 111, 110, 47, 97, 112, 105, 5, 1, 2, 3, 0, 0, 3, 117, 114, 105, 2, 3, 0, 1, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 2, 3, 0, 1, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 2, 3, 0, 1, 8, 100, 101, 97, 100, 108, 105, 110, 101, 2, 3, 0, 1, 7, 97, 117, 99, 116, 105, 111, 110, 2, 3, 0, 1, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 1, 66, 24, 2, 3, 2, 1, 2, 4, 0, 3, 117, 114, 105, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 2, 2, 3, 2, 1, 4, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 4, 2, 3, 2, 1, 5, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 6, 2, 3, 2, 1, 6, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 8, 2, 3, 2, 1, 7, 4, 0, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 3, 0, 10, 4, 0, 3, 97, 112, 105, 3, 1, 1, 105, 12, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 0, 13, 4, 0, 16, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 112, 105, 1, 14, 1, 104, 12, 1, 64, 2, 4, 115, 101, 108, 102, 15, 7, 97, 117, 99, 116, 105, 111, 110, 9, 1, 0, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 15, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 5, 112, 114, 105, 99, 101, 118, 0, 11, 4, 0, 15, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 98, 105, 100, 1, 17, 1, 107, 3, 1, 64, 1, 4, 115, 101, 108, 102, 15, 0, 18, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 99, 108, 111, 115, 101, 45, 97, 117, 99, 116, 105, 111, 110, 1, 19, 3, 1, 33, 97, 117, 99, 116, 105, 111, 110, 58, 97, 117, 99, 116, 105, 111, 110, 45, 115, 116, 117, 98, 47, 115, 116, 117, 98, 45, 97, 117, 99, 116, 105, 111, 110, 5, 8, 1, 66, 15, 2, 3, 2, 1, 3, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 0, 2, 3, 2, 1, 4, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 2, 2, 3, 2, 1, 5, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 4, 2, 3, 2, 1, 6, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 6, 1, 64, 2, 4, 110, 97, 109, 101, 115, 7, 97, 100, 100, 114, 101, 115, 115, 115, 0, 1, 4, 0, 13, 99, 114, 101, 97, 116, 101, 45, 98, 105, 100, 100, 101, 114, 1, 8, 1, 64, 4, 4, 110, 97, 109, 101, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 11, 108, 105, 109, 105, 116, 45, 112, 114, 105, 99, 101, 118, 10, 101, 120, 112, 105, 114, 97, 116, 105, 111, 110, 5, 0, 3, 4, 0, 14, 99, 114, 101, 97, 116, 101, 45, 97, 117, 99, 116, 105, 111, 110, 1, 9, 1, 112, 7, 1, 64, 0, 0, 10, 4, 0, 12, 103, 101, 116, 45, 97, 117, 99, 116, 105, 111, 110, 115, 1, 11, 4, 1, 20, 97, 117, 99, 116, 105, 111, 110, 58, 114, 101, 103, 105, 115, 116, 114, 121, 47, 97, 112, 105, 5, 9, 4, 1, 33, 97, 117, 99, 116, 105, 111, 110, 58, 114, 101, 103, 105, 115, 116, 114, 121, 47, 97, 117, 99, 116, 105, 111, 110, 45, 114, 101, 103, 105, 115, 116, 114, 121, 4, 0, 11, 22, 1, 0, 16, 97, 117, 99, 116, 105, 111, 110, 45, 114, 101, 103, 105, 115, 116, 114, 121, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
          
          #[inline(never)]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          pub fn __link_section() {}
          