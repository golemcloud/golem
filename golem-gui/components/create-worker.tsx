import React, { useState } from "react";
import {
  Box,
  Button,
  Divider,
  FormControl,
  IconButton,
  InputAdornment,
  MenuItem,
  OutlinedInput,
  Select,
  TextField,
  Typography,
  Paper
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import RemoveIcon from "@mui/icons-material/Remove";
import { useForm, Controller, useFieldArray } from "react-hook-form";
import { fetcher, getErrorMessage } from "@/lib/utils";
import { useComponents } from "@/lib/hooks/useComponents";
import { Component } from "@/types/api";

interface FormData {
  component: string;
  workerName: string;
  arguments: { value: string }[];
  envVars: { key: string; value: string }[];
}

const obj = {
  name: "hi",
  args: ["string"],
  env: {
    property1: "string",
    property2: "string",
  },
};

const CreateWorker = () => {
  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
    setValue,
    watch,
  } = useForm<FormData>({
    defaultValues: {
      envVars: [{ key: "", value: "" }],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "envVars",
  });

  const { fields: argumentFields, append: appendArgument, remove: removeArgument } = useFieldArray({
    control,
    name: "arguments",
  });
  
  const [error, setError] = useState("");
  const { data: componentData, isLoading } = useComponents();
  const components = (componentData?.data || []) as Component[];

  const addEnvVar = () => {
    append({ key: "", value: "" });
  };
  const addArgument = () => {
    appendArgument({ value: "" });
  };

  const removeEnvVar = (index: number) => {
    if (index === 0) return;
    remove(index);
  };

 
const removeArgumentVar = (index: number) => {
  removeArgument(index);
};
  const onSubmit = async (data: FormData) => {
    console.log("data:", data);

    try {
      const response = await fetcher(
        `?path=components/${data.component}/workers`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: obj.name,
            args: obj.args,
            env: data.envVars.reduce((acc, { key, value }) => {
              //@ts-ignore
              if (key && value) acc[key] = value;
              return acc;
            }, {}),
          }),
        }
      );

      console.log("Result:", response);

      if (response.status !== 200) {
        return setError(getErrorMessage(response.data));
      }

      setError(""); // Clear previous error
      // TODO: Add mutation logic and toast
      // onCreation?.();
    } catch (err) {
      console.error("Error during submission:", err);
      setError("Something went wrong! Please try again.");
    }

    console.log(data);
  };

  return (
    <Paper
      component="form"
      elevation={4}
      onSubmit={handleSubmit(onSubmit)}
      sx={{
        width: "100%",
        p: 3,
      }}
    >
      <Box sx={{ display: "flex", gap: 2, mb: 3 }}>
        <FormControl fullWidth>
          <Typography variant="body2" sx={{ mb: 1 }}>
            Component
          </Typography>
          <Controller
            name="component"
            control={control}
            defaultValue=""
            render={({ field }) => (
              <Select {...field}>
                {components?.map((component: Component) => (
                  <MenuItem
                    key={component.versionedComponentId.componentId}
                    value={component.versionedComponentId.componentId}
                  >
                    {component.componentName}
                  </MenuItem>
                ))}
              </Select>
            )}
          />
        </FormControl>
      </Box>

      {/* Worker Name */}
      <Box sx={{ display: "flex", alignItems: "center", gap: 2, mb: 3 }}>
        <Controller
          name="workerName"
          control={control}
          rules={{ required: "Worker Name is required" }}
          render={({ field }) => (
            <TextField
              {...field}
              fullWidth
              label="Worker Name"
              variant="outlined"
              error={!!errors.workerName}
            />
          )}
        />
        <Button
          variant="contained"
          sx={{ textTransform: "none" }}
          onClick={() => {
            reset({ workerName: "AutoGeneratedWorker" });
          }}
        >
          Generate
        </Button>
      </Box>

      {/* Environment Variables */}
      <Box sx={{ mb: 3 }}>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            gap: 2,
            mb: 2,
          }}
        >
          <Typography variant="body2" sx={{ mb: 1 }}>
            Environment Variables
          </Typography>
          <Button
            startIcon={<AddIcon />}
            variant="outlined"
            sx={{ textTransform: "none" }}
            onClick={addEnvVar}
          >
            Add
          </Button>
        </Box>
        {fields.map((item, index) => (
          <Box
            key={item.id}
            sx={{ display: "flex", alignItems: "center", gap: 2, mb: 2 }}
          >
            <Controller
              //@ts-ignore
              name={`envVars[${index}].key`}
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  fullWidth
                  label="Key"
                  variant="outlined"
                />
              )}
            />
            <Controller
              //@ts-ignore
              name={`envVars[${index}].value`}
              control={control}
              render={({ field }) => (
                <OutlinedInput {...field} fullWidth type="password" />
              )}
            />
            <IconButton onClick={() => removeEnvVar(index)}>
              <RemoveIcon sx={{ bgcolor: "#71bdf6", borderRadius: "50%" }} />
            </IconButton>
          </Box>
        ))}
      </Box>

      <Divider sx={{ backgroundColor: "#333", mb: 3 }} />

      {/* Arguments */}
      <Box sx={{ mb: 3 }}>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            gap: 2,
            mb: 2,
          }}
        >
          <Typography variant="body2" sx={{ mb: 1 }}>
            Arguments
          </Typography>
          <Button
            startIcon={<AddIcon />}
            variant="outlined"
            sx={{ textTransform: "none" }}
            onClick={addArgument}
          >
            Add
          </Button>
        </Box>
        {argumentFields.map((item, index) => (
          <Box
            key={item.id}
            sx={{ display: "flex", alignItems: "center", gap: 2, mb: 2 }}
          >
            <Controller
              //@ts-ignore
              name={`arguments.${index}.value`} 
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  fullWidth
                  label={`Argument ${index + 1}`}
                  variant="outlined"
                />
              )}
            />
            <IconButton onClick={() => removeArgumentVar(index)}>
              <RemoveIcon sx={{ bgcolor: "#71bdf6", borderRadius: "50%" }} />
            </IconButton>
          </Box>
        ))}
      </Box>

      {/* Create Worker Button */}
      <Box sx={{ textAlign: "center" }}>
        <Button
          type="submit"
          variant="contained"
          sx={{
            textTransform: "none",
            width: "100%",
            py: 1.5,
            backgroundColor: "#1976d2",
            ":hover": { backgroundColor: "#125ea5" },
          }}
        >
          Create Worker
        </Button>
      </Box>
    </Paper>
  );
};

export default CreateWorker;
