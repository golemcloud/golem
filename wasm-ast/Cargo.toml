[package]
name = "golem-wasm-ast"
version = "0.0.0"
edition = "2021"

homepage = "https://golem.cloud"
repository = "https://github.com/golemcloud/golem/"
description = "WASM AST"

license-file = "../LICENSE"

[dependencies]
bincode = { workspace = true, optional = true }
itertools = { workspace = true }
leb128 = { workspace = true, optional = true }
mappable-rc = { workspace = true }
poem-openapi = { workspace = true, optional = true }
prost = { workspace = true, optional = true }
semver = { workspace = true, optional = true }
serde = { workspace = true, optional = true, features = ["derive"] }
serde_json = { workspace = true, optional = true }
wasmparser = { workspace = true, optional = true }
wasm-encoder = { workspace = true, optional = true }
wasm-metadata = { workspace = true, optional = true }
wasm-wave = { workspace = true, optional = true }
wit-component = { workspace = true, optional = true }
wit-parser = { workspace = true, optional = true }

[dev-dependencies]
colored-diff = { workspace = true }
pretty_assertions = { workspace = true }
test-r = { workspace = true }
wasmprinter = { workspace = true }

[build-dependencies]
prost-build = { workspace = true, optional = true }

[features]
default = [
    "parser",
    "wit-parser",
    "writer",
    "component",
    "metadata",
    "analysis",
    "wave",
    "json",
    "bincode",
    "poem_openapi",
    "protobuf",
]

# Support building up the WASM AST by parsing a binary WASM module or component using the wasmparser library
parser = ["dep:wasmparser", "dep:leb128"]

# Support building up AnalyzedTypes from WIT definitions.
wit-parser = ["dep:wit-component", "dep:wit-parser"]

# Support writing out a binary WASM module or component using the wasm-encoder library
writer = ["dep:wasm-encoder"]

# Support for the WASM component model
component = []

# Support for extracting producer and other metadata from a binary WASM module or component using the wasm-metadata library
metadata = ["dep:wasm-metadata", "dep:semver"]

# Enables some higher level analysis features built on top of the WASM AST
analysis = ["component", "metadata"]

# Wave format representation
wave = ["dep:wasm-wave"]

# Bincode serialization for analysis output
bincode = ["dep:bincode"]

# Serde JSON serialization for analysis output
json = ["dep:serde", "dep:serde_json"]

# poem-openapi instances for analysis output
poem_openapi = ["json", "dep:poem-openapi"]

# Protobuf representation of analysed types
protobuf = ["dep:prost", "dep:prost-build"]

[lib]
path = "src/lib.rs"
harness = false

[[test]]
name = "exports"
harness = false

[[test]]
name = "mems"
harness = false

[[test]]
name = "metadata"
harness = false

[[test]]
name = "roundtrip"
harness = false
