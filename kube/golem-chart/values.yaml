# shard manager service configuration
shardManager:
  image: golemservices/golem-shard-manager:latest
  imagePullPolicy: Always
  ports:
    http: 8081
    grpc: 9001
  service:
    type: ClusterIP
  worker:
    healthCheckType: "K8s"
  redis:
    port: 6379
    host: golem-redis-master
    username: ""
    database: 0
    password:
      type: secret # secret or plain, or none if no auth
      plain: ""
      secret: # password from kubernetes secret
        name: golem-redis
        key: redis-password
#  nodeSelector:  # added, if defined, see: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/

# worker executor service configuration
workerExecutor:
  image: golemservices/golem-worker-executor:latest
  imagePullPolicy: Always
  replica: 1
  ports:
    http: 8080
    grpc: 9000
  service:
    type: ClusterIP
  redis:
    port: 6379
    host: golem-redis-master
    username: ""
    database: 0
    password:
      type: secret # secret or plain, or none if no auth
      plain: ""
      secret: # password from kubernetes secret
        name: golem-redis
        key: redis-password
#  nodeSelector: # added, if defined, see: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/

# worker service configuration
workerService:
  image: golemservices/golem-worker-service:latest
  imagePullPolicy: Always
  replica: 1
  ports:
    http: 9005
    requestHttp: 9006 # worker API Gateway
    grpc: 9007
  service:
    type: LoadBalancer
  postgres:
    port: 5432
    host: golem-postgres-postgresql
    database: golem_db
    username: golem_user
    schema: golem_worker
    password:
      type: secret # secret or plain
      plain: ""
      secret: # password from kubernetes secret
        name: golem-postgres-postgresql
        key: password
#  nodeSelector: # added, if defined, see: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/

# component service configuration
componentService:
  image: golemservices/golem-component-service:latest
  imagePullPolicy: Always
  replica: 1
  ports:
    http: 8083
    grpc: 9090
  service:
    type: LoadBalancer
  postgres:
    port: 5432
    host: golem-postgres-postgresql
    database: golem_db
    username: golem_user
    schema: golem_component
    password:
      type: secret  # secret or plain
      plain: ""
      secret: # password from kubernetes secret
        name: golem-postgres-postgresql
        key: password
#  nodeSelector: # added, if defined, see: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/

# component compilation service configuration
componentCompilationService:
  image: golemservices/golem-component-compilation-service:latest
  imagePullPolicy: Always
  replica: 1
  ports:
    http: 8084
    grpc: 9091
  service:
    type: LoadBalancer
#  nodeSelector: # added, if defined, see: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/

# logging configuration - used in all services
logging:
  json: false # true, if json log output should be used

# service account name  - used in all services, see: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccountName: golem-sa-default

env: default

# component store configuration
componentStore:
  type: pvc # pvc or s3
  pvc:
    storageClassName: hostpath
    storageSize: 5Gi
    accessMode: ReadWriteOnce
  s3:
    objectPrefix: ""
    bucket: ""
    region: "us-east-1"

# worker executor store configuration
workerExecutorStore:
  type: pvc # pvc or s3
  pvc:
    storageClassName: hostpath
    storageSize: 5Gi
    accessMode: ReadWriteOnce
  s3:
    objectPrefix: ""
    region: "us-east-1"
    compilationCacheBucket: "compilation-cache"
    customDataBucket: "custom-data"
    oplogPayloadBucket: "oplog-payload"
    compressedOplogBuckets: "[oplog-archive-1]"

# API ingress
ingress:
  type: nginx # ngnix or aws alb
  nginx:
    annotations: # see: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/use-regex: "true"
  alb:
    annotations: # see: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.8/guide/ingress/annotations/
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip

# worker API Gateway ingress
ingressWorkerRequest:
  type: none # none or aws alb
  alb:
    annotations: # see: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.8/guide/ingress/annotations/
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
