apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-shard-manager-{{.Values.env}}
  labels:
    env: {{.Values.env}}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: shard-manager-app-{{.Values.env}}
  template:
    metadata:
      labels:
        app: shard-manager-app-{{.Values.env}}
        env: {{.Values.env}}
    spec:
{{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
{{- end }}
{{- if .Values.shardManager.nodeSelector }}
      nodeSelector: {{- .Values.shardManager.nodeSelector | toYaml | nindent 8 }}
{{- end }}
      containers:
        - name: shard-manager-app-{{.Values.env}}
          image: "{{ .Values.shardManager.image }}"
          imagePullPolicy: {{.Values.shardManager.imagePullPolicy}}
          env:
            - name: ENVIRONMENT
              value: {{.Values.env}}
            - name: REDIS_HOST
              value: {{ .Values.shardManager.redis.host }}
            - name: GOLEM__REDIS__KEY_PREFIX
              value: {{.Values.env}}
            - name: GOLEM__REDIS__HOST
              value: {{ .Values.shardManager.redis.host }}
            - name: GOLEM__REDIS__PORT
              value: "{{ .Values.shardManager.redis.port }}"
            - name: GOLEM__REDIS__DATABASE
              value: "{{ .Values.shardManager.redis.database }}"
            - name: GOLEM__REDIS__USERNAME
              value: "{{ .Values.shardManager.redis.username }}"
{{- if .Values.shardManager.redis.password.plain }}
            - name: GOLEM__REDIS__PASSWORD
              value: "{{ .Values.shardManager.redis.password.plain }}"
{{- end }}
{{- if .Values.shardManager.redis.password.fromSecret.name }}
            - name: GOLEM__REDIS__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.shardManager.redis.password.fromSecret.name }}
                  key: {{ .Values.shardManager.redis.password.fromSecret.key }}
{{- end }}
            - name: RUST_BACKTRACE
              value: "1"
            - name: RUST_LOG
              value: "info,h2=warn,hyper=warn,tower=warn"
            - name: GOLEM__ENABLE_JSON_LOG
              value: "{{ .Values.logging.json }}"
            - name: GOLEM__HTTP_PORT
              value: "{{ .Values.shardManager.ports.http }}"
            - name: GOLEM_SHARD_MANAGER_PORT
              value: "{{ .Values.shardManager.ports.grpc }}"
          ports:
            - name: http
              containerPort: {{ .Values.shardManager.ports.http }}
            - name: grpc
              containerPort: {{ .Values.shardManager.ports.grpc }}
          livenessProbe:
            httpGet:
              path: "/healthcheck"
              port: http
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 20

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-worker-executor-{{.Values.env}}
  labels:
    env: {{.Values.env}}
spec:
  replicas: {{ .Values.workerExecutor.replica }}
  selector:
    matchLabels:
      app: worker-executor-app-{{.Values.env}}
  template:
    metadata:
      labels:
        app: worker-executor-app-{{.Values.env}}
        env: {{.Values.env}}
    spec:
{{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
{{- end }}
{{- if .Values.workerExecutor.nodeSelector }}
      nodeSelector: {{- .Values.workerExecutor.nodeSelector | toYaml | nindent 8 }}
{{- end }}
      containers:
        - name: worker-executor-app-{{.Values.env}}
          image: "{{ .Values.workerExecutor.image }}"
          imagePullPolicy: {{.Values.workerExecutor.imagePullPolicy}}
          env:
            - name: ENVIRONMENT
              value: {{.Values.env}}
            - name: REDIS_HOST
              value: {{ .Values.workerExecutor.redis.host }}
            - name: GOLEM__TEMPLATE_SERVICE__CONFIG__HOST
              value: service-template-service-{{.Values.env}}
            - name: GOLEM__TEMPLATE_SERVICE__CONFIG__PORT
              value: "{{ .Values.templateService.ports.grpc }}"
            - name: GOLEM__TEMPLATE_SERVICE__CONFIG__ACCESS_TOKEN
              value: "2A354594-7A63-4091-A46B-CC58D379F677"
            - name: GOLEM__SHARD_MANAGER_SERVICE__CONFIG__HOST
              value: service-shard-manager-{{.Values.env}}
            - name: GOLEM__SHARD_MANAGER_SERVICE__CONFIG__PORT
              value: "{{ .Values.shardManager.ports.grpc }}"
            - name: GOLEM__SHARD_MANAGER_SERVICE__TYPE
              value: "Grpc"
            - name: GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MAX_ATTEMPTS
              value: "5"
            - name: GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MIN_DELAY
              value: "100ms"
            - name: GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MAX_DELAY
              value: "2s"
            - name: GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MULTIPLIER
              value: "2"
            - name: GOLEM__REDIS__KEY_PREFIX
              value: {{.Values.env}}
            - name: GOLEM__REDIS__HOST
              value: {{ .Values.workerExecutor.redis.host }}
            - name: GOLEM__REDIS__PORT
              value: "{{ .Values.workerExecutor.redis.port }}"
            - name: GOLEM__REDIS__DATABASE
              value: "{{ .Values.workerExecutor.redis.database }}"
            - name: GOLEM__REDIS__USERNAME
              value: "{{ .Values.workerExecutor.redis.username }}"
{{- if .Values.workerExecutor.redis.password.plain }}
            - name: GOLEM__REDIS__PASSWORD
              value: "{{ .Values.workerExecutor.redis.password.plain }}"
{{- end }}
{{- if .Values.workerExecutor.redis.password.fromSecret.name }}
            - name: GOLEM__REDIS__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.workerExecutor.redis.password.fromSecret.name }}
                  key: {{ .Values.workerExecutor.redis.password.fromSecret.key }}
{{- end }}
            - name: WASMTIME_BACKTRACE_DETAILS
              value: "1"
            - name: RUST_BACKTRACE
              value: "1"
            - name: RUST_LOG
              value: "info"
            - name: GOLEM__ENABLE_JSON_LOG
              value: "{{ .Values.logging.json }}"
            - name: GOLEM__HTTP_PORT
              value: "{{ .Values.workerExecutor.ports.http }}"
            - name: GOLEM__PORT
              value: "{{ .Values.workerExecutor.ports.grpc }}"
            - name: GOLEM__PUBLIC_WORKER_API__HOST
              value: service-worker-service-{{.Values.env}}
            - name: GOLEM__PUBLIC_WORKER_API__PORT
              value: "{{ .Values.workerService.ports.grpc }}"
            - name: GOLEM__PUBLIC_WORKER_API__ACCESS_TOKEN
              value: "2A354594-7A63-4091-A46B-CC58D379F677"
{{- if eq .Values.templateCompiledStore.type "pvc" }}
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__TYPE
              value: "Local"
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__CONFIG__ROOT
              value: "/golem/template/compiled"
{{- end }}
{{- if eq .Values.templateCompiledStore.type "s3" }}
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__TYPE
              value: "S3"
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__CONFIG__REGION
              value: {{ .Values.templateCompiledStore.s3.region }}
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__CONFIG__OBJECT_PREFIX
              value: {{ .Values.templateCompiledStore.s3.objectPrefix }}
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__CONFIG__BUCKET
              value: {{ .Values.templateCompiledStore.s3.bucket }}
{{- end }}
{{- if eq .Values.workerBlobStore.type "pvc" }}
            - name: GOLEM__BLOB_STORE_SERVICE__CONFIG__TYPE
              value: "Local"
            - name: GOLEM__BLOB_STORE_SERVICE__CONFIG__ROOT
              value: "/golem/worker/blob"
            - name: GOLEM__BLOB_STORE_SERVICE__CONFIG__REGION
              value: ""
{{- end }}
{{- if eq .Values.workerBlobStore.type "s3" }}
            - name: GOLEM__BLOB_STORE_SERVICE__CONFIG__TYPE
              value: "S3"
            - name: GOLEM__BLOB_STORE_SERVICE__CONFIG__REGION
              value: {{ .Values.workerBlobStore.s3.region }}
            - name: GOLEM__BLOB_STORE_SERVICE__CONFIG__BUCKET_PREFIX
              value: {{ .Values.workerBlobStore.s3.bucketPrefix }}
{{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.workerExecutor.ports.http }}
            - name: grpc
              containerPort: {{ .Values.workerExecutor.ports.grpc }}
          livenessProbe:
            httpGet:
              path: "/healthcheck"
              port: http
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 45
            timeoutSeconds: 2
{{- if or (eq .Values.templateCompiledStore.type "pvc") (eq .Values.workerBlobStore.type "pvc") }}
          volumeMounts:
{{- end }}
{{- if eq .Values.templateCompiledStore.type "pvc" }}
            - name: golem-template-compiled-store-{{.Values.env}}
              mountPath: /golem/template/compiled
{{- end }}
{{- if eq .Values.workerBlobStore.type "pvc" }}
            - name: golem-worker-blob-store-{{.Values.env}}
              mountPath: /golem/worker/blob
{{- end }}
{{- if or (eq .Values.templateCompiledStore.type "pvc") (eq .Values.workerBlobStore.type "pvc") }}
      volumes:
{{- end }}
{{- if eq .Values.templateCompiledStore.type "pvc" }}
        - name: golem-template-compiled-store-{{.Values.env}}
          persistentVolumeClaim:
            claimName: golem-template-compiled-store-{{.Values.env}}
{{- end }}
{{- if eq .Values.workerBlobStore.type "pvc" }}
        - name: golem-worker-blob-store-{{.Values.env}}
          persistentVolumeClaim:
            claimName: golem-worker-blob-store-{{.Values.env}}
{{- end }}


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-worker-service-{{.Values.env}}
  labels:
    env: {{.Values.env}}
spec:
  replicas: {{ .Values.workerService.replica }}
  selector:
    matchLabels:
      app: worker-service-app-{{.Values.env}}
  template:
    metadata:
      labels:
        app: worker-service-app-{{.Values.env}}
        env: {{.Values.env}}
    spec:
{{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
{{- end }}
{{- if .Values.workerService.nodeSelector }}
      nodeSelector: {{- .Values.workerService.nodeSelector | toYaml | nindent 8 }}
{{- end }}
      containers:
        - name: worker-service-app-{{.Values.env}}
          image: "{{ .Values.workerService.image }}"
          imagePullPolicy: {{.Values.workerService.imagePullPolicy}}
          env:
            - name: ENVIRONMENT
              value: {{.Values.env}}
            - name: GOLEM__ENVIRONMENT
              value: {{.Values.env}}
            - name: REDIS_HOST
              value: {{ .Values.workerService.redis.host }}
            - name: GOLEM__ROUTING_TABLE__HOST
              value: service-shard-manager-{{.Values.env}}
            - name: GOLEM__ROUTING_TABLE__PORT
              value: "{{ .Values.shardManager.ports.grpc }}"
            - name: GOLEM__TEMPLATE_SERVICE__HOST
              value: service-template-service-{{.Values.env}}
            - name: GOLEM__TEMPLATE_SERVICE__PORT
              value: "{{ .Values.templateService.ports.grpc }}"
            - name: GOLEM__TEMPLATE_SERVICE__ACCESS_TOKEN
              value: "2A354594-7A63-4091-A46B-CC58D379F677"
            - name: GOLEM__REDIS__KEY_PREFIX
              value: {{.Values.env}}
            - name: GOLEM__REDIS__HOST
              value: {{ .Values.workerService.redis.host }}
            - name: GOLEM__REDIS__PORT
              value: "{{ .Values.workerService.redis.port }}"
            - name: GOLEM__REDIS__DATABASE
              value: "{{ .Values.workerService.redis.database }}"
            - name: GOLEM__REDIS__USERNAME
              value: "{{ .Values.workerService.redis.username }}"
{{- if .Values.workerService.redis.password.plain }}
            - name: GOLEM__REDIS__PASSWORD
              value: "{{ .Values.workerService.redis.password.plain }}"
{{- end }}
{{- if .Values.workerService.redis.password.fromSecret.name }}
            - name: GOLEM__REDIS__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.workerService.redis.password.fromSecret.name }}
                  key: {{ .Values.workerService.redis.password.fromSecret.key }}
{{- end }}
            - name: WASMTIME_BACKTRACE_DETAILS
              value: "1"
            - name: RUST_BACKTRACE
              value: "1"
            - name: RUST_LOG
              value: "info"
            - name: GOLEM__ENABLE_JSON_LOG
              value: "{{ .Values.logging.json }}"
            - name: GOLEM__CUSTOM_REQUEST_PORT
              value: "{{ .Values.workerService.ports.requestHttp }}"
            - name: GOLEM__PORT
              value: "{{ .Values.workerService.ports.http }}"
            - name: GOLEM__WORKER_GRPC_PORT
              value: "{{ .Values.workerService.ports.grpc }}"
          ports:
            - name: rhttp
              containerPort: {{ .Values.workerService.ports.requestHttp }}
            - name: http
              containerPort: {{ .Values.workerService.ports.http }}
            - name: grpc
              containerPort: {{ .Values.workerService.ports.grpc }}
          livenessProbe:
            httpGet:
              path: "/healthcheck"
              port: http
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 45
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: "/healthcheck"
              port: http
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 20
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-template-service-{{.Values.env}}
  labels:
    env: {{.Values.env}}
spec:
  replicas: {{ .Values.templateService.replica }}
  selector:
    matchLabels:
      app: template-service-app-{{.Values.env}}
  template:
    metadata:
      labels:
        app: template-service-app-{{.Values.env}}
        env: {{.Values.env}}
    spec:
{{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
{{- end }}
{{- if .Values.templateService.nodeSelector }}
      nodeSelector: {{- .Values.templateService.nodeSelector | toYaml | nindent 8 }}
{{- end }}
      containers:
        - name: template-service-app-{{.Values.env}}
          image: "{{ .Values.templateService.image }}"
          imagePullPolicy: {{.Values.templateService.imagePullPolicy}}
          env:
            - name: ENVIRONMENT
              value: {{.Values.env}}
            - name: RUST_BACKTRACE
              value: "1"
            - name: RUST_LOG
              value: "info,h2=warn,hyper=warn,tower=warn"
            - name: GOLEM__ENABLE_JSON_LOG
              value: "{{ .Values.logging.json }}"
            - name: GOLEM__DB__TYPE
              value: "Postgres"
            - name: GOLEM__DB__CONFIG__MAX_CONNECTIONS
              value: "10"
            - name: GOLEM__DB__CONFIG__DATABASE
              value: {{ .Values.templateService.postgres.database }}
            - name: GOLEM__DB__CONFIG__SCHEMA
              value: {{ .Values.templateService.postgres.schema }}
            - name: GOLEM__DB__CONFIG__HOST
              value: {{ .Values.templateService.postgres.host }}
            - name: GOLEM__DB__CONFIG__PORT
              value: "{{ .Values.templateService.postgres.port }}"
            - name: GOLEM__DB__CONFIG__USERNAME
              value: {{ .Values.templateService.postgres.username }}
            - name: GOLEM__COMPILATION__TYPE
              value: "Enabled"
            - name: GOLEM__COMPILATION__CONFIG__HOST
              value: service-template-compilation-service-{{.Values.env}}
            - name: GOLEM__COMPILATION__CONFIG__PORT
              value: "{{.Values.templateCompilationService.ports.grpc}}"

{{- if .Values.templateService.postgres.password.plain }}
            - name: GOLEM__DB__CONFIG__PASSWORD
              value: "{{ .Values.templateService.postgres.password.plain }}"
{{- end }}
{{- if .Values.templateService.postgres.password.fromSecret.name }}
            - name: GOLEM__DB__CONFIG__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.templateService.postgres.password.fromSecret.name }}
                  key: {{ .Values.templateService.postgres.password.fromSecret.key }}
{{- end }}
            - name: GOLEM__HTTP_PORT
              value: "{{ .Values.templateService.ports.http }}"
            - name: GOLEM__GRPC_PORT
              value: "{{ .Values.templateService.ports.grpc }}"
{{- if eq .Values.templateStore.type "pvc" }}
            - name: GOLEM__TEMPLATE_STORE__TYPE
              value: "Local"
            - name: GOLEM__TEMPLATE_STORE__CONFIG__ROOT_PATH
              value: "/golem/template"
            - name: GOLEM__TEMPLATE_STORE__CONFIG__OBJECT_PREFIX
              value: ""
{{- end }}
{{- if eq .Values.templateStore.type "s3" }}
            - name: GOLEM__TEMPLATE_STORE__TYPE
              value: "S3"
            - name: GOLEM__TEMPLATE_STORE__REGION
              value: {{ .Values.templateStore.s3.region }}
            - name: GOLEM__TEMPLATE_STORE__CONFIG__OBJECT_PREFIX
              value: {{ .Values.templateStore.s3.objectPrefix }}
            - name: GOLEM__TEMPLATE_STORE__CONFIG__BUCKET_NAME
              value: {{ .Values.templateStore.s3.bucket }}
{{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.templateService.ports.http }}
            - name: grpc
              containerPort: {{ .Values.templateService.ports.grpc }}
          livenessProbe:
            httpGet:
              path: "/healthcheck"
              port: http
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: "/healthcheck"
              port: http
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 20
{{- if eq .Values.templateStore.type "pvc" }}
          volumeMounts:
            - name: golem-template-store-{{.Values.env}}
              mountPath: /golem/template
{{- end }}
{{- if eq .Values.templateStore.type "pvc" }}
      volumes:
        - name: golem-template-store-{{.Values.env}}
          persistentVolumeClaim:
            claimName: golem-template-store-{{.Values.env}}
{{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-template-compilation-service-{{.Values.env}}
  labels:
    env: {{.Values.env}}
spec:
  replicas: {{ .Values.templateCompilationService.replica }}
  selector:
    matchLabels:
      app: template-compilation-service-app-{{.Values.env}}
  template:
    metadata:
      labels:
        app: template-compilation-service-app-{{.Values.env}}
        env: {{.Values.env}}
    spec:
{{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
{{- end }}
{{- if .Values.templateCompilationService.nodeSelector }}
      nodeSelector: {{- .Values.templateCompilationService.nodeSelector | toYaml | nindent 8 }}
{{- end }}
      containers:
        - name: template-compilation-service-app-{{.Values.env}}
          image: "{{ .Values.templateCompilationService.image }}"
          imagePullPolicy: {{.Values.templateCompilationService.imagePullPolicy}}
          env:
            - name: ENVIRONMENT
              value: {{.Values.env}}
            - name: GOLEM__TEMPLATE_SERVICE__HOST
              value: service-template-service-{{.Values.env}}
            - name: GOLEM__TEMPLATE_SERVICE__PORT
              value: "{{ .Values.templateService.ports.grpc }}"
            - name: GOLEM__TEMPLATE_SERVICE__ACCESS_TOKEN
              value: "2A354594-7A63-4091-A46B-CC58D379F677"
            - name: RUST_BACKTRACE
              value: "1"
            - name: RUST_LOG
              value: "info"
            - name: GOLEM__ENABLE_JSON_LOG
              value: "{{ .Values.logging.json }}"
            - name: GOLEM__HTTP_PORT
              value: "{{ .Values.templateCompilationService.ports.http }}"
            - name: GOLEM__GRPC_PORT
              value: "{{ .Values.templateCompilationService.ports.grpc }}"
{{- if eq .Values.templateCompiledStore.type "pvc" }}
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__TYPE
              value: "Local"
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__CONFIG__ROOT
              value: "/golem/template/compiled"
{{- end }}
{{- if eq .Values.templateCompiledStore.type "s3" }}
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__TYPE
              value: "S3"
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__CONFIG__REGION
              value: {{ .Values.templateCompiledStore.s3.region }}
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__CONFIG__OBJECT_PREFIX
              value: {{ .Values.templateCompiledStore.s3.objectPrefix }}
            - name: GOLEM__COMPILED_TEMPLATE_SERVICE__CONFIG__BUCKET
              value: {{ .Values.templateCompiledStore.s3.bucket }}
{{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.templateCompilationService.ports.http }}
            - name: grpc
              containerPort: {{ .Values.templateCompilationService.ports.grpc }}
          livenessProbe:
            httpGet:
              path: "/healthcheck"
              port: http
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 45
            timeoutSeconds: 2
{{- if eq .Values.templateCompiledStore.type "pvc" }}
          volumeMounts:
            - name: golem-template-compiled-store-{{.Values.env}}
              mountPath: /golem/template/compiled
{{- end }}
{{- if eq .Values.templateCompiledStore.type "pvc" }}
      volumes:
        - name: golem-template-compiled-store-{{.Values.env}}
          persistentVolumeClaim:
            claimName: golem-template-compiled-store-{{.Values.env}}
{{- end }}
