x-aliases:
  blob-storage-env-vars: &blob-storage-env-vars
    GOLEM__BLOB_STORAGE__TYPE: "LocalFileSystem"
    GOLEM__BLOB_STORAGE__CONFIG__ROOT: "/worker_executor_store"
  db-env-vars: &db-env-vars
    GOLEM__DB__TYPE: Postgres
    GOLEM__DB__CONFIG__DATABASE: golem_db
    GOLEM__DB__CONFIG__MAX_CONNECTIONS: 10
    GOLEM__DB__CONFIG__HOST: postgres
    GOLEM__DB__CONFIG__PORT: 5432
    GOLEM__DB__CONFIG__USERNAME: golem_user
    GOLEM__DB__CONFIG__PASSWORD: golem_password

services:
  router:
    image: nginx:latest
    pull_policy: always
    ports:
      - "${GOLEM_ROUTER_PORT}:80"
    environment:
      GOLEM_COMPONENT_MAX_SIZE_ALLOWED: ${GOLEM_ROUTER_COMPONENT_MAX_SIZE_ALLOWED}
      GOLEM_CLOUD_SERVICE_HOST: golem-cloud-service
      GOLEM_CLOUD_SERVICE_PORT: ${CLOUD_SERVICE_HTTP_PORT}
      GOLEM_WORKER_SERVICE_HOST: golem-worker-service
      GOLEM_WORKER_SERVICE_PORT: ${WORKER_SERVICE_HTTP_PORT}
      GOLEM_COMPONENT_SERVICE_HOST: golem-component-service
      GOLEM_COMPONENT_SERVICE_PORT: ${COMPONENT_SERVICE_HTTP_PORT}
      GOLEM_DEBUGGING_SERVICE_HOST: golem-debugging-service
      GOLEM_DEBUGGING_SERVICE_PORT: ${DEBUGGING_SERVICE_HTTP_PORT}
    depends_on:
      - golem-worker-service
      - golem-component-service
      - golem-shard-manager
      - golem-component-compilation-service
      - golem-cloud-service
      - golem-debugging-service
    volumes:
        - ./nginx.conf.template:/etc/nginx/nginx.conf.template:ro
    entrypoint: /bin/sh
    command: -c "envsubst < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    command: --port ${REDIS_PORT}

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: golem_db
      POSTGRES_USER: golem_user
      POSTGRES_PASSWORD: golem_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U golem_user -d golem_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  golem-cloud-service:
    image: golemservices/cloud-service:${GOLEM_IMAGES_VERSION}
    pull_policy: always
    restart: on-failure
    environment:
      <<: [*db-env-vars]
      ENVIRONMENT: local
      RUST_BACKTRACE: 1
      RUST_LOG=info,h2=warn,hyper=warn,tower: warn

      GOLEM__CORS_ORIGIN_REGEX: ${CORS_ORIGIN_REGEX}
      GOLEM__ACCOUNTS__ROOT__TOKEN: ${ADMIN_TOKEN}
      GOLEM__LOGIN__TYPE: Disabled

      GOLEM__HTTP_PORT: ${CLOUD_SERVICE_HTTP_PORT}
      GOLEM__GRPC_PORT: ${CLOUD_SERVICE_GRPC_PORT}
    depends_on:
      postgres:
        condition: service_healthy

  golem-shard-manager:
    image: golemservices/golem-shard-manager:${GOLEM_IMAGES_VERSION}
    pull_policy: always
    restart: on-failure
    environment:
      RUST_BACKTRACE: 1
      RUST_LOG=info,h2=warn,hyper=warn,tower: warn
      GOLEM__ENVIRONMENT: local

      GOLEM__PERSISTENCE__TYPE: "Redis"
      GOLEM__PERSISTENCE__CONFIG__HOST: redis
      GOLEM__PERSISTENCE__CONFIG__PORT: ${REDIS_PORT}

      GOLEM__HTTP_PORT: ${SHARD_MANAGER_HTTP_PORT}
      GOLEM__GRPC_PORT: ${SHARD_MANAGER_GRPC_PORT}
    depends_on:
      - redis

  golem-component-service:
    image: golemservices/golem-component-service:${GOLEM_IMAGES_VERSION}
    pull_policy: always
    restart: on-failure
    environment:
      <<: [*blob-storage-env-vars, *db-env-vars]
      GOLEM__DB__CONFIG__SCHEMA: golem_component

      ENVIRONMENT: local
      WASMTIME_BACKTRACE_DETAILS: 1
      RUST_BACKTRACE: 1
      RUST_LOG=info,h2=warn,hyper=warn,tower: warn

      GOLEM__COMPILATION__TYPE: "Enabled"
      GOLEM__COMPILATION__CONFIG__HOST: golem-component-compilation-service
      GOLEM__COMPILATION__CONFIG__PORT: ${COMPONENT_COMPILATION_SERVICE_GRPC_PORT}

      GOLEM__CLOUD_SERVICE__HOST: golem-cloud-service
      GOLEM__CLOUD_SERVICE__PORT: ${CLOUD_SERVICE_GRPC_PORT}
      GOLEM__CLOUD_SERVICE__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__GRPC_PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__HTTP_PORT: ${COMPONENT_SERVICE_HTTP_PORT}
    volumes:
      - blob_storage:/blob_storage
    depends_on:
      postgres:
        condition: service_healthy
      golem-cloud-service:
        condition: service_started

  golem-worker-service:
    image: golemservices/golem-worker-service:${GOLEM_IMAGES_VERSION}
    pull_policy: always
    restart: on-failure
    environment:
      <<: [*db-env-vars]
      GOLEM__DB__CONFIG__SCHEMA: golem_worker

      RUST_BACKTRACE: 1
      RUST_LOG=info,h2=warn,hyper=warn,tower: warn
      GOLEM__ENVIRONMENT: local

      GOLEM__GATEWAY_SESSION_STORAGE__TYPE: "Redis"
      GOLEM__GATEWAY_SESSION_STORAGE__CONFIG__PORT: ${REDIS_PORT}
      GOLEM__GATEWAY_SESSION_STORAGE__CONFIG__HOST: redis

      GOLEM__COMPONENT_SERVICE__HOST: golem-component-service
      GOLEM__COMPONENT_SERVICE__PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__COMPONENT_SERVICE__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__ROUTING_TABLE__HOST: golem-shard-manager
      GOLEM__ROUTING_TABLE__PORT: ${SHARD_MANAGER_GRPC_PORT}

      GOLEM__CLOUD_SERVICE__HOST: golem-cloud-service
      GOLEM__CLOUD_SERVICE__PORT: ${CLOUD_SERVICE_GRPC_PORT}
      GOLEM__CLOUD_SERVICE__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__CUSTOM_REQUEST_PORT: ${WORKER_SERVICE_CUSTOM_REQUEST_PORT}
      GOLEM__PORT: ${WORKER_SERVICE_HTTP_PORT}
      GOLEM__WORKER_GRPC_PORT: ${WORKER_SERVICE_GRPC_PORT}
    volumes:
      - blob_storage:/blob_storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      golem-worker-executor:
        condition: service_started
      golem-component-service:
        condition: service_started
      golem-shard-manager:
        condition: service_started
      golem-cloud-service:
        condition: service_started

  golem-component-compilation-service:
    image: golemservices/golem-component-compilation-service:${GOLEM_IMAGES_VERSION}
    pull_policy: always
    restart: on-failure
    environment:
      <<: [*blob-storage-env-vars]
      RUST_BACKTRACE: 1
      RUST_LOG=info,h2=warn,hyper=warn,tower: warn

      GOLEM__COMPONENT_SERVICE__HOST: golem-component-service
      GOLEM__COMPONENT_SERVICE__PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__COMPONENT_SERVICE__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__COMPILED_COMPONENT_SERVICE__TYPE: "Enabled"

      GOLEM__HTTP_PORT: ${COMPONENT_COMPILATION_SERVICE_HTTP_PORT}
      GOLEM__GRPC_PORT: ${COMPONENT_COMPILATION_SERVICE_GRPC_PORT}
    volumes:
      - blob_storage:/blob_storage
    depends_on:
      - golem-component-service

  golem-worker-executor:
    image: golemservices/golem-worker-executor:${GOLEM_IMAGES_VERSION}
    pull_policy: always
    restart: on-failure
    environment:
      <<: [*blob-storage-env-vars]
      ENVIRONMENT: local
      WASMTIME_BACKTRACE_DETAILS: 1
      RUST_BACKTRACE: 1
      RUST_LOG: info

      GOLEM__KEY_VALUE_STORAGE__TYPE: "Redis"
      GOLEM__KEY_VALUE_STORAGE__CONFIG__PORT: ${REDIS_PORT}
      GOLEM__KEY_VALUE_STORAGE__CONFIG__HOST: redis

      GOLEM__INDEXED_STORAGE__TYPE: "KVStoreRedis"

      GOLEM__COMPONENT_SERVICE__CONFIG__HOST: golem-component-service
      GOLEM__COMPONENT_SERVICE__CONFIG__PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__COMPONENT_SERVICE__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__AGENT_TYPES_SERVICE__CONFIG__HOST: golem-component-service
      GOLEM__AGENT_TYPES_SERVICE__CONFIG__PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__AGENT_TYPES_SERVICE__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__PLUGIN_SERVICE__CONFIG__HOST: golem-component-service
      GOLEM__PLUGIN_SERVICE__CONFIG__PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__PLUGIN_SERVICE__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__HOST: golem-shard-manager
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__PORT: ${SHARD_MANAGER_GRPC_PORT}
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MAX_ATTEMPTS: 5
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MIN_DELAY: "100ms"
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MAX_DELAY: "2s"
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MULTIPLIER: 2

      GOLEM__PUBLIC_WORKER_API__HOST: golem-worker-service
      GOLEM__PUBLIC_WORKER_API__PORT: ${WORKER_SERVICE_GRPC_PORT}
      GOLEM__PUBLIC_WORKER_API__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__RESOURCE_LIMITS__CONFIG__HOST: golem-cloud-service
      GOLEM__RESOURCE_LIMITS__CONFIG__PORT: ${CLOUD_SERVICE_GRPC_PORT}
      GOLEM__RESOURCE_LIMITS__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__PROJECT_SERVICE__CONFIG__HOST: golem-cloud-service
      GOLEM__PROJECT_SERVICE__CONFIG__PORT: ${CLOUD_SERVICE_GRPC_PORT}
      GOLEM__PROJECT_SERVICE__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__COMPILED_COMPONENT_SERVICE__TYPE: "Enabled"
      GOLEM__SHARD_MANAGER_SERVICE__TYPE: "Grpc"

      GOLEM__PORT: ${WORKER_EXECUTOR_GRPC_PORT}
      GOLEM__HTTP_PORT: ${WORKER_EXECUTOR_HTTP_PORT}
    volumes:
      - blob_storage:/blob_storage
    depends_on:
      - redis
      - golem-shard-manager
      - golem-component-service
      - golem-cloud-service

  golem-debugging-service:
    image: golemservices/golem-debugging-service:${GOLEM_IMAGES_VERSION}
    pull_policy: always
    restart: on-failure
    environment:
      <<: [*blob-storage-env-vars]
      ENVIRONMENT: local
      WASMTIME_BACKTRACE_DETAILS: 1
      RUST_BACKTRACE: 1
      RUST_LOG: info

      GOLEM__KEY_VALUE_STORAGE__TYPE: "Redis"
      GOLEM__KEY_VALUE_STORAGE__CONFIG__PORT: ${REDIS_PORT}
      GOLEM__KEY_VALUE_STORAGE__CONFIG__HOST: redis

      GOLEM__INDEXED_STORAGE__TYPE: "KVStoreRedis"

      GOLEM__COMPONENT_SERVICE__CONFIG__HOST: golem-component-service
      GOLEM__COMPONENT_SERVICE__CONFIG__PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__COMPONENT_SERVICE__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__AGENT_TYPES_SERVICE__CONFIG__HOST: golem-component-service
      GOLEM__AGENT_TYPES_SERVICE__CONFIG__PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__AGENT_TYPES_SERVICE__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__PLUGIN_SERVICE__CONFIG__HOST: golem-component-service
      GOLEM__PLUGIN_SERVICE__CONFIG__PORT: ${COMPONENT_SERVICE_GRPC_PORT}
      GOLEM__PLUGIN_SERVICE__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__HOST: golem-shard-manager
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__PORT: ${SHARD_MANAGER_GRPC_PORT}
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MAX_ATTEMPTS: 5
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MIN_DELAY: "100ms"
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MAX_DELAY: "2s"
      GOLEM__SHARD_MANAGER_SERVICE__CONFIG__RETRIES__MULTIPLIER: 2

      GOLEM__PUBLIC_WORKER_API__HOST: golem-worker-service
      GOLEM__PUBLIC_WORKER_API__PORT: ${WORKER_SERVICE_GRPC_PORT}
      GOLEM__PUBLIC_WORKER_API__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__RESOURCE_LIMITS__CONFIG__HOST: golem-cloud-service
      GOLEM__RESOURCE_LIMITS__CONFIG__PORT: ${CLOUD_SERVICE_GRPC_PORT}
      GOLEM__RESOURCE_LIMITS__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__PROJECT_SERVICE__CONFIG__HOST: golem-cloud-service
      GOLEM__PROJECT_SERVICE__CONFIG__PORT: ${CLOUD_SERVICE_GRPC_PORT}
      GOLEM__PROJECT_SERVICE__CONFIG__ACCESS_TOKEN: ${ADMIN_TOKEN}

      GOLEM__COMPILED_COMPONENT_SERVICE__TYPE: "Enabled"
      GOLEM__HTTP_PORT: ${DEBUGGING_SERVICE_HTTP_PORT}
    volumes:
      - blob_storage:/blob_storage
    depends_on:
      - redis
      - golem-shard-manager
      - golem-component-service
      - golem-cloud-service

volumes:
  redis_data:
    driver: local
  component_store:
    driver: local
  postgres_data:
    driver: local
  blob_storage:
    driver: local
